{
  "hash": "fa6d63ee4f392c499599381102aedaad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nauthor: \"Matt Hodges\"\ntitle: \"Austin, Texas: Hot or Not?\"\npagetitle: \"Austin, Texas: Hot or Not?\"\nsubtitle: \"This summer hasn't felt as hot as last summer. I decided to find out if that was actually true.\"\nimage: \"austin-temperatures-2014-2024.png\"\ndate: 2024-07-30\n---\n\n\nI live in Austin, Texas. And last summer I felt like:\n\n![](so-damn-hot.webp){fig-alt=\"It's so damn hot\"}\n\nBut this year, I've felt more like:\n\n![](white-claw.webp){fig-alt=\"White Claw\"}\n\nAnd earlier today I thought aloud to the group chat:\n\n> I need to look up if Austin is being weird this year. Last year we got to like 50 consecutive days over 100. I don't think we've cracked 100 yet this year? Is there a website that answers this question?\n\nLast year the heat was so bad that local news outlets were keeping a [running tally](https://www.kxan.com/weather/weather-blog/july-2023-100-degrees-streak/) of how many consecutive days we broke 100Â°F. It turns out we had 45 straight days of triple-digit heat in 2023, which began on July 8 and continued through August 22. I'm writing this on July 30, 2024 and I can't recall a single day above 100Â°F yet this year.\n\nYear-vs-year location based time series temperature data absolutely seems like a thing that should exist. Every month or so someone posts the updated [doom surface air temperature graph](https://www.nytimes.com/2023/09/07/learning/whats-going-on-in-this-graph-sept-13-2023.html), so surely I can just look that data up for my location, right?\n\nOn [weather.gov](https://weather.gov) you can get your [own version of this graph](https://www.weather.gov/ewx/climategraphs). Pretty cool! But only for the current year:\n\n![](austin-bergstrom-temps-2024.png){fig-alt=\"Austin/San Antonio WFO Climate Graphs\"}\n\nYou can also get tabular historic data within montly windows that sometimes come as html and sometimes come as PDF. Also cool. But not convenient:\n\n![](austin-tabular-weather.png){fig-alt=\"Climatological Data for Austin-Bergstrom Airport Area, TX - June 2024\"}\n\nAfter about 15 minutes of clicking, I couldn't find a great way to generate the viz I was looking for; and I couldn't get an easy data export. Maybe there's a one-click way to get CSVs, but I didn't find it. But after about 5 more minutes of googling, I did find the National Oceanic and Atmostpheric Administration's [Climate Data Online](https://www.ncei.noaa.gov/cdo-web/) portal, which has an [API](https://www.ncdc.noaa.gov/cdo-web/webservices/v2).\n\n> NCDC's Climate Data Online (CDO) offers web services that provide access to current data. This API is for developers looking to create their own scripts or programs that use the CDO database of weather and climate data. \n\nHey, that sounds like me!\n\nThe API needs an [access token](https://www.ncdc.noaa.gov/cdo-web/token). Wonderfully, all I needed to do was type in my email address and roughly one second later an access token landed in my inbox. LFG.\n\nFrom here it took a bit more reading to grok what data is available and in what formats, but I eventually found out about GHCND, or the [Global Historical Climatology Network daily](https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily):\n\n> The Global Historical Climatology Network daily (GHCNd) is an integrated database of daily climate summaries from land surface stations across the globe. GHCNd is made up of daily climate records from numerous sources that have been integrated and subjected to a common suite of quality assurance reviews.\n\nThat sounds like it might contain what I'm looking for.\n\nNext, there are a lot of ways to filter this data by location, but `stationid` caught my attention. I found [this list of GHCND stations](https://www.ncei.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt) and decided to go with `AUSTIN BERGSTROM INTL AP` because it's the same location from the tabular data above. It has the identifier `USW00013904`.\n\nAfter a quick `pip install requests pandas matplotlib` and tossing my token into a `NCDC_CDO_TOKEN` environment variable, and we're ready to jam.\n\nFirst let's get a function to grab some data. I'm intersted in comparing year over year, so let's grab a year at a time.\n\n::: {#774721b4 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\n\nimport matplotlib.patches as mpatches\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport requests\n\ndef get_max_temps(year, limit=366):\n    token = os.getenv(\"NCDC_CDO_TOKEN\")\n    start_date = f\"{year}-01-01\"\n    end_date = f\"{year}-12-31\"\n    url = \"https://www.ncdc.noaa.gov/cdo-web/api/v2/data\"\n    params = {\n        \"datasetid\": \"GHCND\",\n        \"stationid\": \"GHCND:USW00013904\",\n        \"startdate\": start_date,\n        \"enddate\": end_date,\n        \"datatypeid\": \"TMAX\",  # max temp\n        \"units\": \"standard\",  # ðŸ‡ºðŸ‡¸\n        \"limit\": limit,  \n    }\n    headers = {\n        \"token\": token  \n    }\n\n    response = requests.get(url, headers=headers, params=params)\n    data = response.json()\n    return data\n```\n:::\n\n\nLet's look at the first three:\n\n```python\nget_max_temps(2024, limit=3)\n```\n\n```json\n{\n    \"metadata\": {\n        \"resultset\": {\n            \"offset\": 1,\n            \"count\": 209,\n            \"limit\": 3\n        }\n    },\n    \"results\": [\n        {\n            \"date\": \"2024-01-01T00:00:00\",\n            \"datatype\": \"TMAX\",\n            \"station\": \"GHCND:USW00013904\",\n            \"attributes\": \",,W,2400\",\n            \"value\": 58.0\n        },\n        {\n            \"date\": \"2024-01-02T00:00:00\",\n            \"datatype\": \"TMAX\",\n            \"station\": \"GHCND:USW00013904\",\n            \"attributes\": \",,W,2400\",\n            \"value\": 53.0\n        },\n        {\n            \"date\": \"2024-01-03T00:00:00\",\n            \"datatype\": \"TMAX\",\n            \"station\": \"GHCND:USW00013904\",\n            \"attributes\": \",,W,2400\",\n            \"value\": 51.0\n        }\n    ]\n}\n```\n\nGreat! We can pull from the `date` and the `value` fields. Let's grab all of 2024 and shove it into a DataFrame.\n\n::: {#d607ec93 .cell execution_count=2}\n``` {.python .cell-code}\ndef to_df(data):\n    # Extract date and truncate off the time part\n    dates = [item[\"date\"][:10] for item in data[\"results\"]]\n\n    # Grab the max temp value for each date\n    max_temps = [item[\"value\"] for item in data[\"results\"]]\n\n    # Create a DataFrame\n    df = pd.DataFrame({\"date\": dates,\"max_temp\": max_temps})\n\n    # Set the `date` col as a datetime and make it the index\n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df.set_index(\"date\", inplace=True)\n    \n    return df\n```\n:::\n\n\nQuick spot check:\n\n::: {#64b9586a .cell execution_count=3}\n``` {.python .cell-code}\ndf_2024 = to_df(get_max_temps(2024))\n\nprint(f\"Head:\\n{df_2024.head()}\")\nprint(f\"Tail:\\n{df_2024.tail()}\")\nprint(f\"Format:\\n{df_2024.dtypes}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHead:\n            max_temp\ndate                \n2024-01-01      58.0\n2024-01-02      53.0\n2024-01-03      51.0\n2024-01-04      58.0\n2024-01-05      67.0\nTail:\n            max_temp\ndate                \n2024-07-23      82.0\n2024-07-24      89.0\n2024-07-25      88.0\n2024-07-26      89.0\n2024-07-27      86.0\nFormat:\nmax_temp    float64\ndtype: object\n```\n:::\n:::\n\n\nAwesome. I'm writing this on `2024-07-30` and it's got data up through `2024-07-27`. Good enough for me!\n\nNow to actually get at what I was trying to do this whole time. I'm going to grab DataFrames for 2023 and 2024, and plot a time series of each.\n\n::: {#bc6544d4 .cell execution_count=4}\n``` {.python .cell-code}\ndf_2023 = to_df(get_max_temps(2023))\n\n# Adjust 2023 dates to match the 2024 index\n# This is how we shift the graph to overlap\n# If you don't do this, 2024 comes after, not on top of, 2023\ndf_2023.index = df_2023.index.map(lambda x: x.replace(year=2024))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(10, 6))\ndf_2023.plot(ax=ax, color=\"black\", legend=\"2023\")\ndf_2024.plot(ax=ax, color=\"red\", legend=\"2024\")\n\n# Sett x-axis to display month labels\nax.set_xticks(\n    pd.date_range(\n        start=df_2023.index.min(),\n        end=df_2023.index.max(),\n        freq='MS',\n    )\n)\nax.set_xticklabels(\n    pd.date_range(\n        start=df_2023.index.min(),\n        end=df_2023.index.max(),\n        freq='MS',\n    ).strftime('%B')\n)\n\n# Formatting\nblack_patch = mpatches.Patch(color=\"black\", label=\"2023\")\nred_patch = mpatches.Patch(color=\"red\", label=\"2024\")\nplt.legend(handles=[black_patch, red_patch])\nax.set_title(\"Max Daily Temperatures Recorded in the Austin-Bergstrom Airport Area\")\nplt.xticks(rotation=45)\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=798 height=520}\n:::\n:::\n\n\nSo that's pretty cool. Most of 2024 has tracked 2023 for daily high temperatures. But not July. July has been weirdly cooler than last year. Or last year was weirdly hotter than normal.\n\nActually, let's see if we can tease that out. Let's grab the past 10 years.\n\n::: {#57a392cf .cell execution_count=5}\n``` {.python .cell-code}\nimport time\n\n# Create a dictionary of year:DataFrame\nyear_dfs = {}\nfor year in range(2014, 2024):\n    year_dfs[year] = to_df(get_max_temps(year))\n    # Be a nice internet citizen and wait between requests\n    time.sleep(5)\n\n# Adjust pre-2024 dates to match the 2024 index\n# This is how we shift the graph to overlap\n# If you don't do this, 2024 comes after, not on top of, 2023\nfor df in year_dfs.values():\n    df.index = df.index.map(lambda x: x.replace(year=2024))\n\n# Plot the data\nfig, ax = plt.subplots(figsize=(10, 6))\nfor year, df in year_dfs.items():\n    if year == 2023:\n         df.plot(ax=ax, label=\"2023\", color=\"gold\")\n    else:\n        df.plot(ax=ax, color=\"gray\")\ndf_2024.plot(ax=ax, label=\"2024\", color=\"red\")\n\n# Sett x-axis to display month labels\nax.set_xticks(\n    pd.date_range(\n        start=year_dfs[2023].index.min(),\n        end=year_dfs[2023].index.max(),\n        freq='MS'\n    )\n)\nax.set_xticklabels(\n    pd.date_range(\n        start=year_dfs[2023].index.min(),\n        end=year_dfs[2023].index.max(),\n        freq='MS',\n    ).strftime('%B')\n)\n\n# Formatting\nax.set_title(\n    \"Max Daily Temperatures Recorded in the Austin-Bergstrom Airport Area 2014 - 2024\"\n)\nplt.xticks(rotation=45)\ngold_patch = mpatches.Patch(color=\"gold\", label=\"2023\")\nred_patch = mpatches.Patch(color=\"red\", label=\"2024\")\nplt.legend(handles=[gold_patch, red_patch])\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=798 height=520}\n:::\n:::\n\n\nSeems like Austin's 2023 summer was on the hotter side, and so far the 2024 summer is on the cooler side.\n\nAnd was I correct that we haven't cracked 100 yet this year?\n\n::: {#a1368bfa .cell execution_count=6}\n``` {.python .cell-code}\nprint(df_2024[df_2024[\"max_temp\"] >= 100])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            max_temp\ndate                \n2024-07-02     100.0\n2024-07-05     100.0\n```\n:::\n:::\n\n\nComputers!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}