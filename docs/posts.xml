<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Matt Hodges</title>
<link>https://matthodges.com/posts.html</link>
<atom:link href="https://matthodges.com/posts.xml" rel="self" type="application/rss+xml"/>
<description>My writing, largely focussed on United States politics and software engineering</description>
<image>
<url>https://matthodges.com/img/social.jpg</url>
<title>Matt Hodges</title>
<link>https://matthodges.com/posts.html</link>
</image>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Thu, 08 Aug 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>Spline Versus PCHIP</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-08-08-spline-pchip/</link>
  <description><![CDATA[ 





<p>Let’s say you’ve got some data points and you make a scatterplot:</p>
<div id="6770bec8" class="cell" data-execution_count="1">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-2-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>You might say <em>great!</em> and call it a day. But what if we want to see the behavior of the data between these points? Linear interpolation is a simple way to connect the dots:</p>
<div id="5fbc3e58" class="cell" data-execution_count="2">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-3-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And now at this point you might say <em>great!</em> and call it a day. Or, you might decide that you can do better than linear interpolation. That sure does look like a sine curve. But you’re working with a collection of discrete points, and you wouldn’t want to erroneously just plot a sine function. Instead, you can reach for a smoother interpolation function, such as a spline:</p>
<div id="3834dba9" class="cell" data-execution_count="3">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The term “spline” refers to a wide class of functions involving interpolation and smoothing. In data viz, we often see the basis spline (or, B-spline). Think of spline interpolation like a flexible ruler that bends to pass smoothly through all your data points, but in doing so, it might sometimes bend too much or too little. Sometimes the spline overshoots, introducing peaks or valleys that weren’t there in the original data.</p>
<div id="07a1da7b" class="cell" data-execution_count="4">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Sometimes this is okay! Depending on your data, a spline may be ideal for generating a very smooth curve, especially when smoothness is more critical than accurately interpolating between every data point. And when the underlying function is oscillatory, a spline can capture the movement between points quite accurately. But real-world data is often not oscillatory.</p>
<p>Let’s say you’ve got a month’s worth of <a href="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/">observed temperatures recorded in the Austin area</a>:</p>
<div id="4cd0e3e0" class="cell" data-execution_count="5">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And because temperatures exist on a continuous distribution, we could do a simple linear interpolation to articulate the rates of change between points:</p>
<div id="5b43dc5a" class="cell" data-execution_count="6">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-7-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>But temperatures are unlikely to ascend or descend on linear gradients, so we could also try a spline:</p>
<div id="2f302d85" class="cell" data-execution_count="7">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s a bit more natural, but it looks a bit weird, too. Unlike our sine wave sampling from before, the data points here are of real, observed, daily maximum temperatures. So it’s a little strange that the fit curve overshoots and undershoots those known values. The interpolation is smooth, but the shape of the data has not been preserved.</p>
<div id="27aabacb" class="cell" data-execution_count="8">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-9-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>While a spline produces smooth curves, the artifacts of overshooting, undershooting, or unwanted oscillations between data points can misrepresent what the data actually says. Fortunately, we have another option: the PCHIP, or Piecewise Cubic Hermite Interpolating Polynomial. <a href="https://en.wikipedia.org/wiki/Charles_Hermite">Hermite</a> refers to a method of interpolating data points where both the function values and the derivatives at those points are matched.</p>
<p>A PCHIP preserves the shape of the data and avoids oscillations. The monotonicity (increasing or decreasing trend) of the data is preserved, ensuring no overshoots between data points. I like to think of PCHIP as a hand that firmly (but not rigidly) guides a curve through the data points without allowing any unnecessary dips or rises.</p>
<div id="56fc5f1d" class="cell" data-execution_count="9">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-10-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Looks good! This results in a curve that better captures the shape of the function, especially when the slope information is critical. In our case, the slope is critical. It makes no sense to have a positive slope (overshooting) between points, when the next value decreased.</p>
<p>But PCHIP isn’t always better than Spline. Let’s apply a PCHIP interpolation to the oscillating data from before:</p>
<div id="4c56e834" class="cell" data-execution_count="10">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It’s not wrong, it’s just a little weird and lumpy. It’s a curve that connects the dots, but it somewhat lost the true movement between points.</p>
<p>PCHIP can aggressively flattened near local extrema. When you need to capture those local extrema — as we did in our temperature plots — PCHIP works well. When you need to capture the smooth movements of oscillatory data, Spline works well. Sometimes it’s fairly intuitive what you need. Sometimes you need to plot it to really see which works better. Other times it takes more thought.</p>
<p>Consider the nature of your data. If your data is smooth and continuous, like a waveform or a gradient, spline interpolation might work well. If your data has sharp changes or you need to preserve the natural shape of the data without introducing artifacts, PCHIP might be the better choice. In practical applications like climate modeling, financial forecasting, or engineering metrics, the choice can have significant implications.</p>
<p>Graphs!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-08-08-spline-pchip/</guid>
  <pubDate>Thu, 08 Aug 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-08-08-spline-pchip/pchip-annotated.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>Austin, Texas: Hot or Not?</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-30-austin-hot-or-not/</link>
  <description><![CDATA[ 





<p>I live in Austin, Texas. And last summer I felt like:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/so-damn-hot.webp" class="img-fluid" alt="It's so damn hot"></p>
<p>But this year, I’ve felt more like:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/white-claw.webp" class="img-fluid" alt="White Claw"></p>
<p>And earlier today I thought aloud to the group chat:</p>
<blockquote class="blockquote">
<p>I need to look up if Austin is being weird this year. Last year we got to like 50 consecutive days over 100. I don’t think we’ve cracked 100 yet this year? Is there a website that answers this question?</p>
</blockquote>
<p>Last year the heat was so bad that local news outlets were keeping a <a href="https://www.kxan.com/weather/weather-blog/july-2023-100-degrees-streak/">running tally</a> of how many consecutive days we broke 100°F. It turns out we had 45 straight days of triple-digit heat in 2023, which began on July 8 and continued through August 22. I’m writing this on July 30, 2024 and I can’t recall a single day above 100°F yet this year.</p>
<p>Year-vs-year location based time series temperature data absolutely seems like a thing that should exist. Every month or so someone posts the updated <a href="https://www.nytimes.com/2023/09/07/learning/whats-going-on-in-this-graph-sept-13-2023.html">doom surface air temperature graph</a>, so surely I can just look that data up for my location, right?</p>
<p>On <a href="https://weather.gov">weather.gov</a> you can get your <a href="https://www.weather.gov/ewx/climategraphs">own version of this graph</a>. Pretty cool! But only for the current year:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/austin-bergstrom-temps-2024.png" class="img-fluid" alt="Austin/San Antonio WFO Climate Graphs"></p>
<p>You can also get tabular historic data within monthly windows that sometimes come as html and sometimes come as PDF. Also cool. But not convenient:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/austin-tabular-weather.png" class="img-fluid" alt="Climatological Data for Austin-Bergstrom Airport Area, TX - June 2024"></p>
<p>After about 15 minutes of clicking, I couldn’t find a great way to generate the viz I was looking for; and I couldn’t get an easy data export. Maybe there’s a one-click way to get CSVs, but I didn’t find it. But after about 5 more minutes of googling, I did find the National Oceanic and Atmostpheric Administration’s <a href="https://www.ncei.noaa.gov/cdo-web/">Climate Data Online</a> portal, which has an <a href="https://www.ncdc.noaa.gov/cdo-web/webservices/v2">API</a>.</p>
<blockquote class="blockquote">
<p>NCDC’s Climate Data Online (CDO) offers web services that provide access to current data. This API is for developers looking to create their own scripts or programs that use the CDO database of weather and climate data.</p>
</blockquote>
<p>Hey, that sounds like me!</p>
<p>The API needs an <a href="https://www.ncdc.noaa.gov/cdo-web/token">access token</a>. Wonderfully, all I needed to do was type in my email address and roughly one second later an access token landed in my inbox. LFG.</p>
<p>From here it took a bit more reading to grok what data is available and in what formats, but I eventually found out about GHCND, or the <a href="https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily">Global Historical Climatology Network daily</a>:</p>
<blockquote class="blockquote">
<p>The Global Historical Climatology Network daily (GHCNd) is an integrated database of daily climate summaries from land surface stations across the globe. GHCNd is made up of daily climate records from numerous sources that have been integrated and subjected to a common suite of quality assurance reviews.</p>
</blockquote>
<p>That sounds like it might contain what I’m looking for.</p>
<p>Next, there are a lot of ways to filter this data by location, but <code>stationid</code> caught my attention. I found <a href="https://www.ncei.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt">this list of GHCND stations</a> and decided to go with <code>AUSTIN BERGSTROM INTL AP</code> because it’s the same location from the tabular data above. It has the identifier <code>USW00013904</code>.</p>
<p>After a quick <code>pip install requests pandas matplotlib</code> and tossing my token into a <code>NCDC_CDO_TOKEN</code> environment variable, we’re ready to jam.</p>
<p>First let’s get a function to grab some data. I’m intersted in comparing year over year, so let’s grab a year at a time.</p>
<div id="1b1947dc" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpatches</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_max_temps(year, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">366</span>):</span>
<span id="cb1-9">    token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NCDC_CDO_TOKEN"</span>)</span>
<span id="cb1-10">    start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-01-01"</span></span>
<span id="cb1-11">    end_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-12-31"</span></span>
<span id="cb1-12">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.ncdc.noaa.gov/cdo-web/api/v2/data"</span></span>
<span id="cb1-13">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND"</span>,</span>
<span id="cb1-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stationid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span>,</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startdate"</span>: start_date,</span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enddate"</span>: end_date,</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datatypeid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max temp</span></span>
<span id="cb1-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"units"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"standard"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 🇺🇸</span></span>
<span id="cb1-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"limit"</span>: limit,  </span>
<span id="cb1-21">    }</span>
<span id="cb1-22">    headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span>: token  </span>
<span id="cb1-24">    }</span>
<span id="cb1-25"></span>
<span id="cb1-26">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb1-27">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span></code></pre></div>
</div>
<p>Let’s look at the first three:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">get_max_temps(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metadata"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"resultset"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"count"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">209</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"limit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"results"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-11">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-01T00:00:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"datatype"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"station"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",,W,2400"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">58.0</span></span>
<span id="cb3-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-02T00:00:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"datatype"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"station"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",,W,2400"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-22">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">53.0</span></span>
<span id="cb3-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-25">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-03T00:00:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-26">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"datatype"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-27">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"station"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-28">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",,W,2400"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-29">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">51.0</span></span>
<span id="cb3-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-31">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Great! We can pull from the <code>date</code> and the <code>value</code> fields. Let’s grab all of 2024 and shove it into a DataFrame.</p>
<div id="6b48b882" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_df(data):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract date and truncate off the time part</span></span>
<span id="cb4-3">    dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"results"</span>]]</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the max temp value for each date</span></span>
<span id="cb4-6">    max_temps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"results"</span>]]</span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataFrame</span></span>
<span id="cb4-9">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: dates,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_temp"</span>: max_temps})</span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the `date` col as a datetime and make it the index</span></span>
<span id="cb4-12">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>])</span>
<span id="cb4-13">    df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-14">    </span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span></code></pre></div>
</div>
<p>Quick spot check:</p>
<div id="3ead4ccd" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df_2024 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_df(get_max_temps(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>))</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Head:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_2024<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>head()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Tail:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_2024<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tail()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Format:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_2024<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dtypes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Head:
            max_temp
date                
2024-01-01      58.0
2024-01-02      53.0
2024-01-03      51.0
2024-01-04      58.0
2024-01-05      67.0
Tail:
            max_temp
date                
2024-07-23      82.0
2024-07-24      89.0
2024-07-25      88.0
2024-07-26      89.0
2024-07-27      86.0
Format:
max_temp    float64
dtype: object</code></pre>
</div>
</div>
<p>Awesome. I’m writing this on <code>2024-07-30</code> and it’s got data up through <code>2024-07-27</code>. Good enough for me!</p>
<p>Now to actually get at what I was trying to do this whole time. I’m going to grab DataFrames for 2023 and 2024, and plot a time series of each.</p>
<div id="23460fda" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_2023 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_df(get_max_temps(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust 2023 dates to match the 2024 index</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is how we shift the graph to overlap</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you don't do this, 2024 comes after, not on top of, 2023</span></span>
<span id="cb7-6">df_2023.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.replace(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>))</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb7-9">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-10">df_2023.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>)</span>
<span id="cb7-11">df_2024.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>)</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sett x-axis to display month labels</span></span>
<span id="cb7-14">ax.set_xticks(</span>
<span id="cb7-15">    pd.date_range(</span>
<span id="cb7-16">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb7-17">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb7-18">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span>,</span>
<span id="cb7-19">    )</span>
<span id="cb7-20">)</span>
<span id="cb7-21">ax.set_xticklabels(</span>
<span id="cb7-22">    pd.date_range(</span>
<span id="cb7-23">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb7-24">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb7-25">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span>,</span>
<span id="cb7-26">    ).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%B'</span>)</span>
<span id="cb7-27">)</span>
<span id="cb7-28"></span>
<span id="cb7-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formatting</span></span>
<span id="cb7-30">black_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>)</span>
<span id="cb7-31">red_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>)</span>
<span id="cb7-32">plt.legend(handles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[black_patch, red_patch])</span>
<span id="cb7-33">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max Daily Temperatures Recorded in the Austin-Bergstrom Airport Area"</span>)</span>
<span id="cb7-34">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb7-35"></span>
<span id="cb7-36">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So that’s pretty cool. Most of 2024 has tracked 2023 for daily high temperatures. But not July. July has been weirdly cooler than last year. Or last year was weirdly hotter than normal.</p>
<p>Actually, let’s see if we can tease that out. Let’s grab the past 10 years.</p>
<div id="45f5264e" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary of year:DataFrame</span></span>
<span id="cb8-4">year_dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2014</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>):</span>
<span id="cb8-6">    year_dfs[year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_df(get_max_temps(year))</span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Be a nice internet citizen and wait between requests</span></span>
<span id="cb8-8">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust pre-2024 dates to match the 2024 index</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is how we shift the graph to overlap</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you don't do this, 2024 comes after, not on top of, 2023</span></span>
<span id="cb8-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> year_dfs.values():</span>
<span id="cb8-14">    df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.replace(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>))</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb8-17">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> year, df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> year_dfs.items():</span>
<span id="cb8-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>:</span>
<span id="cb8-20">         df.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gold"</span>)</span>
<span id="cb8-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-22">        df.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb8-23">df_2024.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sett x-axis to display month labels</span></span>
<span id="cb8-26">ax.set_xticks(</span>
<span id="cb8-27">    pd.date_range(</span>
<span id="cb8-28">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb8-29">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb8-30">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span></span>
<span id="cb8-31">    )</span>
<span id="cb8-32">)</span>
<span id="cb8-33">ax.set_xticklabels(</span>
<span id="cb8-34">    pd.date_range(</span>
<span id="cb8-35">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb8-36">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb8-37">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span>,</span>
<span id="cb8-38">    ).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%B'</span>)</span>
<span id="cb8-39">)</span>
<span id="cb8-40"></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formatting</span></span>
<span id="cb8-42">ax.set_title(</span>
<span id="cb8-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max Daily Temperatures Recorded in the Austin-Bergstrom Airport Area 2014 - 2024"</span></span>
<span id="cb8-44">)</span>
<span id="cb8-45">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb8-46">gold_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gold"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>)</span>
<span id="cb8-47">red_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>)</span>
<span id="cb8-48">plt.legend(handles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gold_patch, red_patch])</span>
<span id="cb8-49"></span>
<span id="cb8-50">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Seems like Austin’s 2023 summer was on the hotter side, and so far the 2024 summer is on the cooler side.</p>
<p>And was I correct that we haven’t cracked 100 yet this year?</p>
<div id="f253dff4" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_2024[df_2024[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_temp"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>            max_temp
date                
2024-07-02     100.0
2024-07-05     100.0</code></pre>
</div>
</div>
<p>Computers!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-07-30-austin-hot-or-not/</guid>
  <pubDate>Tue, 30 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/austin-temperatures-2014-2024.png" medium="image" type="image/png" height="94" width="144"/>
</item>
<item>
  <title>How Did Skannerz Work?</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/</link>
  <description><![CDATA[ 





<p>This post is a redux from a now-deleted social media thread. It felt too important to let bit rot.</p>
<p>If you’re a Millennial of a certain age, or perhaps a Baby Boomer who raised Millennials,<sup>1</sup> you might remember the 2001 toy Skannerz by <a href="https://en.wikipedia.org/wiki/Radica_Games">Radica</a>. It was a gotta-catch-em-all game that involved scanning real-world barcodes to collect monsters and objects, and to battle other Skannerz. It was a hand-held gadget toy back when consumer electronics were still weird and fun and we had more products than just iPhone. I had a blue one. It looked like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/skannerz-zendra.jpg" class="img-fluid figure-img"></p>
<figcaption>A Zendra Skanner</figcaption>
</figure>
</div>
<p>The toy/game had an A+ premise: alien monsters transported down to earth and decided to hide inside of the barcodes on products all around your home (or, more annoyingly to your parents, all around the grocery store). Your job was to scan every barcode you could get your hands on, fight and capture the alien monsters, and then fight the monsters your friends collected. And to make the weirdest Pokémon ripoff complete: the Skannerz came in three colors — red, blue, and green — that could only collect monsters of their associated “tribes”. This really good commercial explains:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/eXt6YihygTw" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Because I was already a major dork at 11 years old, I was intrigued by how the device worked. How did it go from barcode to monster? There was no way it was talking to a server (although I did imagine the world’s greatest PHPMyAdmin at the time). I guessed that it had every possible barcode referenced internally. But that’s not quite correct. It was a little more clever than that.</p>
<p>But frirst, a quick primer on barcodes. There are many variations; this is a <a href="https://en.wikipedia.org/wiki/Universal_Product_Code">UPC Version A</a> — very common in the United States. It has a basic specification: that first digit way to the left is the product type (sometimes called a number system). The next five digits identify the manufacturer. The next five identify the product. And at the end is a checksum digit. The details of how to implement the spec aren’t all too important for our Skannerz exploration.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/barcode.png" class="img-fluid figure-img"></p>
<figcaption>An example UPC - A bar code</figcaption>
</figure>
</div>
<p>Okay, back to the Skannerz game. As mentioned above, there were 3 different “tribes”, identified by which color scanning device you had. And there were 126 total monsters. So each tribe could capture 42 monsters. If you wanted to catch ’em all you needed to buy all three. Business!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/three-skannerz.jpg" class="img-fluid figure-img"></p>
<figcaption>The three original Skannerz: Ujalu (red), Pataak (green), and Zendra (blue)</figcaption>
</figure>
</div>
<p>You could also collect non-monster items from barcodes. And some barcodes healed your injured monsters. Again, these toys had no wireless communication (it was 2001!) so all of the logic for item or monster identification was baked right into the device. But how?</p>
<p>The Skannerz <a href="https://patentimages.storage.googleapis.com/05/ca/8a/0c25f67d6c06a3/US20080139309A1.pdf">patent</a> is conveniently revealing!<sup>2</sup> The device only cares about the “product” section (denoted below as 1315). If the first digit is 0-5, you’ve scanned a monster. 6-9, you’ve scanned an item. Digits 3, 4, and 5 identify the item/monster.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/skannerz-barcode-reference.png" class="img-fluid figure-img"></p>
<figcaption>FIG. 13 from the Skannerz patent illustrates one method of correlating a UPC code to a feature of the game.</figcaption>
</figure>
</div>
<p>If the first digit in the barcode’s product code is 0 - 5, we’re in Monster Mode.</p>
<p>We’ve got 1000 possible values (000-999 across digits 3, 4, and 5 in our product code) to identify 126 monsters. The patent goes on to explain how the magic of division solves this problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1000%7D%7B126%7D%20=%207.94%0A"></p>
<p>And there was much rejoicing.</p>
<p>The range of numbers from 000 to 007 correspond to the first monster in Tribe 1, 008 to 015 correspond to the first monster in Tribe 2, and so on.</p>
<p>The patent then goes on to address the fact that 126 doesn’t divide well into 1000, and that 7.94 is not an integer. We only follow this eight-stepping until we get through the 124th monster, and then:</p>
<blockquote class="blockquote">
<p>Because 1,000 is not a multiple of 126, the last 2 monsters each have a range of 4 numbers. In other words, the last monster in Tribe 2 would correspond to the range of numbers 992 through 995 and the last monster in Tribe 3 would correspond to the range of numbers 996 through 999.</p>
</blockquote>
<p>Now, if the first digit in the barcode’s produt code is 6 - 9, we’re in Item Mode.</p>
<p>Similarly, there were 24 items in the game + 1 for healing. So 25 items. Again, we’ve got 1000 values to work with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1000%7D%7B25%7D%20=%2040%0A"></p>
<p>So a range of 40 numbers can be used to define each item. Item 1 corresponds to the range of numbers from 000 through 039, Item 2 corresponds to the range of numbers from 040 through 079, and so on. And great news: 40 <em>is</em> an integer.</p>
<p>Quick aside: the UPC Version A codec above is the the only format outlined in the Skannerz patent. But the patent also burries this little nugget:</p>
<blockquote class="blockquote">
<p>Many other encoding techniques are within the scope of the present invention. In some such embodiments, Global Location Number (“GLN’) codes and similar codes used, e.g.&nbsp;for identifying parcels, are assigned secondary meanings which correspond with elements of a game. In still other embodiments, codes used for entirely different purposes, for example, audio or video data compression, data encryption, etc., are assigned secondary meanings which correspond with elements of a game.</p>
</blockquote>
<p>What does that mean? It literally says nothing else about what invention is being claimed there, but good on the Radica lawyers for planting a flag I guess? Maybe the <a href="https://skannerz.fandom.com/wiki/Skannerz_Commander">Skannerz Commander</a>, which I never had, rolled its own encryption algorithm?</p>
<p>But that’s really it! If you knew this encoding scheme, and had access to a printer, you could collect all the monsters and items pretty quickly. Anyone else remember <a href="https://web.archive.org/web/20010201163900/http://www.barcodemill.com/">Barcode Mill</a>? Of course people knew; there were unofficial barcode books you could buy to help you complete your collection. But where’s the fun in that?</p>
<p>Thanks for indulging my dork nostalgia. I look forward to the Greta Gerwig adaptation.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Generational cohort discourse is stupid.↩︎</p></li>
<li id="fn2"><p>You don’t need to be a lawyer to read a patent. They can be very interesting! This one had cartoon drawings!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/</guid>
  <pubDate>Tue, 23 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/three-skannerz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Amused Entirely To Death</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/</link>
  <description><![CDATA[ 





<p>At this point there’s nothing novel in pointing out that news and politics has devolved into an entertainment competition. But I can’t become so numb to let last week’s Republican National Convention go without comment.</p>
<p>I won’t get into detailed summaries or link to videos. The Republican National Convention, unsurprisingly, was rife with jingoism, xenophobia, and hate. But what stood out was a primetime performance on the final night:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/hulk-hogan-trump.jpg" class="img-fluid figure-img"></p>
<figcaption>Hulk Hogan ripping his shirt off during the 2024 Republican National Convention</figcaption>
</figure>
</div>
<p>If you missed the social media frenzy, the short version is Hulk Hogan took the stage during a primetime speech to say, among many pernicious things:</p>
<blockquote class="blockquote">
<p>But what happened last week, when they took a shot at my hero, and they tried to kill the next president of the United States, enough was enough! And I said, ‘Let Trump-A-Mania run wild brother! Let Trump-A-Mania rule again!’</p>
</blockquote>
<p>And then he ripped off his shirt and the stadium of suited leaders of the Republican party lost their minds in cheers and applause. Never mind that pundits and Republican leaders assured us that — after the attempted assassination of Donald Trump days prior — this convention would be a message of national unity. Never mind whoever the <em>they</em> are that he’s talking about. Hulk Hogan gave the people what they wanted: a viral-worthy performance that makes you feel something when you press share.</p>
<p>This moment exemplified a broader issue that has been gradually intensifying. The disgraced former president, after all, is a reality TV character, epitomizing the entertainment-driven nature of modern politics. To note that is not to minimize the harm he has inflicted and will inflict if given another chance. But it’s an apt time to highlight a recurring misdiagnosis of modern Conservative power.</p>
<section id="our-misdiagnosis-of-conservative-power" class="level3">
<h3 class="anchored" data-anchor-id="our-misdiagnosis-of-conservative-power">Our Misdiagnosis of Conservative Power</h3>
<p>As astute online big-brains, we’re frequently high-fiving ourselves for naming the Right’s methods and tactics as Orwellian (despite the fact that most people haven’t actually read <em>Nineteen Eighty-Four</em>). We get those small hits of dopamine by labeling our eroding rights as such. But by and large, power-building of the Trump era isn’t Orwellian at all. Just as Donald Trump himself isn’t Machiavellian at all (a core tenet from <em>The Prince</em> is a firm warning against flatterers — Donald Trump could never). Yes, the Right does deploy assaults that could be lifted directly from Orwell or Bradbury — look no further than the book-banning crusades or the “do not believe what you see” lies from the press briefing rooms. But when evaluating how we got here and why we’re stuck here, it’s instructive to look to Neil Postman’s observations in <a href="https://en.wikipedia.org/wiki/Amusing_Ourselves_to_Death" target="_blank">Amusing Ourselves to Death</a>:</p>
<blockquote class="blockquote">
<p>But we had forgotten that alongside Orwell’s dark vision, there was another - slightly older, slightly less well known, equally chilling: Aldous Huxley’s <em>Brave New World</em>. Contrary to common belief even among the educated, Huxley and Orwell did not prophesy the same thing. Orwell warns that we will be overcome by an externally imposed oppression. But in Huxley’s vision, no Big Brother is required to deprive people of their autonomy, maturity and history. As he saw it, people will come to love their oppression, to adore the technologies that undo their capacities to think. What Orwell feared were those who would ban books. What Huxley feared was that there would be no reason to ban a book, for there would be no one who wanted to read one. Orwell feared those who would deprive us of information. <strong>Huxley feared those who would give us so much that we would be reduced to passivity and egoism</strong>. Orwell feared that the truth would be concealed from us. <strong>Huxley feared the truth would be drowned in a sea of irrelevance.</strong> Orwell feared we would become a captive culture. <strong>Huxley feared we would become a trivial culture</strong>, preoccupied with some equivalent of the feelies, the orgy porgy, and the centrifugal bumblepuppy. As Huxley remarked in <em>Brave New World Revisited</em>, the civil libertarians and rationalists who are ever on the alert to oppose tyranny “failed to take into account man’s almost infinite appetite for distractions.” In <em>1984</em>, Orwell added, people are controlled by inflicting pain. <strong>In <em>Brave New World</em>, they are controlled by inflicting pleasure.</strong> In short, Orwell feared that what we fear will ruin us. Huxley feared that what we desire will ruin us.</p>
</blockquote>
<p>I’m not particularly interested in arguing that “we’re living in a dystopia, actually”. Despite our collective addiction to devices that incessantly tell us that the world is terrible, I still believe things are getting better over time. And I largely reject the, “no one has had it as bad as we have it” notions from my generational cohort. But we can only pursue the long arc of progress if we continue to care enough to do so. If I was architecting a <strong>#resist</strong> movement of 2024, it would be to resist the trivialization of political power.</p>
<p>It’s important to reflect on Huxley’s and Postman’s ideas, even if it makes us uncomfortable. So many people today claim they’ve stopped consuming news altogether, but often they simply switch to more entertaining sources that don’t feel like homework. Consider this: how many of your friends can name a single Supreme Court justice without hints? You should start asking! This exercise, which I’ve conducted socially, reveals fascinating results! These observations aren’t about intelligence — they’re about priorities.</p>
<p>Again, I don’t think I’m pointing out anything novel here. Pundits analyze political events in terms of “energy” and base success on Nielsen viewership metrics. Matt Gaetz and Ted Cruz both have side gigs as podcast hosts. Marjorie Taylor Greene dresses up as Cruella de Vil to scream during the Statue of the Union.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/marjorie-taylor-greene-sotu.jpg" class="img-fluid figure-img"></p>
<figcaption>Marjorie Taylor Greene dressed up as Cruella de Vil to scream during the Statue of the Union</figcaption>
</figure>
</div>
<p>It’s all incredibly stupid. And it’s helpful to have an appropriate label for what’s been happening for a long time.</p>
<p>So, when Hulk Hogan took to the stage to frivolously transport the Right’s power-holders back to the 1980s while ripping off his shirt, exalting “Trump-A-Mania” (aptly named), it couldn’t be more clear that ambient Conservative power-building is Huxleyan, not Orwellian. We are amusing ourselves entirely to death.</p>
<p>Seems bad.</p>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/</guid>
  <pubDate>Sat, 20 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/amused-entirely-to-death.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>BIDEN: Binary Inference Dictionaries for Electoral NLP</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/</link>
  <description><![CDATA[ 





<p><img src="https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/BIDEN.png" class="img-fluid"></p>
<p>This post is adapted from a Jupyter <a href="https://github.com/hodgesmr/biden_nlp">Notebook found on GitHub</a>.</p>
<p><strong>BIDEN</strong>: <strong>B</strong>inary <strong>I</strong>nference <strong>D</strong>ictionaries for <strong>E</strong>lectoral <strong>N</strong>LP demonstrates a compression-based binary classification technique that is fast at both training and inference on common CPU hardware in Python. It is largely built on the strategies presented by <a href="https://github.com/cyrilou242/ftcc">FTCC</a>, which in turn, was a reaction to <a href="https://github.com/bazingagin/npc_gzip">Low-Resource Text Classification: A Parameter-Free Classification Method with Compressors</a> (the gzip method). Like FTCC, <strong>BIDEN</strong> is built atop of <a href="https://facebook.github.io/zstd/">Zstandard</a> (Zstd), which leverages <a href="https://facebook.github.io/zstd/#small-data">dictionary compression</a>. Zstd dictionary compression seeds a compressor with sample data, so that it can efficiently compress <em>small data</em> (~1 KB) of similar composition. Seeding the compressor dictionaries acts as our “training” method for the model.</p>
<p>The <strong>BIDEN</strong> model was trained on the <a href="https://electionemails2020.org">ElectionEmails 2020</a> data set — a database of over 900,000 political campaign emails from the 2020 US election cycle. <strong>In compliance with the data set’s <a href="https://electionemails2020.org/downloads/corpus_documentation_v1.0.pdf">terms</a>, the training data is NOT provided with this repository.</strong> If you would like to train the <strong>BIDEN</strong> model yourself, you can <a href="https://docs.google.com/forms/d/e/1FAIpQLSdcgjZo-D1nNON4d90H2j0VLtTdxiHK6Y8HPJSpdRu4w5YILw/viewform">request a copy of the data for free</a>. The <strong>BIDEN</strong> model was trained on <code>corpus_v1.0</code>.</p>
<section id="training-and-classification" class="level3">
<h3 class="anchored" data-anchor-id="training-and-classification">Training and Classification</h3>
<p>Both training and inference for <strong>BIDEN</strong> are fast and simple.</p>
<p>The model consists of two Zstd compressors, one optimized for Democratic emails and one optimzed for Republican emails. Each is built upon a compression dictionary. Each compression dictionary is seeded with training sample emails from its respective party.</p>
<p>Classification (inference) is achieved by compressing a test sample with both the Democratic and Republican compressors. Whichever compressor achieves a higher compression ratio on the test sample text is considered the inferred label.</p>
</section>
<section id="cleaning-the-training-data" class="level3">
<h3 class="anchored" data-anchor-id="cleaning-the-training-data">Cleaning the Training Data</h3>
<p>The ElectionEmails 2020 data set is a CSV. The model consideres <a href="https://electionemails2020.org/downloads/corpus_documentation_v1.0.pdf">two columns</a>: <code>party_affiliation</code> and <code>body_text</code>. <strong>BIDEN</strong> is only concerned with binary classification for Democratic and Republican labeling.</p>
<p>The two requirements defined in <code>requirements.txt</code> are <a href="https://pypi.org/project/pandas/">Pandas</a> and <a href="https://pypi.org/project/zstandard/">zstandard</a>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb1-1">pandas==2.1.*</span>
<span id="cb1-2">zstandard==0.21.* </span></code></pre></div>
<p>Start by reading in the data. Since the model is only working with two columns, drop any record that doesn’t contain both. Also filter the data to only consider Democratic or Republican emails for the binary classificaiton.</p>
<p><strong>Note</strong>: this assumes you have the ElectionEmails 2020 data saved at the relative path <code>data/corpus_v1.0.csv</code>.</p>
<div id="a8127153-8f5a-460c-a5d5-da2fcc7c8d8c" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Enum</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zstandard</span>
<span id="cb2-5"></span>
<span id="cb2-6">fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body_text'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party_affiliation'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb2-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/corpus_v1.0.csv'</span>,</span>
<span id="cb2-13">    sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,</span>
<span id="cb2-14">    usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fields.keys()),</span>
<span id="cb2-15">    dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fields,</span>
<span id="cb2-16">)</span>
<span id="cb2-17"></span>
<span id="cb2-18">df.drop_duplicates(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-19"></span>
<span id="cb2-20">d_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df.party_affiliation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democratic Party"</span>].dropna()</span>
<span id="cb2-21">r_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df.party_affiliation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican Party"</span>].dropna()</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'D Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>D Samples: 127194
R Samples: 36788</code></pre>
</div>
</div>
<p>There are significantly more Democratic samples than Republican samples, so take a random subset of the former.</p>
<div id="54b8fe57-dae5-47dd-af3c-aa7c9d28d853" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">max_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_df.index), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_df.index))</span>
<span id="cb4-2">d_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_df.sample(</span>
<span id="cb4-3">    n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_data,</span>
<span id="cb4-4">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb4-5">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7">r_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_df.sample(</span>
<span id="cb4-8">    n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_data,</span>
<span id="cb4-9">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb4-10">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'D Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>D Samples: 36788
R Samples: 36788</code></pre>
</div>
</div>
<p>Now divide the data into training and test subsets, at an 80/20 split.</p>
<div id="7f3c0940-4013-4e03-b361-bdf5886f9954" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">d_train_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb6-2">d_test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_df.drop(d_train_df.index)</span>
<span id="cb6-3"></span>
<span id="cb6-4">r_train_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb6-5">r_test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_df.drop(r_train_df.index)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Democratic Training Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_train_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Democratic Test Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_test_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Republican Training Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_train_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Republican Test Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_test_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Democratic Training Samples: 29430
Democratic Test Samples: 7358
Republican Training Samples: 29430
Republican Test Samples: 7358</code></pre>
</div>
</div>
</section>
<section id="the-biden-model" class="level3">
<h3 class="anchored" data-anchor-id="the-biden-model">The BIDEN model</h3>
<p>The model consistes of two core methods: <code>train()</code> and <code>classify()</code> :</p>
<div id="53a77efa-3809-4bfe-9afb-42ca058943fb" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BIDEN():</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Binary Inference Dictionaries for Electoral NLP (BIDEN)</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class allows you to train a model for classifying political content into</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Democratic or Republican categories based on compression ratios.</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Classification (enum): An enumeration of political classifications (DEMOCRATIC, REPUBLICAN).</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Classification(Enum):</span>
<span id="cb8-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Enumeration of political classifications.</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Attributes:</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            DEMOCRATIC (int): Represents Democratic political content.</span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            REPUBLICAN (int): Represents Republican political content.</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-19">        DEMOCRATIC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-20">        REPUBLICAN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-21">        </span>
<span id="cb8-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, encoding: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>):</span>
<span id="cb8-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initialize the BIDEN model.</span></span>
<span id="cb8-25"></span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This constructor initializes the BIDEN model with empty compressors.</span></span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            encoding (str, optional): The character encoding of the input data. Defaults to 'utf-8'.</span></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            </span></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            BIDEN: An instance of the BIDEN class.</span></span>
<span id="cb8-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoding</span>
<span id="cb8-37"></span>
<span id="cb8-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb8-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> trained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb8-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Check if the BIDEN model is trained.</span></span>
<span id="cb8-42"></span>
<span id="cb8-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            bool: True if both Democratic and Republican compressors are trained, False otherwise.</span></span>
<span id="cb8-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r_compressor)</span>
<span id="cb8-47"></span>
<span id="cb8-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb8-49">              d_training_data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb8-50">              r_training_data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb8-51">              compression_level: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb8-52">             ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb8-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Train the BIDEN model.</span></span>
<span id="cb8-55"></span>
<span id="cb8-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb8-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            d_training_data (str): Democratic training data.</span></span>
<span id="cb8-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            r_training_data (str): Republican training data.</span></span>
<span id="cb8-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            compression_level (int, optional): The compression level. Defaults to 15.</span></span>
<span id="cb8-60"></span>
<span id="cb8-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            bool: True if training is successful, False otherwise.</span></span>
<span id="cb8-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span>        </span>
<span id="cb8-64">        d_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressionDict(</span>
<span id="cb8-65">            d_training_data.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding),</span>
<span id="cb8-66">            dict_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zstandard.DICT_TYPE_RAWCONTENT</span>
<span id="cb8-67">        )</span>
<span id="cb8-68">        d_dictionary.precompute_compress(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compression_level)</span>
<span id="cb8-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressor(dict_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d_dictionary)</span>
<span id="cb8-70"></span>
<span id="cb8-71">        r_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressionDict(</span>
<span id="cb8-72">            r_training_data.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding),</span>
<span id="cb8-73">            dict_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zstandard.DICT_TYPE_RAWCONTENT</span>
<span id="cb8-74">        )</span>
<span id="cb8-75">        r_dictionary.precompute_compress(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compression_level)</span>
<span id="cb8-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressor(dict_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r_dictionary)</span>
<span id="cb8-77"></span>
<span id="cb8-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.trained</span>
<span id="cb8-79"></span>
<span id="cb8-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sample: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Classification:</span>
<span id="cb8-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Classify a sample based on compression ratios.</span></span>
<span id="cb8-83"></span>
<span id="cb8-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb8-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            sample (str): The sample text to classify.</span></span>
<span id="cb8-86"></span>
<span id="cb8-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Classification: The classification (DEMOCRATIC or REPUBLICAN).</span></span>
<span id="cb8-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb8-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Raises:</span></span>
<span id="cb8-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            RuntimeError: If the model is not trained.</span></span>
<span id="cb8-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-93">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.trained:</span>
<span id="cb8-94">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Attempted to classify with a model that is not yet trained."</span>)</span>
<span id="cb8-95">        </span>
<span id="cb8-96">        encoded_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding)</span>
<span id="cb8-97">        original_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(encoded_sample)</span>
<span id="cb8-98">        d_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor.compress(encoded_sample))</span>
<span id="cb8-99">        d_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> original_length</span>
<span id="cb8-100">        r_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r_compressor.compress(encoded_sample))</span>
<span id="cb8-101">        r_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> original_length</span>
<span id="cb8-102"></span>
<span id="cb8-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> d_ratio:</span>
<span id="cb8-104">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> BIDEN.Classification.REPUBLICAN</span>
<span id="cb8-105"></span>
<span id="cb8-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> BIDEN.Classification.DEMOCRATIC</span></code></pre></div>
</div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>To train the model, we pass the entirety of the Democratic and Republican texts to construct <a href="https://python-zstandard.readthedocs.io/en/latest/dictionaries.html">prefix dictionaries</a>. Prefix dictionaries allow compression operations to reference raw data within the <a href="https://python-zstandard.readthedocs.io/en/latest/concepts.html#dictionaries">dictionary</a>. Once we have two compressors instantiated and pre-seeded with our training data, the model is trained. This is <em>fast</em>. On my 2.6 GHz 6-Core Intel Core i7, this takes roughly <strong>30 seconds</strong>.</p>
<div id="cfa1300f-0ca7-4030-942f-7ea780e6db4e" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">d_combined_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(d_train_df.body_text)</span>
<span id="cb9-2">r_combined_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(r_train_df.body_text)</span>
<span id="cb9-3"></span>
<span id="cb9-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BIDEN()</span>
<span id="cb9-5">model.train(d_combined_text, r_combined_text)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="classification" class="level3">
<h3 class="anchored" data-anchor-id="classification">Classification</h3>
<p>Now, we can classify our test data. We could loop through each set, but let’s combine and shuffle them together first, and loop in one go. We’ll also convert the party affiliation strings <code>'Democratic Party'</code>, and <code>'Republican Party'</code> into our model’s enum values:</p>
<div id="8179375a-26b8-46f9-8de0-8f44eef4b141" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">combined_test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(</span>
<span id="cb11-2">    [d_test_df, r_test_df],</span>
<span id="cb11-3">    ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-4">    sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-5">).sample(</span>
<span id="cb11-6">    frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb11-7">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility</span></span>
<span id="cb11-8">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10">combined_test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party_affiliation'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party_affiliation'</span>].replace(</span>
<span id="cb11-11">    to_replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Democratic Party'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Republican Party'</span>],</span>
<span id="cb11-12">    value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[BIDEN.Classification.DEMOCRATIC, BIDEN.Classification.REPUBLICAN]</span>
<span id="cb11-13">)</span>
<span id="cb11-14"></span>
<span id="cb11-15">num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> combined_test_df.itertuples():</span>
<span id="cb11-17">    actual_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.party_affiliation</span>
<span id="cb11-18">    inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.classify(row.body_text)</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> actual_label:</span>
<span id="cb11-21">        num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Classification Success Rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>((num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(combined_test_df.index))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classification Success Rate: 98.9%</code></pre>
</div>
</div>
<p>98.9% is a <em>shockingly</em> high success rate for such a simple classification method!</p>
</section>
<section id="another-email-data-set" class="level3">
<h3 class="anchored" data-anchor-id="another-email-data-set">Another Email Data Set</h3>
<p>Let’s see how it performs with emails from another data set. <a href="https://www.thescoop.org">Derek Willis</a> maintains a <a href="https://datasette.io/">Datasette</a> of <a href="https://political-emails.herokuapp.com/emails">over 150,000 campaign emails</a>. Let’s grab 100 samples of each party from that collection, and see how they perform:</p>
<div id="95f0a04c-a454-44e9-b189-c45a9d17cb0c" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://political-emails.herokuapp.com/emails.csv?sql='</span></span>
<span id="cb13-2">d_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select body, party from emails where party = "D" limit 100;'</span></span>
<span id="cb13-3">r_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select body, party from emails where party = "R" limit 100;'</span></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%2C'</span>,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'='</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%3D'</span>,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%22'</span>,</span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%3B'</span>,</span>
<span id="cb13-11">}</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> symbol, code <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.items():</span>
<span id="cb13-14">    d_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_query.replace(symbol, code)</span>
<span id="cb13-15">    r_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_query.replace(symbol, code)</span>
<span id="cb13-16"></span>
<span id="cb13-17">d_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d_query</span>
<span id="cb13-18">r_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r_query</span>
<span id="cb13-19"></span>
<span id="cb13-20">d_dw_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(d_url)</span>
<span id="cb13-21">r_dw_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(r_url)</span>
<span id="cb13-22"></span>
<span id="cb13-23">combined_dw_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(</span>
<span id="cb13-24">    [d_dw_df, r_dw_df],</span>
<span id="cb13-25">    ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb13-26">    sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-27">).sample(</span>
<span id="cb13-28">    frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb13-29">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility</span></span>
<span id="cb13-30">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-31"></span>
<span id="cb13-32">combined_dw_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_dw_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party'</span>].replace(</span>
<span id="cb13-33">    to_replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R'</span>],</span>
<span id="cb13-34">    value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[BIDEN.Classification.DEMOCRATIC, BIDEN.Classification.REPUBLICAN]</span>
<span id="cb13-35">)</span>
<span id="cb13-36"></span>
<span id="cb13-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DW Sample:'</span>)</span>
<span id="cb13-38">combined_dw_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>DW Sample:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">body</th>
<th data-quarto-table-cell-role="th">party</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Hey Peter!!! You know our campaign is made by,...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>https://www.jahanahayes.com/ [https://www.jaha...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Hi there, it’s storytime: I developed a keen n...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>We’re contacting a select group of patriots fo...</td>
<td>Classification.REPUBLICAN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Peter – You need to watch this. CLICK HERE OR ...</td>
<td>Classification.REPUBLICAN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>Peter, you may have seen me asking for your ol...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>Do you want an Official Mugshot Mug? (24-hour ...</td>
<td>Classification.REPUBLICAN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">7</td>
<td>https://secure.actblue.com/donate/cdp-footer?r...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">8</td>
<td>[ https://act.katieporter.com/go/14559?t=1001&amp;...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">9</td>
<td>I hope I made you proud fighting for you at th...</td>
<td>Classification.REPUBLICAN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="e8cc55d0-fba3-4a6a-ad2f-5e5db9da3016" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> combined_dw_df.itertuples():</span>
<span id="cb15-3">    actual_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.party</span>
<span id="cb15-4">    inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.classify(row.body)</span>
<span id="cb15-5"></span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> actual_label:</span>
<span id="cb15-7">        num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Classification Success Rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>((num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(combined_dw_df.index))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classification Success Rate: 93.0%</code></pre>
</div>
</div>
<p>93% is still <em>quite good</em> considering that all we’re doing is compression!</p>
</section>
<section id="classifying-tweets" class="level3">
<h3 class="anchored" data-anchor-id="classifying-tweets">Classifying Tweets</h3>
<p>The Twitter API is basically useless these days, so I scrolled the timelines of <a href="https://twitter.com/Mike_Pence">Mike Pence</a> (R) and <a href="https://twitter.com/GavinNewsom">Gavin Newsom</a> (D), and copy+paste’d 5 tweets from each. It’s a tiny sample, and not really random, but it’s neat to see how well it does:</p>
<div id="5839d1f1-3b63-41da-a131-d594b0fb2b00" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pence_tweets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1707882018258751915</span></span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today, we applaud the Eighth Circuit's decision, "</span> \</span>
<span id="cb17-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which is an important step in the fight to uphold and protect "</span> \</span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the rights of parents and families in Linn-Mar. A family is the "</span> \</span>
<span id="cb17-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single best unit to protect children, and we must continue to do "</span> \</span>
<span id="cb17-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"everything we can to empower parents over bureaucrats. The strength "</span> \</span>
<span id="cb17-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"of our nation is tied to the strength of our families, and we will "</span> \</span>
<span id="cb17-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not stand idly by as the Radical Left attempts to indoctrinate our "</span> \</span>
<span id="cb17-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"children behind parents’ backs."</span>,</span>
<span id="cb17-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1707472823269392643</span></span>
<span id="cb17-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The cause of Life is the calling of our time "</span> \</span>
<span id="cb17-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and I couldn’t be more proud to have played a role in the administration "</span> \</span>
<span id="cb17-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that appointed three of the justices that overturned Roe v. Wade and "</span> \</span>
<span id="cb17-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"returned the question of abortion to the states and the American people."</span>,</span>
<span id="cb17-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republicans are facing a Time for Choosing. "</span> \</span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1707241587460186214</span></span>
<span id="cb17-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We have to choose whether or not we’re going to stay on the path "</span> \</span>
<span id="cb17-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that has defined our movement since the days of Ronald Reagan and "</span> \</span>
<span id="cb17-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"through the Trump-Pence years or whether we’re going to follow "</span> \</span>
<span id="cb17-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the siren song of populism unmoored to Conservative principles."</span>,</span>
<span id="cb17-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1704132623617122719</span></span>
<span id="cb17-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am for working Americans and free enterprise. These businesses "</span> \</span>
<span id="cb17-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"make their decisions, but at the end the of the day these businesses "</span> \</span>
<span id="cb17-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"are responding to the heavy hand of the green new deal agenda of "</span> \</span>
<span id="cb17-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe Biden and the Democrats in Washington, DC."</span>,</span>
<span id="cb17-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1703887286641873137</span></span>
<span id="cb17-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We were the first country to sanction Chinese leaders for building "</span> \</span>
<span id="cb17-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration camps in Xinjiang and for undermining democracy in Hong Kong. "</span> \</span>
<span id="cb17-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"And we stood up to years of trade abuses, and imposed historic tariffs "</span> \</span>
<span id="cb17-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to bring China to the negotiating table."</span></span>
<span id="cb17-32">]</span>
<span id="cb17-33"></span>
<span id="cb17-34">[model.classify(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pence_tweets]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[&lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;]</code></pre>
</div>
</div>
<div id="9d56a846-ff42-4744-ad85-98842226edfa" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">newsom_tweets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1700615276667294035</span></span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When people ask why I am introducing a Constitutional Amendment "</span> \</span>
<span id="cb19-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"on gun safety this is why. Not only has Congress stalled for YEARS on passing "</span> \</span>
<span id="cb19-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"common sense reforms -- judges across the country are tearing down laws that "</span> \</span>
<span id="cb19-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Americans overwhelmingly support. Laws that keep us SAFE and keep guns out of "</span> \</span>
<span id="cb19-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the hands of dangerous criminals. We have to push back"</span>,</span>
<span id="cb19-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # https://twitter.com/GavinNewsom/status/1689743766733877248</span></span>
<span id="cb19-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"California will be sending search and rescue "</span> \</span>
<span id="cb19-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teams to assist in Hawaii's recovery efforts. The wildfires and "</span> \</span>
<span id="cb19-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devastation that Maui is experiencing is all too familiar and all "</span> \</span>
<span id="cb19-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"too horrifying. We stand at the ready to aid Hawaii in its time of need."</span>,</span>
<span id="cb19-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1679579172690329601</span></span>
<span id="cb19-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A school board in Temecula decided to reject a "</span> \</span>
<span id="cb19-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textbook because it mentioned Harvey Milk. CA is stepping in. "</span> \</span>
<span id="cb19-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We’re going to purchase the book for these students—the same "</span> \</span>
<span id="cb19-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one that hundreds of thousands of kids are already using. "</span> \</span>
<span id="cb19-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"If these extremist school board members won’t do their job, "</span> \</span>
<span id="cb19-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"we will — and fine them for their incompetence."</span>,</span>
<span id="cb19-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1650634702271942656</span></span>
<span id="cb19-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North Dakota GOP have decided to force women to give birth. Even victims of rape. "</span> \</span>
<span id="cb19-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Meanwhile, they voted against providing school meals because child hunger isn't "</span> \</span>
<span id="cb19-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">the responsibility of the state.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> \</span>
<span id="cb19-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mandating birth is state responsibility. Helping feed those kids is not. Got it."</span>,</span>
<span id="cb19-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1643745476662132737</span></span>
<span id="cb19-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Met with some librarians today while in Florida. "</span> \</span>
<span id="cb19-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"They shared with me the rich, diverse background of the "</span> \</span>
<span id="cb19-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"town and what's at stake if we ban our kids from learning our real history."</span></span>
<span id="cb19-29">]</span>
<span id="cb19-30"></span>
<span id="cb19-31">[model.classify(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> newsom_tweets]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>[&lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;]</code></pre>
</div>
</div>
<p>Neat! This small set classified 90% correctly. Further exploration with more robust Twitter data sets is warranted.</p>
</section>
<section id="closing-thoughts" class="level3">
<h3 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h3>
<p>Even after seeing the results, I still have a hard time believing that this works so well! It feels like it <em>shouldn’t</em> work at all. But, zooming out, there are a lot of relevant factors to consider. First, there just aren’t that many people writing campaign materials. It makes sense that word-choice and writing style would exhibit predictible patterns. Second, campaign emails have been A/B tested into oblivion, so there’s a systematic process that cranks out similar-sounding copy. Third, the recipients of these emails have largely self-sorted. This likely bolsters the expected structure and copy uniquely for each label. Ultimately, compression algorithms optimize on patterns and predictibility. What this shows us is that the two parties are uniquely <em>predictible</em> in their written communications.</p>
<p>The idea of classification by compression is not new; Russell and Norvig wrote about it in 1995 in the venerable <a href="https://aima.cs.berkeley.edu/3rd-ed/">Artificial Intelligence: A Modern Approach</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/aiama.png" class="img-fluid figure-img"></p>
<figcaption>Classification by data compression</figcaption>
</figure>
</div>
<p>More recently, the <a href="https://aclanthology.org/2023.findings-acl.426/">“gzip beats BERT” paper</a> got a lot of attention. What the <strong>BIDEN</strong> model demonstrates is that this technique is effective and likely generalizable on modern partisan texts.</p>
<p>It’s worth articulating again how fast and simple this method is. No GPUs. No Neural Networks. No N-grams. No transformers. No kNN.</p>
<p>I think that’s pretty cool!</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2023, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of BIDEN: Binary Inference Dictionaries for Electoral NLP nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/</guid>
  <pubDate>Sun, 01 Oct 2023 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/BIDEN.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Exploring the Lambda Calculus with Python</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/</link>
  <description><![CDATA[ 





<p><img src="https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/lambda-calculus-python.jpeg" class="img-fluid"></p>
<p>This post is adapted from a Jupyter <a href="https://github.com/hodgesmr/python_lambda_calculus">Notebook found on GitHub</a>.</p>
<p>This post explores some basic ideas of the Lambda Calculus, and how to use it to implement a computation system with it. We will define numbers and operators from scratch, and use that to implement the <code>square_sum</code> function.</p>
<p>If you’re new to the Lambda Calculus, or functional programming in general, you may wish to start with some of these resources:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=pkCLMl0e_0k">David Beazley’s Lambda Calculus from the Ground Up - PyCon 2019</a>
<ul>
<li>If you’re someone who learns well by watching and listening, I highly recommend that you watch this talk. A significant portion of the concepts below come from watching this talk more than once.</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=AqNDk_UJW4k">Ben Eater’s Making a computer Turing complete</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda Calculus | Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Currying">Currying | Wikipedia</a></li>
</ul>
<p>This post assumes you are fairly familiar with Python and Python’s <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions">lambda expressions</a>.</p>
<section id="rules-of-our-system" class="level3">
<h3 class="anchored" data-anchor-id="rules-of-our-system">Rules of Our System</h3>
<p>The Lambda Calculus asserts that any computational system can be implemented with a set of three simple rules: * You can define variables * You can define single-argument functions * You can call single-argument functions</p>
<p>That’s it. <strong>No numbers. No operators. No control flow. No data structures.</strong></p>
<p>I find it fascinating that with these very minimal concepts, the Lambda Calculus asserts that we can create a fully functional computer! This is, of course, a very minimal explanation of the rules of the Lambda Calculus, and I invite you to consult the references above for more information and formal definitions!</p>
</section>
<section id="the-challenge" class="level3">
<h3 class="anchored" data-anchor-id="the-challenge">The Challenge</h3>
<p>Using the rules described above, we want to create a system that can calculate the square-sum of any inputs. Again, we <em>only</em> have single-argument functions. That means we have no integers, no addition, and no multiplication. We’re going to have to create those using nothing but single-argument functions that accept single-argument functions as input and can only return single-argument functions.</p>
<p>For reference, consider the <code>square_sum</code> function, that may be written in Python as:</p>
<div id="34049a45" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_sum(a, b):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b)</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">square_sum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>29</code></pre>
</div>
</div>
<section id="currying" class="level4">
<h4 class="anchored" data-anchor-id="currying">Currying</h4>
<p>As previously mentioned, our computation system requires that we can only create functions and those functions must accept one and only one argument. This may seem like a limiting requirement, but let’s take a look at what we can do with the idea of <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> — a method for transforming multi-argument functions into a chain of single-argument functions. This allows us to re-write our Python implementation as:</p>
<div id="37bba6c1" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_sum(a):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):</span>
<span id="cb3-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b)</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7">square_sum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>29</code></pre>
</div>
</div>
<p>In our curried version above, <code>square_sum</code> accepts the first argument, <code>a</code> and returns a function that accepts the second argument, <code>b</code>. We can then call that returned <code>inner</code> function to complete our calculation. Currying is a fundamental strategy for computation in the Lambda Calculus.</p>
</section>
</section>
<section id="our-basic-building-block" class="level3">
<h3 class="anchored" data-anchor-id="our-basic-building-block">Our Basic Building Block</h3>
<p>Unless you’re already familiary with the Lambda Calculus, or you’re a veteran of functional programming, you’re probaby very accustomed to computing by operating on <em>state</em>. You have data structures, or numbers, or bits, and you operate on them and then you persist new data structures, or numbers, or bits.</p>
<p>Our concept of integers is a perfect example. As children, we learned that the concept of <code>3</code> can be represented by holding up three fingers on our hand, and seeing all three of them, and pointing to them. The Lambda Calculus asks us to adjust that concept away from <em>state</em> and towards <em>behavior</em>. Instead of holding up three fingers, what if we held up <em>one finger three times</em>. It may be harder for us see that idea of <code>3</code>, but it is a representation of <code>3</code> nonetheless.</p>
<p>Sit with this idea of behavior representing integers, because behavior will be how we represent <em>everything</em>. And in our system, functions are behavior. Our function could be the act of holding up a finger, pressing a button, or anything else we need it to be.</p>
<p>Let’s use that metaphor of pressing a button. The button press is our behavior, and behaviors are functions. And arguments are functions. And we can only return functions. So, let’s write that:</p>
<div id="8e41ad57" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> button_press(f):</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span></code></pre></div>
</div>
<p>Not much to see here yet. In fact, our system isn’t designed to <em>see</em> anything. It’s designed to do computations within a given set of rules.</p>
<p>We’re designing a system of computation, and we can think about this system like instruction that run on a CPU. But we’re humans, and it’s helpful for us to be able to see the results of our computation in ways that we can understand. So, we’re going to introduce an external system that is <em>not</em> within the Lambda Calculus, but can interface with it. Think of this as a peripheral like a printer. It’s not used to <em>do</em> any of our computation. It can do special things that our CPU can’t do, and it’ll connect to our system as a function, because our system can only work with functions.</p>
<p>Let’s pretend our system has a printer attached that can only print the <code>*</code> character. We’ll interface with it via an <code>emit</code> function.</p>
<p>Here is our not-of-our-system <code>emit</code> function:</p>
<div id="1e7bbf0c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> emit(func):</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> asterisk(x):</span>
<span id="cb6-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">*'</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> func(asterisk)(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
</div>
<p>This is kindof strange. Our external <code>emit</code> function takes in some function and has an inner asterisk-generating function. Let’s hook it up to our <code>button_press</code> function:</p>
<div id="80694f8f" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">emit(button_press)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>'*'</code></pre>
</div>
</div>
<p>What just happened here? We call our <code>emit</code> function (external from our system) by passing in our <code>button_press</code> function (internal to our system). We did it one time, and it yielded a single <code>*</code>. Again, this is just a convenience interface so that we can see what’s going on, and isn’t necessary to do any of our actual computation.</p>
</section>
<section id="numbers" class="level3">
<h3 class="anchored" data-anchor-id="numbers">Numbers</h3>
<p>Above we began to describe how functions, or behaviors, can represent numbers. A single call to <code>button_press</code> yielded some concept of <code>1</code>. What if we didn’t think about it as one call to <code>button_press</code> anymore, but as the idea of <em>one behavior</em>:</p>
<div id="f4b96dcb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ONE(f):</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb9-5"></span>
<span id="cb9-6">emit(ONE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'*'</code></pre>
</div>
</div>
<p>If you’ve made it this far, you’re probably thinking, “Hey, Python has a way to represent single-argument functions, and they’re called <em>lambdas</em>!” Let’s start using that instead of the expanded <code>button_press</code> function:</p>
<div id="f829cb33" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(x)</span>
<span id="cb11-2"></span>
<span id="cb11-3">emit(ONE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'*'</code></pre>
</div>
</div>
<p>Cool. So we know how to represent the concept of <code>1</code> using only single-argument functions. We can represent <code>2</code> by calling our function twice, because in our system numbers are behaviors:</p>
<div id="449512ef" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: f(f(x))</span>
<span id="cb13-2"></span>
<span id="cb13-3">emit(TWO)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>'**'</code></pre>
</div>
</div>
<p>This is all well and good, but we’re not really going to try to implement every single number are we? That wouldn’t make a very good computer. How can we represent all countable numbers?</p>
<p>If you look closely at our definitions above, <code>ONE</code> is a single call to <code>f()</code>, while <code>TWO</code> is <code>f(f())</code>. This means that if we’re at any given number, we can get to the next number by calling <code>f()</code> again. We can define an <code>INCREMENT()</code> function to do just that. I find it helpful to start by looking at this through the expanded Python functions first:</p>
<div id="666a4eef" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ONE(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f is the behavior we want to do</span></span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the curried second argument</span></span>
<span id="cb15-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb15-5"></span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> INCREMENT(n):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is the concept of the number we already have</span></span>
<span id="cb15-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f is the behavior we want to do</span></span>
<span id="cb15-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> h(x):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the curried second argument</span></span>
<span id="cb15-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(n(f)(x))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we call f() again on our n(f)(x)</span></span>
<span id="cb15-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> h</span>
<span id="cb15-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb15-13"></span>
<span id="cb15-14"></span>
<span id="cb15-15">emit(INCREMENT(ONE))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>'**'</code></pre>
</div>
</div>
<p>Spend some time stepping through the above code to understand it. We’re essentially wrapping nested functions as many times as we need to get to the next number. Once you’ve wrapped your head around it, see that we can re-write the above as lambdas:</p>
<div id="306b103b" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(x)</span>
<span id="cb17-2"></span>
<span id="cb17-3">INCREMENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(n(f)(x))</span>
<span id="cb17-4"></span>
<span id="cb17-5">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ONE)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our calculated TWO from ONE</span></span>
<span id="cb17-6"></span>
<span id="cb17-7">emit(TWO)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'**'</code></pre>
</div>
</div>
<p>If we can calculate <code>TWO</code> from <code>ONE</code>, we can calculate <code>THREE</code>:</p>
<div id="45107760" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">THREE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(TWO)</span>
<span id="cb19-2"></span>
<span id="cb19-3">emit(THREE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'***'</code></pre>
</div>
</div>
<p>Pretty neat! We can keep doing this to infinity, either by saving values, or calculating them on the fly! But you may be wondering, what about <code>ZERO</code>? Well, we’ve defined <code>ONE</code> as a single call to any behavior <code>f()</code>, so <code>ZERO</code> would simply be no calls to that behavior:</p>
<div id="394a59ec" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">ZERO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : x</span>
<span id="cb21-2"></span>
<span id="cb21-3">emit(ZERO)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>''</code></pre>
</div>
</div>
<p>See how <code>ZERO</code> doesn’t call <code>f()</code> at all? What’s fun here is that we no longer need to have defined <code>ONE</code>, we can calculate it from <code>ZERO</code>!</p>
<div id="07d3bd76" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ZERO)</span>
<span id="cb23-2"></span>
<span id="cb23-3">emit(ONE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'*'</code></pre>
</div>
</div>
</section>
<section id="operators" class="level3">
<h3 class="anchored" data-anchor-id="operators">Operators</h3>
<p>Now that we know we can represent numbers as function calls, let’s start working on math operators. We’ve already introduced one critical operator, <code>INCREMENT</code>, and we can use that to introduce others. Let’s start with <code>ADD</code>. Addition is can be thought of as incrementing <code>M</code> times on a number <code>N</code>. For example, <code>2 + 3</code> could be described as incrementing 2, three times. Before we attempt to implement that in our system, let’s look again to how we would Curry this in Python:</p>
<div id="a6a9072b" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(a):</span>
<span id="cb25-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):</span>
<span id="cb25-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb25-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb25-5"></span>
<span id="cb25-6">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>5</code></pre>
</div>
</div>
<div id="a0d87735" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ADD(a):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first number, which is always a function</span></span>
<span id="cb27-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our second number, which is always a function</span></span>
<span id="cb27-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b(INCREMENT)(a)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increment a, b times</span></span>
<span id="cb27-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb27-5"></span>
<span id="cb27-6"></span>
<span id="cb27-7">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(TWO)(THREE)</span>
<span id="cb27-8">emit(FIVE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>'*****'</code></pre>
</div>
</div>
<p>Since <em>everything</em> is <em>always</em> a function, our numbers can be used not only as representations of calculations, but also as executors. Here’s our <code>ADD</code> as a lambda:</p>
<div id="0e16c1c3" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b: b(INCREMENT)(a)</span>
<span id="cb29-2"></span>
<span id="cb29-3">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(TWO)(THREE)</span>
<span id="cb29-4">emit(FIVE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>'*****'</code></pre>
</div>
</div>
<p>The last missing operator of our computational system multiplication. Multiplication should feel a lot like nested functions you see often in programming.</p>
<div id="10ea3f1e" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> MULT(a):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first number, which is always a function</span></span>
<span id="cb31-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> outer(b):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our second number, which is always a function</span></span>
<span id="cb31-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function we want to do a*b times</span></span>
<span id="cb31-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b(a(f))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do f, a times, and do that b times</span></span>
<span id="cb31-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb31-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outer</span>
<span id="cb31-7"></span>
<span id="cb31-8">SIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MULT(TWO)(THREE)</span>
<span id="cb31-9">emit(SIX)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>'******'</code></pre>
</div>
</div>
<p>Again, we can represent <code>MULT</code> as a lambda:</p>
<div id="92cfd49f" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">MULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : b(a(f))</span>
<span id="cb33-2"></span>
<span id="cb33-3">SIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MULT(TWO)(THREE)</span>
<span id="cb33-4">emit(SIX)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>'******'</code></pre>
</div>
</div>
</section>
<section id="using-our-computer" class="level3">
<h3 class="anchored" data-anchor-id="using-our-computer">Using Our Computer</h3>
<p>We’ve now defined everything necessary to implement our <code>square_sum</code> function in the Lambda Calculus. Let’s build it here from these basic principles. We want to calculate <code>square_sum(5, 2)</code>.</p>
<div id="cb5ae57e" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ZERO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : x</span>
<span id="cb35-2">INCREMENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(n(f)(x))</span>
<span id="cb35-3">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b: b(INCREMENT)(a)</span>
<span id="cb35-4">MULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : b(a(f))</span>
<span id="cb35-5"></span>
<span id="cb35-6">square_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : ADD(MULT(a)(a))(MULT(b)(b))</span>
<span id="cb35-7"></span>
<span id="cb35-8">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(INCREMENT(ZERO))(INCREMENT(ZERO))</span>
<span id="cb35-9">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ADD(TWO)(TWO))</span>
<span id="cb35-10"></span>
<span id="cb35-11">RESULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_sum(FIVE)(TWO)</span></code></pre></div>
</div>
<p>And that’s it! Using nothing but single-argument lambda functions, we’ve successfully defined non-negative integers, the addition and multiplication operators, and the square-sum function. It’s a little hard to visualize, but the actual answer <em>is</em> calcuated in our <code>RESULT</code> variable. We can output it to our metaphorical printer:</p>
<div id="61b6b829" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">emit(RESULT)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'*****************************'</code></pre>
</div>
</div>
<p>Our printer has output 29 asterisks! Pretty cool!</p>
</section>
<section id="whats-next" class="level3">
<h3 class="anchored" data-anchor-id="whats-next">What’s Next?</h3>
<p>Our system barely scratches the surface, but you can continue to implement more operators, comparators, control flow, and everything else you might need for a full computer. I highly recommend consulting the references at the top of the post for further reading!</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2022, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Exploring the Lambda Calculus with Python nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/</guid>
  <pubDate>Sun, 17 Jul 2022 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/lambda-calculus-python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thank you.</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2020-11-10-thank-you/</link>
  <description><![CDATA[ 





<p>It can’t be a cliche because it actually can’t be over-said: working on the Biden Campaign has been both the hardest and most rewarding experience of my career. It’s a rare opportunity to work on something you care deeply about, with amazing people, and to succeed. I said it in 2016, and in 2018, and I’ll say it again in 2020: the tech was never the point. I’m immensely proud of the work we did. The world will never fully understand the mountains that this scrappy team was able to move.</p>
<p>To those who invited me in: thank you. To those who pushed me: thank you. To those who pushed with me: thank you.</p>
<p>What’s next? I’m going to sleep for a while. I don’t know what’s after that, but I won’t be stepping away from the fight for democracy, justice, and a better world.</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2020-11-10-thank-you/</guid>
  <pubDate>Tue, 10 Nov 2020 06:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2020-11-10-thank-you/thank-you-social.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
