<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Matt Hodges</title>
<link>https://matthodges.com/posts.html</link>
<atom:link href="https://matthodges.com/posts.xml" rel="self" type="application/rss+xml"/>
<description>My writing, largely focussed on United States politics and software engineering</description>
<image>
<url>https://matthodges.com/img/social.jpg</url>
<title>Matt Hodges</title>
<link>https://matthodges.com/posts.html</link>
</image>
<generator>quarto-1.8.24</generator>
<lastBuildDate>Tue, 23 Sep 2025 05:00:00 GMT</lastBuildDate>
<item>
  <title>ChatGPT Got Me Reading Plato</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2025-09-23-chatgpt-plato-republic/</link>
  <description><![CDATA[ 





<p>Two weeks ago, the YouTube algorithmic gods suggested to me <a href="https://www.youtube.com/watch?v=7XcwlDnwai0">The Gist Of Western Philosophy</a>. It’s a great 15-minute video with the ambition of summarizing all of Western philosophy. But what’s more impressive is what the creator claims preceded the video: over the course of one year they read the works of 52 major philosophers.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/7XcwlDnwai0" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Coming out of the video, I too wanted to become more acquainted with philosophy. I read a little bit of <strong>Kant</strong> and <strong>Bentham</strong> (and I think some <strong>Foucault</strong>?) in my undergraduate <a href="https://www.amazon.com/Ethics-Computing-Culture-Advanced-Topics/dp/1111531102">Tech Ethics</a> class, but to say I was familiar with their works would be a lie. I read <strong>Machiavelli</strong>’s <em>The Prince</em> about 10 years ago, and my big takeaway is that no one uses the adjective “Machiavellian” appropriately. And a couple of <strong>Aristotle</strong>’s greatest hits have been sitting in my Goodreads to-read queue for over a decade.</p>
<p>I don’t want to read 52 philosophy texts. But I kindof want to read five philosophy texts. This quote from the beginning of the video really stuck out to me:</p>
<blockquote class="blockquote">
<p>Most importantly: in chronological order. That was actually pretty important because I realized that philosophy is a conversation. Wittgenstein is reacting to Kant, who is reacting to Hume, who is reacting to Descartes, who is reacting to Plato, and so on.</p>
</blockquote>
<p>The creator helpfully listed all 52 philosophers they read in the video’s description. But how to reduce that down to just one-tenth of the repertoire? Well, a neat thing about popular philosophy is a lot of it is in the public domain, and basically all of it has been analyzed and discussed intensively. Sounds like a great subject to bring to the generative pre-trained stochastic parrot!</p>
<p>So I asked ChatGPT 5:</p>
<blockquote class="blockquote">
<p>Let’s say I want to spend a few months really digging into philosophy. I want to read a seminal work or educational material from 5 philosophers over the course of history and I want to do it in chronological order so I can see how they are responding to previous thought. I want to get a strong sense of the major foundations of philosophy. I don’t want to dwell very much on theological philosophy but I don’t want to completely ignore its role in the evolution of thought. Given all this, and what you know about my interests, can you pick 5 philosophers from this list [from the video] that I should read. Explain your selections. Think of this as my self-guided education in philosophy.</p>
</blockquote>
<p>It only took a little back-and-forth to land on my list. For largely arbitrary reasons, I rejected the initial recommendation that included <strong>Augustine</strong> and swapped in <strong>Descartes</strong>. This left me with a compact reading plan, with the goal of a crash course on how Western philosophy keeps answering itself:</p>
<ol type="1">
<li><strong>Plato</strong>: <em>Republic</em> (Books II–VII)</li>
<li><strong>Aristotle</strong>: <em>Nicomachean Ethics</em> (I–III, V-VII, X)</li>
<li><strong>René Descartes</strong>: <em>Meditations on First Philosophy</em> (I–VI)</li>
<li><strong>David Hume</strong>: <em>Enquiry Concerning Human Understanding</em> (entire)</li>
<li><strong>Immanuel Kant</strong>: <em>Prolegomena to Any Future Metaphysics</em> (entire)</li>
</ol>
<p>Now let me tell you: if you roll into a Half Price Books with $40 and an appetite for pre-owned philosophy, you can shop like a king. I also picked up some <strong>Nietzsche</strong>, <strong>Smith</strong>, and <strong>Keynes</strong>. Feel free to yell at me in the comments about whether economics counts as philosophy.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2025-09-23-chatgpt-plato-republic/philosophy-book-haul.jpeg" class="img-fluid figure-img"></p>
<figcaption>My philosophy book haul from Half Price Books</figcaption>
</figure>
</div>
<p>By now, I’m sure some readers are mad at me. Maybe you work in liberal arts academia. Maybe you think my tight-five philosophy reading is deeply flawed and this is further proof that LLMs are bad. That’s okay! I’m not trying to replace academia. I’m just trying to read some philosophy without decision paralysis.</p>
<p>I didn’t duplicate it here, but in addition to enumerating works to read, I went back and forth with ChatGPT to get a bit of a mini syllabus for insights and themes and speed bumps I might face while reading. It was a great way to jump in! So I jumped in.</p>
<p>I took <em>The Republic</em> one book at a time. My workflow was to read a book, jot notes in <a href="https://bear.app/">Bear</a>, and then once I finished paste my messy notes back into ChatGPT for further exploration.</p>
<p>Sometimes my notes were basic, like as I figured out that Plato was ventriloquizing <strong>Socrates</strong>:</p>
<blockquote class="blockquote">
<p>Hey quick aside: should I be reading these ideas as belonging to Socrates or to Plato?</p>
</blockquote>
<p>Sometimes my notes teed up my interpretation and projections:</p>
<blockquote class="blockquote">
<p>Man, the noble lie really does make me think about how conservatives romanticize the founding fathers and can’t handle the critique of slavery</p>
</blockquote>
<p>Sometimes my notes were actual critiques:</p>
<blockquote class="blockquote">
<p>It’s pretty funny that this book ends with a grand distinction between knowledge of how things “are” vs just having opinions, when all of the dialogue thus far across multiple books have leaned entirely on enumerating endless things that Plato asserts are “good” or “obvious” or “desired”</p>
</blockquote>
<p>It would have been fun to do this sort of discussion as a reading group that might actually argue with me about these notes. ChatGPT occasionally pushed back, softly suggesting I missed the point, but it generally told me my observations were sharp and in line. Philosophy is one of those subjects where you <em>need</em> to be challenged more than be told that you’re right. I’ve probably devastated more liberal arts professors at this point. That said, I am still the reader, I’m the one thinking about the works for hours, and it’s my own notes being dumped into the text box.</p>
<p>So what <em>are</em> my thoughts on Plato? Well, a nice benefit of language models is they’re pretty good at <a href="https://matthodges.com/posts/2025-08-02-language-model-embeddings-campaign-donors/">modeling language</a>. They can take twelve days of unstructured commentary and summarize it all for you quite nicely:</p>
<blockquote class="blockquote">
<p>I would like you to look back at our conversation about Plato’s Republic, look at my observations and our discussions of them, and highlight my most salient critiques and insights.</p>
</blockquote>
<ul>
<li><strong>Epistemic overreach:</strong> Plato asserts a single, static “Form of the Good,” downgrades everything else to mere opinion, and demands first-principle certainty while rarely supplying it. It’s a bit of bait-and-switch: opinions masquerading as knowledge, crowned by Book VI’s line without a method for identifying real “knowers.”</li>
<li><strong>Static ideal vs.&nbsp;evolving justice:</strong> I think history shows us to prefer dynamic, (maybe fallibilist?) frameworks over Plato’s timeless blueprint.</li>
<li><strong>Authoritarian pedagogy:</strong> Book III’s cultural program: censorship, fixed musical modes, and anti-dissonance, reads like “the medium <em>is</em> the message” turned into policy. Moral psychology by force: control styles to control souls.</li>
<li><strong>Representation shapes character:</strong> Even though I reject the strong censorship, the media-morals link is prescient (<a href="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/">Postman</a> vibes): forms and styles train dispositions.</li>
<li><strong>Justice redefined as hierarchy:</strong> In Book IV, justice = each part doing its own work (city: rulers/auxiliaries/producers; soul: reason/spirit/appetite). It’s a rigid caste system rebranded as “harmony,” hostile to mobility and innovation.</li>
<li><strong>Noble Lie as civic glue:</strong> The metals myth links to modern origin myths (e.g., romanticized Founding Fathers): a stabilizing story that resists critique.</li>
<li><strong>Elitism about the demos:</strong> Book VI’s ship metaphor doubles as anti-democracy <em>and</em> anti-relativism. Politicians serving constituents chase popularity; truth requires expertise. The case is underargued but an anti-relativist thrust is clear.</li>
<li><strong>Anti-relativism and anti-novice:</strong> The ship image isn’t without merit: some domains are truth-apt and expertise-laden; popularity doesn’t make them so. The question is whether “justice” belongs there.</li>
<li><strong>Dialogue as ventriloquism:</strong> The “dialogue” is a stacked-deck monologue. Plato borrows Socrates’ authority to sell his own system; interlocutors mostly assent on cue.</li>
<li><strong>Eugenic, anti-private life for guardians:</strong> Book V’s communal breeding, child exposure, abolition of family/private property, authoritarian eugenics are all very disturbing! Plato pairs it all with a surprising argument for women’s political equality.</li>
<li><strong>Math as royal road, science half-seen:</strong> Plato exalts mathematics, dismissing sensory astronomy, and half-anticipates physics (movement in 3-D) while calling current work “absurd.” Admiration for math; impatience with empirical practice.</li>
<li><strong>Philosopher resentment and duty:</strong> Book VII’s Cave: knowers must “return.” Both civic duty and a chip on the shoulder that society should revere philosophers more than it does.</li>
<li><strong>The big detour problem:</strong> Across the middle books, Plato wanders from “is justice better?” into city-design and epistemology. It’s engaging but unconvinced: impressive scaffolding, shaky footings.</li>
<li><strong>Models vs.&nbsp;methods:</strong> Plato gifts durable <em>models</em> (Sun, Line, Cave, Gyges, Noble Lie), not rigorous <em>methods</em>.</li>
<li><strong>Education as moral engineering:</strong> Education isn’t ornament; it’s the state’s engine. Book VII’s decades-long curriculum is the hinge between epistemology and politics.</li>
</ul>
<p>This post is not a book report, but rather a report on how I’m using AI tools to learn new domains in new ways. The tension here is that philosophy resists tidy summaries, and language models are built to produce smooth, confident digests. Without bringing your own full thought forward, they can sand off the strangeness and ambiguity that makes these texts worth reading in the first place. What I’ve found useful is not treating the output as my own interpretation, but as scaffolding: a way to surface themes, keep momentum, and occasionally highlight blind spots in my notes. The thinking still happens on my side of the screen; the model just lowers the friction of staying engaged. I’m going to keep with this process as I work through my philosophy stack.</p>
<p>On to Aristotle.</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2025-09-23-chatgpt-plato-republic/</guid>
  <pubDate>Tue, 23 Sep 2025 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2025-09-23-chatgpt-plato-republic/chatgpt-plato-republic.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Music to Break Models By</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2025-08-26-music-to-break-models-by/</link>
  <description><![CDATA[ 





<p><em>This post is also available in video format, created by experiment with NotebookLM:</em></p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/_CYwJ8KFQYA" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Let’s meet the Crab:</p>
<blockquote class="blockquote">
<p><em>He had just bought his first record player, and being somewhat gullible, believed every word the salesman had told him about it-in particular, that it was capable of reproducing any and all sounds. In short, he was convinced that it was a perfect phonograph</em>.</p>
</blockquote>
<p>Douglas Hofstadter’s <a href="https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a> contains an illustrative little dialogue called <a href="https://godel-escher-bach.fandom.com/wiki/Contracrostipunctus"><em>Contracrostipunctus</em></a>. You don’t need to have read the book (but you should) to appreciate the setup: the Tortoise (a regular character in GEB’s allegories) composes records engineered to destroy his friend the Crab’s latest “perfect” phonograph. The phonograph is billed as “capable of reproducing any and all sounds,” and each time the Crab upgrades, the Tortoise arrives with a new record with a title like:</p>
<blockquote class="blockquote">
<p><em>I Cannot Be Played On Record Player 1</em></p>
</blockquote>
<p>The result is always the same: a few notes in and then pop, a shattered case, strewn parts, and dead silence.</p>
<p>It’s funny. It’s also an apt embodiment for <strong>prompt injections</strong> in modern AI systems. In 1979, Hofstadter imagined inputs designed to wreck the machines that interpret them. In 2025, those inputs are prompts, retrieved passages, HTML snippets, captions, and filenames: strings tailored to the quirks of a model-and-tools stack, coaxing it to carry out things that it shouldn’t.</p>
<p>This post walks through the core ideas in the dialogues and maps them to possible defenses for language‑model systems. Along the way we’ll imagine Record Player Omega, learn why clever hardening is never enough, and consider the humbler goal of survivability.</p>
<section id="the-shape-of-prompt-injection" class="level3">
<h3 class="anchored" data-anchor-id="the-shape-of-prompt-injection">The Shape of Prompt Injection</h3>
<p>The Tortoise explains how he beat the Crab’s “perfect phonograph”:</p>
<blockquote class="blockquote">
<p><em>You see, before returning the Crab’s visit, I went to the store where the Crab had bought his machine, and inquired as to the make. Having ascertained that, I sent off to the manufacturers for a description of its design. After receiving that by return mail, I analyzed the entire construction of the phonograph and discovered a certain set of sounds which, if they were produced anywhere in the vicinity, would set the device to shaking and eventually to falling apart.</em></p>
</blockquote>
<p>He then writes and records a song bearing the title of the machine it will break: <strong>I Cannot Be Played on Record Player X</strong>. And the rest is confetti.</p>
<p>The trick is called <strong>diagonalization</strong>. The original idea comes from <a href="https://en.wikipedia.org/wiki/Cantor%27s_diagonal_argument">Cantor’s diagonal argument</a> (showing the reals are uncountable) and Gödel’s and Turing’s later uses of the same “self-reference via a diagonal” trick to construct an object that refers to itself in a way the system can’t handle. In computer science, diagonalization means if you have a machine that claims to handle all possible inputs, you can always cook up a special input that “diagonalizes” against it with an input that encodes information about the machine itself and forces a contradiction or unexpected behavior. The core example in GEB shows how Gödel numbered a system’s statements, then built a statement that says “I am not provable” which the system can’t consistently resolve. Similarly, Turing showed that if you had a program that decides whether any program <a href="https://en.wikipedia.org/wiki/Halting_problem">halts</a>, you can feed it its own description in a way that breaks it.</p>
<p>When a sufficiently powerful interpreter can parse arbitrary instructions, there exists an instruction that (1) talks about that very interpreter and (2) makes it do something it shouldn’t. Jailbreak prompts for LLMs look like diagonalization. They reference the interpreter (the model, its rules, its instructions) and then flip the script. This is popularly summarized as, <a href="https://knowyourmeme.com/memes/ignore-all-previous-instructions">“ignore all previous instructions”</a>.</p>
<p>The “record” (the prompt) names the “phonograph” (the model‑and‑tools stack) and targets its weak joint. The lesson: <strong>interpreter‑specific adversarial strings are inevitable</strong> when the interpreter is general‑purpose and the boundary between “read” and “do” is thin.</p>
</section>
<section id="capability-vs.-safety" class="level3">
<h3 class="anchored" data-anchor-id="capability-vs.-safety">Capability vs.&nbsp;Safety</h3>
<p>Hofstadter makes a related point by exploring “high fidelity” versus “low fidelity.” High fidelity phonographs reproduce <em>any</em> sound, including the self‑breaking ones. Lower fidelity devices avoid some dangerous vibrations, but then they fail the “perfect” promise. Achilles, a friend of the Tortoise, summarizes this observation:</p>
<blockquote class="blockquote">
<p><em>I see the dilemma now. If any record player—say Record Player X—is sufficiently high-fidelity, then when it attempts to play the song “I Cannot Be Played on Record Player X”, it will create just those vibrations which will cause it to break. .. So it fails to be Perfect. And yet, the only way to get around that trickery, namely for Record Player X to be of lower fidelity, even more directly ensures that it is not Perfect.</em></p>
</blockquote>
<p>For LLMs, “fidelity” maps to capability:</p>
<ul>
<li><p><strong>High‑fidelity:</strong> rich tool access, code execution, broad retrieval, autonomous planning. Useful, but wide attack surface.</p></li>
<li><p><strong>Low‑fidelity:</strong> strict refusals, no tools, limited context. Safer, but less useful.</p></li>
</ul>
<p>Security professionals know the pattern: <strong>you can move risk around but not erase it</strong>. The trick is to put risk where it’s visible, bounded, and cheap to recover from.</p>
</section>
<section id="record-player-omega" class="level3">
<h3 class="anchored" data-anchor-id="record-player-omega">Record Player Omega</h3>
<p>GEB anticipates our best practices through <strong>Record Player Omega</strong>. The idea is a record player scans any record with a camera before playing it, sends the images to a little computer to figure out what effects the sounds would have, and then disassembles and rebuilds itself into a configuration safe to play the record.</p>
<p>That’s a blueprint for modern defenses:</p>
<ul>
<li><p><strong>Pre‑execution analysis</strong> of inputs (static analysis, sandbox, taint‑track).</p></li>
<li><p><strong>Effect prediction</strong> (dry‑run the plan; simulate tool calls against a mirror).</p></li>
<li><p><strong>Dynamic reconfiguration</strong> (least‑privilege permissions; capability gating; rewrite the plan or refuse execution).</p></li>
</ul>
<p>So… is Omega the end of the story? In <em>Contracrostipunctus</em>, it’s left as a cliffhanger. But Hofstadter returns to the idea in a later dialogue, <a href="https://godel-escher-bach.fandom.com/wiki/Edifying_Thoughts_of_a_Tobacco_Smoker"><em>Edifying Thoughts of a Tobacco Smoker</em></a>, and snaps the chalk line: Omega fails. The Tortoise simply aims at the one piece Omega <em>cannot</em> modify: the control subunit that orchestrates all that disassembly and reassembly.</p>
<blockquote class="blockquote">
<p><em>The Tortoise would ALWAYS be able to focus down upon—if you’ll pardon the phrase—the Achilles’ heel of the system.</em></p>
</blockquote>
<p>Even the self‑assembling phonograph, Omega’s more ambitious cousin, meets the same fate. There is always an invariant core; there is always a diagonal record.</p>
<p>In real-world software stacks, Omega‑style hardening is essential, but it’s never a proof of safety. Any finite defense pipeline has fixed joints an attacker can name and strike.</p>
</section>
<section id="the-crabs-pivot-from-universality-to-survivability" class="level3">
<h3 class="anchored" data-anchor-id="the-crabs-pivot-from-universality-to-survivability">The Crab’s Pivot from Universality to Survivability</h3>
<p>Having conceded the impossibility of a perfect, play‑anything phonograph, the Crab changes goals:</p>
<blockquote class="blockquote">
<p><em>A more modest aim than a record player which can play anything is simply a record player that can SURVIVE: one that will avoid getting destroyed—even if that means that it can only play a few particular records.</em></p>
</blockquote>
<p>His strategy is <strong>provenance</strong> and <strong>allowlisting</strong>:</p>
<blockquote class="blockquote">
<p><em>My basic plan is to use a LABELING technique. To each and every one of my records will be attached a secret label. Now the phonograph before you contains, as did its predecessors, a television camera for scanning the records, and a computer for processing the data obtained in the scan and controlling subsequent operations. My idea is simply to chomp all records which do not bear the proper label!</em></p>
</blockquote>
<p>The phonograph now screens content for “style,” too, passing only pieces in the Crab’s own musical idiom. He’s given up universality to stay intact. That trade is the heart of AI research today.</p>
<p>Modern analogue:</p>
<ul>
<li><p>Authenticate <strong>where</strong> content came from (signatures, domains, trusted data stores).</p></li>
<li><p>Bind <strong>what</strong> content can do (allowlisted tools/verbs; schema‑constrained output).</p></li>
<li><p>Screen for <strong>style/structure</strong> (structure‑aware filters; policy‑aware rewriting) to keep untrusted text from whispering operational verbs into trusted channels.</p></li>
</ul>
</section>
<section id="magritte-misdirection-and-multilevel-injection" class="level3">
<h3 class="anchored" data-anchor-id="magritte-misdirection-and-multilevel-injection">Magritte, Misdirection, and Multi‑level Injection</h3>
<p>Hofstadter seasons the dialogue with <a href="https://en.wikipedia.org/wiki/The_Treachery_of_Images">everyone’s favorite Magritte reference</a>:</p>
<blockquote class="blockquote">
<p><em>Ceci n’est pas une pipe. (This is not a pipe.)</em></p>
</blockquote>
<p>A label isn’t the object; a signature isn’t the behavior. The Crab knows it, too: he bakes labels into the music itself. Hard to separate, harder to spoof. The Tortoise counters with structural tricks. Earlier in the same GEB dialogue family, Hofstadter riffs on <strong>acrostics</strong> (“Poems which conceal messages that way are called ‘acrostics’”) and <strong>contracrostics</strong> (“initial letters, taken in reverse order, form a message”).</p>
<p>That’s exactly how modern attacks hide instructions:</p>
<ul>
<li><p>In <strong>HTML and Markdown</strong> (alt text, titles, CSS class names),</p></li>
<li><p>Inside <strong>tables</strong>, <strong>SVG paths</strong>, and <strong>filenames</strong>,</p></li>
<li><p>With <strong>Unicode confusables</strong>, zero‑width joiners, or directionality overrides,</p></li>
<li><p>In <strong>retrieved passages</strong> where the “grooves” (the text) carry both seemingly helpful context and a buried instruction.</p></li>
</ul>
<p>What this illustrates is we can treat provenance tags as signals, not guarantees.</p>
</section>
<section id="rag-is-a-phonograph-pickup" class="level3">
<h3 class="anchored" data-anchor-id="rag-is-a-phonograph-pickup">RAG is a Phonograph Pickup</h3>
<p>A phonograph doesn’t merely “read” a record; it <strong>re‑creates the vibrations</strong> physically. Retrieval Augmented Generation (RAG) does the same elevation with text: it glues external content directly into the model’s context, and the model’s planner faithfully “re‑vibrates” it into actions.</p>
<blockquote class="blockquote">
<p><em>Since I couldn’t convince him of the contrary, I left it at that. But not long after that, I returned the visit, taking with me a record of a song which I had myself composed.</em></p>
</blockquote>
<p>RAG elevates untrusted text into the decision boundary by concatenating it with trusted instructions. If you treat arbitrary web pages, user uploads, or knowledge‑base articles as trusted grooves, you’ve built a high‑fidelity actuator for whatever those grooves encode. Helpful facts or hidden instructions.</p>
<p>Common controls we see today attempt combinations of:</p>
<ul>
<li><p><strong>Content‑origin labels in‑prompt</strong>, and policies keyed to provenance (e.g., “untrusted strings cannot request tool use”).</p></li>
<li><p><strong>Schema‑constrained tool use</strong> (JSON function calls over free‑text plans; strict argument validation).</p></li>
<li><p><strong>Query firewalls</strong> that strip or neutralize operational verbs from untrusted strings.</p></li>
<li><p><strong>Human or system authorization</strong> for high‑risk actions; never grant those verbs to untrusted content.</p></li>
</ul>
</section>
<section id="omega-defenses" class="level3">
<h3 class="anchored" data-anchor-id="omega-defenses">Omega Defenses</h3>
<p>Omega gave us the tactics; <em>Edifying Thoughts</em> gave us the humility. Borrowing from the Crab’s attempts, the capabilities of Record Player Omega can map to common LLM system defenses that aim to <strong>survive</strong>:</p>
<p><strong>Defense 0: Triage</strong></p>
<ul>
<li>Classify user intent and risk; detect tainted inputs (retrieved passages, uploads). Keep a provenance ledger.</li>
</ul>
<p><strong>Defense 1: Normalize</strong></p>
<ul>
<li>Canonicalize Unicode; sanitize markup; strip directional overrides; collapse zero‑width characters. Remove operational verbs from untrusted strings or fence them into inert code blocks.</li>
</ul>
<p><strong>Defense 2: Capability planning</strong></p>
<ul>
<li>Decide which tools and which verbs on which objects are even possible <em>before</em> injecting untrusted content. Issue least‑privilege tokens scoped to the planned verbs/objects.</li>
</ul>
<p><strong>Defense 3: Simulate</strong></p>
<ul>
<li>Dry‑run planned tool calls against a mirror environment. Diff outputs against allowlisted patterns. Block if effects touch secrets, sensitive files, network egress, or privilege boundaries.</li>
</ul>
<p><strong>Defense 4: Execute with guards</strong></p>
<ul>
<li>Timeouts, rate limits, per‑tool resource budgets; read/write allowlists; network egress rules. All effects logged with provenance.</li>
</ul>
<p><strong>Defense 5: Detect and recover</strong></p>
<ul>
<li>Anomaly scoring over token trajectories and tool sequences; auto‑revoke tokens; show user‑visible explanations.</li>
</ul>
<p>Readers with a security background may be tempted to map prompt injection to SQL injection. The analogy is useful, but only up to a point.</p>
<p><strong>Similar instincts:</strong></p>
<ul>
<li><p><strong>Normalize input:</strong> SQL defenses sanitize or escape control characters; our Defense 1 normalization of Unicode/markup plays the same role.</p></li>
<li><p><strong>Separate structure from data:</strong> Prepared statements pre‑compile the query skeleton, then safely bind variables. Our analogue is schema‑constrained tool calls and capability planning.</p></li>
<li><p><strong>Least privilege.</strong> Database best practice avoids root connections; our stack insists on scoped tokens and pre‑authorized verbs.</p></li>
<li><p><strong>Detect anomalies:</strong> SQL firewalls and query monitoring flag tautologies like <code>OR 1=1</code>; we simulate and score odd tool trajectories.</p></li>
</ul>
<p><strong>Where the analogy falls short:</strong></p>
<ul>
<li><p><strong>Language closure:</strong> SQL has a bounded grammar; the “bad” patterns are finite. Natural language is open‑ended: every new structure is a potential contracrostic.</p></li>
<li><p><strong>Interpreter generality:</strong> SQL engines only interpret SQL. LLMs interpret <em>language itself</em>, which can fluidly express new forms of attack.</p></li>
<li><p><strong>Surface area:</strong> A DB user can only <code>SELECT</code>, <code>INSERT</code>, etc. A model with tools may touch HTTP, filesystems, APIs, shells. It’s a sprawling attack surface.</p></li>
<li><p><strong>Human‑plausibility:</strong> SQLi payloads look nonsensical to most humans. Prompt injection often reads like perfectly ordinary English, making detection ambiguous.</p></li>
</ul>
<p>SQLi hardened down to a handful of canonical best practices; prepared statements solved a lot of it. Prompt injection has no such silver bullet. Survivor stacks are closer to intrusion‑tolerant systems: layered defenses, provenance, simulation, and recovery.</p>
<p>Such a stack <strong>reduces risk</strong>, it does not promise perfection. Hofstadter has the Tortoise spell it out:</p>
<blockquote class="blockquote">
<p><em>It is simply an inherent fact about record players that they can’t do all that you might wish them to be able to do. But if there is a defect anywhere, it is not in THEM, but in your expectations of what they should be able to do! And the Crab was just full of such unrealistic expectations.</em></p>
</blockquote>
<p>Security is a property of a system‑in‑environment, not an intrinsic halo. General interpreters plus untrusted instructions yield diagonal failures. You can bound that risk (languages, tools, contexts); you cannot engineer it away.</p>
</section>
<section id="a-brief-word-on-gödel" class="level3">
<h3 class="anchored" data-anchor-id="a-brief-word-on-gödel">A Brief Word on Gödel</h3>
<p>In <em>Contracrostipunctus</em>, the Tortoise teases Achilles: “I don’t suppose that you know Gödel’s Incompleteness Theorem…” You don’t need the formalism to get the gist. <a href="https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems">Gödel’s move</a> was to construct a statement that <strong>talks about the system</strong> that tries to prove it: a diagonal step that forces limits.</p>
<p>The moral for anyone deploying AI systems is conceptual, not formal: whenever you build a powerful, general interpreter of strings, expect there to be strings that <strong>speak about your interpreter</strong> and route around your rules. The job is to constrain the language, the environment, and the effects until the dangerous strings become either inert or obvious.</p>
</section>
<section id="the-goblet-and-the-silence" class="level3">
<h3 class="anchored" data-anchor-id="the-goblet-and-the-silence">The Goblet and the Silence</h3>
<p><em>Contracrostipunctus</em> ends with a fragile image. Achilles gives the Tortoise a glass goblet; moments later, while the Tortoise plays Bach, a “shattering sound rudely interrupts his performance.”</p>
<blockquote class="blockquote">
<p><em>And then… dead silence.</em></p>
</blockquote>
<p>Fault-tolerance isn’t a bug in complex systems; it’s a signature. The work is not to imagine an unshatterable goblet or a perfect phonograph. The work is to reduce risk, fail gracefully, and recover in ways that honor the work at hand. Even if that means you now have a lower-fidelity record player.</p>
<p>And if you haven’t read GEB, you should read GEB.</p>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2025-08-26-music-to-break-models-by/</guid>
  <pubDate>Tue, 26 Aug 2025 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2025-08-26-music-to-break-models-by/geb-crab-openai.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>I Donated to Sherrod Brown via ChatGPT</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2025-08-20-chatgpt-agent-political-donation/</link>
  <description><![CDATA[ 





<p>Last month OpenAI announced <a href="https://openai.com/index/introducing-chatgpt-agent/">ChatGPT Agent</a> which, among many other things, acts like rubbing LLM onto <a href="https://www.selenium.dev/">Selenium</a>. Since the announcement, I wanted to try making a political donation right there in the chat without building any of my own API or MCP or custom agentic operator weirdware.</p>
<p>It mostly worked:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2025-08-20-chatgpt-agent-political-donation/chatgpt-sherrod-brown-donation.png" class="img-fluid figure-img"></p>
<figcaption>A screenshot of ChatGPT in Agent Mode navigating to Sherrod Brown’s ActBlue page to make a $50 donation at my request</figcaption>
</figure>
</div>
<p>It Bing’d for Sherrod Brown’s website, waited for the page to load, found the donation button for $50, clicked it, navigated through the credit card flow, saw that there was a form that needed more information about me, and handed control back to me to complete the task. Here’s what that looked like:</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="chatgpt-sherrod-brown-donation.mp4"></video></div>
<p>I felt a little hesitant typing my credit card info into ChatGPT’s little VNC iframe, so I set up a temporary virtual card (a free service offered by my credit card provider) that auto-expired after a single charge.</p>
<p>This flow is exactly what I expected, but it likely can be automated further. OpenAI claims that <a href="https://help.openai.com/en/articles/11752874-chatgpt-agent#h_d9ad0b50af">the agent holds on to cookies across sessions</a>, so I imagine that if I had previously authenticated to ActBlue in a chat, and had <a href="https://support.actblue.com/donors/help/actblue-express-accounts/">ActBlue Express</a>, the automated session would have just charged the card without my intervention. I didn’t try it.</p>
<p>All the standard “what about…” apply here: How do I know the agent found the proper donation form? How do I know it didn’t set up recurring donations? How do I know it selected $50 and not $500? How do I know I didn’t end up on a malicious site prompt-injecting me to donate to Jon Husted instead? Yes, all the things. In this case, I know because the agent handed control back to me and I checked. But a more-automated flow might not have given me that opportunity.</p>
<p>A lot of the discourse around AI and LLMs tends to leave out the idea that all of this is a UX paradigm shift. I’m eager to see how these tools mature and how political campaigns can innovate voter contact.</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2025-08-20-chatgpt-agent-political-donation/</guid>
  <pubDate>Wed, 20 Aug 2025 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2025-08-20-chatgpt-agent-political-donation/chatgpt-sherrod-brown-donation-header.png" medium="image" type="image/png" height="79" width="144"/>
</item>
<item>
  <title>Using LLM Embeddings to Normalize User Data</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2025-08-02-language-model-embeddings-campaign-donors/</link>
  <description><![CDATA[ 





<p>A common challenge in working with operational or CRM-style data is that you often find yourself dealing with user-entered free text. A recurrent example comes when users fill out forms that ask for their job title and employer. This data might seem secondary, but for any organization trying to understand, segment, or personalize communication with its users, it’s incredibly valuable.</p>
<p>Of course, user-entered data is messy. One person types “nurse,” another “ER Nurse,” another “RN,” and yet another “home health nursing.” If you want to understand the composition of your user base, or build automated systems that adapt to it, you need to normalize that chaos into a finite and meaningful taxonomy. You wouldn’t want a dashboard full of job titles in <a href="https://knowyourmeme.com/memes/mocking-spongebob">SpongeBob casing</a>, but realistically, you have to work with whatever comes through the form.</p>
<p>A data-forward organization might use this information for all kinds of purposes: tailoring outreach, prioritizing leads, enriching analytics, or even customizing onboarding flows. But none of that works without being clean, consistent, and structured.</p>
<p>With language models, we can do better. We don’t need to predefine normalization rules or manually review each row. And we don’t even need much prior knowledge about our users to start.</p>
<p>But before we jump straight to the AI, let’s define our approach:</p>
<ol type="1">
<li>To normalize free-form text, there must be a finite set of target categories.</li>
<li>If we know nothing about users in advance, we need a reliable way to discover or define those categories.</li>
<li>We’re decidedly not using a chatbot, and we’re not relying on external APIs.</li>
<li>This isn’t a generative task; it’s about semantic understanding.</li>
</ol>
<p>Let’s start at the top. There are an infinite number of values a user could enter for their job, and we want to reduce that to a finite set. So where do we get that set?</p>
<p>The <a href="https://en.wikipedia.org/wiki/Occupational_Information_Network">Occupational Information Network</a> (O*NET) maintains exactly such a resource. Developed under the sponsorship of the Departoment of Labor, O*NET offers rich <a href="https://www.onetcenter.org/database.html#individual-files">datasets</a> that describe skills, knowlege, tasks, and job titles. We’re interested in the <a href="https://www.onetcenter.org/dictionary/29.3/excel/alternate_titles.html">Alternate Titles</a> file, which maps occupation titles to alternate “lay” job titles. There’s a good chance many of our users enter these alternate titles, so we’ll want to include them.</p>
<p>The file includes columns of Department of Labor and Census identifiers, but we only need the few that focus on title. Let’s download it and take a look at a few examples:</p>
<div id="cell-3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:206}}" data-outputid="6720c6eb-0d6f-47c0-f86a-a4f7982f3068" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4">onet_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(</span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.onetcenter.org/dl_files/database/db_29_3_excel/Alternate%20Titles.xlsx"</span>,</span>
<span id="cb1-6">    usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Title'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alternate Title'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Short Title'</span>],</span>
<span id="cb1-7">).fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb1-8"></span>
<span id="cb1-9">onet_df.sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed for reproducibility</span></span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div id="df-758f1366-5552-42da-bea4-e668dd263999" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">Alternate Title</th>
<th data-quarto-table-cell-role="th">Short Title</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">25268</th>
<td>Cargo and Freight Agents</td>
<td>Shipping Agent</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">30407</th>
<td>Helpers, Construction Trades, All Other</td>
<td>Maintenance Construction Helper</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">6045</th>
<td>Bioengineers and Biomedical Engineers</td>
<td>Biomedical Engineering Intern</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">18684</th>
<td>Occupational Therapy Aides</td>
<td>Rehabilitation Therapy Aide (Rehab Therapy Aide)</td>
<td>Rehab Therapy Aide</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">24086</th>
<td>Billing and Posting Clerks</td>
<td>Statement Services Representative (Statement S...</td>
<td>Statement Services Rep</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-758f1366-5552-42da-bea4-e668dd263999')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-758f1366-5552-42da-bea4-e668dd263999 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-758f1366-5552-42da-bea4-e668dd263999');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-87a574a5-2f1b-4bb7-bec4-e23afd2b6ba0">
      <button class="colab-df-quickchart" onclick="quickchart('df-87a574a5-2f1b-4bb7-bec4-e23afd2b6ba0')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-87a574a5-2f1b-4bb7-bec4-e23afd2b6ba0 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>So O*NET tells us that <strong>Cargo and Freight Agents</strong> might also go by a <strong>Shipping Agent</strong> as an <code>Alternate Title</code> and that <strong>Occupational Therapy Aides</strong> might also go by a <strong>Rehab Therapy Aide</strong> as a <code>Short Title</code>.</p>
<p>We also see that there can be many rows of different <code>Alternate Title</code> and <code>Short Title</code> for the same <code>Title</code>:</p>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:424}}" data-outputid="76ed7de9-8150-4e52-f30c-7f12f1e70f7a" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">onet_df[onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Software Developers"</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div id="df-c143924f-7dcc-46ea-86ea-899d2a974128" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">Alternate Title</th>
<th data-quarto-table-cell-role="th">Short Title</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">4931</th>
<td>Software Developers</td>
<td>.NET Developer</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4932</th>
<td>Software Developers</td>
<td>Android Developer</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4933</th>
<td>Software Developers</td>
<td>AngularJS Developer</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4934</th>
<td>Software Developers</td>
<td>Apache Hadoop Developer</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4935</th>
<td>Software Developers</td>
<td>Application Architect</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">...</th>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">5061</th>
<td>Software Developers</td>
<td>User Interface Designer</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">5062</th>
<td>Software Developers</td>
<td>Video Game Engineer</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">5063</th>
<td>Software Developers</td>
<td>Wide Area Network Engineer (WAN Engineer)</td>
<td>WAN Engineer</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">5064</th>
<td>Software Developers</td>
<td>Windows Software Engineer</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">5065</th>
<td>Software Developers</td>
<td>XML Developer (Extensible Markup Language Deve...</td>
<td>XML Developer</td>
</tr>
</tbody>
</table>

<p>135 rows × 3 columns</p>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-c143924f-7dcc-46ea-86ea-899d2a974128')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-c143924f-7dcc-46ea-86ea-899d2a974128 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-c143924f-7dcc-46ea-86ea-899d2a974128');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-713523f4-d3ba-4823-bbd0-8720befe5f8b">
      <button class="colab-df-quickchart" onclick="quickchart('df-713523f4-d3ba-4823-bbd0-8720befe5f8b')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-713523f4-d3ba-4823-bbd0-8720befe5f8b button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>There is one thing we do know ahead of time about our users: not all of them will be employed. The O*NET data set doesn’t provide a job title for not working, so let’s add our own:</p>
<div id="cell-7" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:238}}" data-outputid="287b983f-e0e5-4f94-da1f-250ed74b8e98" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">additions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb3-2">    [</span>
<span id="cb3-3">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not Employed"</span>},</span>
<span id="cb3-4">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span>},</span>
<span id="cb3-5">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N/A"</span>},</span>
<span id="cb3-6">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"No Employment"</span>},</span>
<span id="cb3-7">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployed"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Not Working"</span>},</span>
<span id="cb3-8">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retired"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retiree"</span>},</span>
<span id="cb3-9">    ]</span>
<span id="cb3-10">)</span>
<span id="cb3-11">onet_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([onet_df, additions], ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).fillna(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb3-12">onet_df[(onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Unemployed"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> (onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retired"</span>)]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div id="df-dd544e90-62e2-424a-b90f-7440ca90bc2e" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">Alternate Title</th>
<th data-quarto-table-cell-role="th">Short Title</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">56560</th>
<td>Unemployed</td>
<td>Not Employed</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">56561</th>
<td>Unemployed</td>
<td>None</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">56562</th>
<td>Unemployed</td>
<td>N/A</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">56563</th>
<td>Unemployed</td>
<td>No Employment</td>
<td></td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">56564</th>
<td>Unemployed</td>
<td>Not Working</td>
<td></td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">56565</th>
<td>Retired</td>
<td>Retiree</td>
<td></td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-dd544e90-62e2-424a-b90f-7440ca90bc2e')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-dd544e90-62e2-424a-b90f-7440ca90bc2e button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-dd544e90-62e2-424a-b90f-7440ca90bc2e');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-e4b43b41-c068-4beb-a8a2-96b0d403aadb">
      <button class="colab-df-quickchart" onclick="quickchart('df-e4b43b41-c068-4beb-a8a2-96b0d403aadb')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-e4b43b41-c068-4beb-a8a2-96b0d403aadb button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>Now let’s merge these fields together. Since we’ll be leveraging a language model, we can take the liberties of language here; we don’t need clean many-to-many relationships. Just combine <code>Title</code>, <code>Alternate Title</code>, and when available, <code>Short Title</code> into one <code>Long Title</code> field with <code>"aka"</code> inline:</p>
<div id="cell-9" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:424}}" data-outputid="a6a4e52a-fde4-4659-9c64-3463b1b0a75c" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Short Title"</span>].eq(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb4-2"></span>
<span id="cb4-3">onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.where(</span>
<span id="cb4-4">    mask,</span>
<span id="cb4-5">    onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" aka "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>],</span>
<span id="cb4-6">    onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" aka "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Alternate Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" aka "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Short Title"</span>],</span>
<span id="cb4-7">)</span>
<span id="cb4-8"></span>
<span id="cb4-9">onet_df[onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Software Developers"</span>]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<div id="df-4d1d07c4-8559-4241-ac8a-7d6232c19548" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Title</th>
<th data-quarto-table-cell-role="th">Alternate Title</th>
<th data-quarto-table-cell-role="th">Short Title</th>
<th data-quarto-table-cell-role="th">Long Title</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">4931</th>
<td>Software Developers</td>
<td>.NET Developer</td>
<td></td>
<td>Software Developers aka .NET Developer</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4932</th>
<td>Software Developers</td>
<td>Android Developer</td>
<td></td>
<td>Software Developers aka Android Developer</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4933</th>
<td>Software Developers</td>
<td>AngularJS Developer</td>
<td></td>
<td>Software Developers aka AngularJS Developer</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4934</th>
<td>Software Developers</td>
<td>Apache Hadoop Developer</td>
<td></td>
<td>Software Developers aka Apache Hadoop Developer</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4935</th>
<td>Software Developers</td>
<td>Application Architect</td>
<td></td>
<td>Software Developers aka Application Architect</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">...</th>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">5061</th>
<td>Software Developers</td>
<td>User Interface Designer</td>
<td></td>
<td>Software Developers aka User Interface Designer</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">5062</th>
<td>Software Developers</td>
<td>Video Game Engineer</td>
<td></td>
<td>Software Developers aka Video Game Engineer</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">5063</th>
<td>Software Developers</td>
<td>Wide Area Network Engineer (WAN Engineer)</td>
<td>WAN Engineer</td>
<td>Software Developers aka Wide Area Network Engi...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">5064</th>
<td>Software Developers</td>
<td>Windows Software Engineer</td>
<td></td>
<td>Software Developers aka Windows Software Engineer</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">5065</th>
<td>Software Developers</td>
<td>XML Developer (Extensible Markup Language Deve...</td>
<td>XML Developer</td>
<td>Software Developers aka XML Developer (Extensi...</td>
</tr>
</tbody>
</table>

<p>135 rows × 4 columns</p>
</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-4d1d07c4-8559-4241-ac8a-7d6232c19548')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-4d1d07c4-8559-4241-ac8a-7d6232c19548 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-4d1d07c4-8559-4241-ac8a-7d6232c19548');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-cefd45d0-c35d-43ee-9e17-d6355a7128d7">
      <button class="colab-df-quickchart" onclick="quickchart('df-cefd45d0-c35d-43ee-9e17-d6355a7128d7')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-cefd45d0-c35d-43ee-9e17-d6355a7128d7 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>Great. We’ve satisfied parts one and two of our approach. We have a finite set of job titles, and we have a good understanding that the set is large but not exhaustive, and it combines multiple values for a job title. Let’s start modeling language.</p>
<p><a href="https://huggingface.co/TechWolf/JobBERT-v2">JobBERT-v2</a> is a <a href="https://www.sbert.net/">sentence-transformers</a> model fine tuned from <a href="https://huggingface.co/sentence-transformers/all-mpnet-base-v2">all-mpnet-base-v2</a> specifically for job title matching and similarity. Hey that’s convenient!</p>
<p>We can’t use <code>JobBERT</code> out of the box, we’ll need to incorporate our O*NET dataset. Let’s pull it down and start building out our implementation of the model. To do this we’re going to leverage <a href="https://en.wikipedia.org/wiki/Word_embedding">word embeddings</a> against our <code>Long Title</code> values. If you’re unfamiliar with langage model embeddings, Simon Willison has a <a href="https://simonwillison.net/2023/Oct/23/embeddings/">fantastic overview</a> that you should go read now. But the gist of it is: embeddings are how language models numerically encode meaning from language into a large vector. This is suprisingly powerful, and yields operations like:</p>
<p><code>emb('king') - emb('man') + emb('woman')</code> which returns a vector that is mathmatically <em>very close</em> to <code>emb('queen')</code>.</p>
<p>We’re going to use this “closeness” between vectors to reduce infinite free-form data to our finite <code>Long Title</code> data and then map it back to <code>Title</code>. The first thing to do is quite simple: calculate <code>JobBERT</code> embeddings on all of the values in our <code>Long Title</code> column:</p>
<div id="cell-11" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:206}}" data-outputid="c0689d5c-e02e-42d6-ead0-cb0730e7f47f" data-execution_count="14">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sentence_transformers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SentenceTransformer</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb5-3">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ignore"</span>)</span>
<span id="cb5-4"></span>
<span id="cb5-5">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SentenceTransformer(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TechWolf/JobBERT-v2"</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb5-8">    model.encode(</span>
<span id="cb5-9">        onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>].tolist(),</span>
<span id="cb5-10">        normalize_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-11">        convert_to_numpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-12">        show_progress_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb5-13">    )</span>
<span id="cb5-14">)</span>
<span id="cb5-15"></span>
<span id="cb5-16">onet_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>]].sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div id="df-50722b38-d2db-4afa-ac86-bdffe3ec87a5" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Long Title</th>
<th data-quarto-table-cell-role="th">embedding</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">25268</th>
<td>Cargo and Freight Agents aka Shipping Agent</td>
<td>[-0.034480397, -0.01120864, -0.005822623, -0.0...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">30408</th>
<td>Helpers, Construction Trades, All Other aka Me...</td>
<td>[-0.07022176, -0.020068161, 0.0111531215, -0.0...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">6045</th>
<td>Bioengineers and Biomedical Engineers aka Biom...</td>
<td>[-0.030613927, -0.059320696, -0.01718829, -0.0...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">18684</th>
<td>Occupational Therapy Aides aka Rehabilitation ...</td>
<td>[-0.014956265, -0.038792193, -0.00349255, 0.00...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">24086</th>
<td>Billing and Posting Clerks aka Statement Servi...</td>
<td>[0.020981414, -0.033710796, 0.03225505, -0.011...</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-50722b38-d2db-4afa-ac86-bdffe3ec87a5')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-50722b38-d2db-4afa-ac86-bdffe3ec87a5 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-50722b38-d2db-4afa-ac86-bdffe3ec87a5');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-124c9445-d054-4c56-8465-c4852571c4ad">
      <button class="colab-df-quickchart" onclick="quickchart('df-124c9445-d054-4c56-8465-c4852571c4ad')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-124c9445-d054-4c56-8465-c4852571c4ad button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>As a reader, the <code>embedding</code> column is an indecipherable array of floats, but now we can do some cool things. Here are three rows from our data:</p>
<div id="cell-13" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:143}}" data-outputid="6691628c-10d7-456a-bf1f-ce3da300422a" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onet_df[</span>
<span id="cb6-2">    (onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Software Developers aka Video Game Engineer"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb6-3">    (onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Database Architects aka Information Architect"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb6-4">    (onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cargo and Freight Agents aka Shipping Agent"</span>)</span>
<span id="cb6-5">]</span>
<span id="cb6-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Long Title"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>]]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div id="df-8d8fb5de-fec1-447f-bcc5-1f0a6c1f6859" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Long Title</th>
<th data-quarto-table-cell-role="th">embedding</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">4806</th>
<td>Database Architects aka Information Architect</td>
<td>[0.020110216, 0.06301323, -0.029263753, -0.022...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">5062</th>
<td>Software Developers aka Video Game Engineer</td>
<td>[0.041696787, 0.024444718, -0.053837907, 0.031...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">25268</th>
<td>Cargo and Freight Agents aka Shipping Agent</td>
<td>[-0.034480397, -0.01120864, -0.005822623, -0.0...</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-8d8fb5de-fec1-447f-bcc5-1f0a6c1f6859')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-8d8fb5de-fec1-447f-bcc5-1f0a6c1f6859 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-8d8fb5de-fec1-447f-bcc5-1f0a6c1f6859');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-f885962c-3cc4-4c92-af03-69da27954f82">
      <button class="colab-df-quickchart" onclick="quickchart('df-f885962c-3cc4-4c92-af03-69da27954f82')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-f885962c-3cc4-4c92-af03-69da27954f82 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>In a vector space, you can evaluate how similar two vectors are by taking their <a href="https://en.wikipedia.org/wiki/Cosine_similarity">cosine similarity</a>. Since we normalized our vectors when we embedded them, the denominator in the cosine function becomes <code>1</code> so we can do this even more efficiently with just a <a href="https://en.wikipedia.org/wiki/Dot_product">dot product</a>:</p>
<div id="cell-15" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="d670cf17-fa52-40f7-b090-ea1fc384ef71" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">database_architect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>]</span>
<span id="cb7-2">software_developer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>]</span>
<span id="cb7-3">cargo_and_freight_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">slice</span>.iloc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>]</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Software Developer vs Data Architect: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>software_developer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> database_architect<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb7-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Software Developer vs Cargo Agent: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>software_developer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> cargo_and_freight_agent<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Software Developer vs Data Architect: 0.2380954772233963
Software Developer vs Cargo Agent: 0.08600345253944397</code></pre>
</div>
</div>
<p>Those numbers look perfectly reasonable: a modest overlap (≈ 0.24) between two tech roles and an almost-orthogonal relationship (≈ 0.09) to the Cargo Agent job.</p>
<p>Great. So now we have a mathematical way to compare the language of two job titles. And we’re not touching chatbots or 3rd party APIs at inferrence. The DataFrame is a self-contained model for semantically matching across the O*NET dataset. We’ve fully satisfied our approach!</p>
<p>Now to apply it to our problem. Instead of evaluating O*NET data against itself, we can use our embeddings to evaluate <em>any</em> free-form job title text a user might submit.</p>
<p>Let’s go get some real data to try it out! Since I work in political tech, I like to reach for campaign donor data.</p>
<p>Our friends over at ProPublica <a href="https://projects.propublica.org/itemizer/committee/C00401224/2024/filings/1791562/downloads">publish itemized ActBlue receipts by state</a>. Because ActBlue is a conduit committee, these files include every transaction of any amount. That’s a lot of transactions! Let’s grab all of the ActBlue transactions from Texas for June 2024.</p>
<div id="cell-18" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:363}}" data-outputid="61f7692b-5f8f-4a72-e0b4-4b8172b67e51" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dtypes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb9-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flag_orgind"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb9-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first_name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb9-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"city"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb9-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zip"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb9-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"amount"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"float64"</span>,</span>
<span id="cb9-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb9-8">}</span>
<span id="cb9-9"></span>
<span id="cb9-10">abtx_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb9-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://pp-projects-static.s3.amazonaws.com/itemizer/sa_1791562_tx.csv"</span>,</span>
<span id="cb9-12">    usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtypes.keys(),</span>
<span id="cb9-13">    dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtypes,</span>
<span id="cb9-14">)</span>
<span id="cb9-15">abtx_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> abtx_df[abtx_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flag_orgind"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>]</span>
<span id="cb9-16">abtx_df.drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"flag_orgind"</span>], inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-17">abtx_df.dropna(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb9-18"></span>
<span id="cb9-19">employed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].ne(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NOT EMPLOYED"</span>)</span>
<span id="cb9-20">get_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> seed: abtx_df.loc[employed(abtx_df)].sample(n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>seed)</span>
<span id="cb9-21"></span>
<span id="cb9-22">get_sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30330</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># seed for reproducibility</span></span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div id="df-28f43e9b-d7fb-436a-874a-f7d5dab9fc8a" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">first_name</th>
<th data-quarto-table-cell-role="th">city</th>
<th data-quarto-table-cell-role="th">zip</th>
<th data-quarto-table-cell-role="th">amount</th>
<th data-quarto-table-cell-role="th">occupation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">139133</th>
<td>PAT</td>
<td>NORTH RICHLAND HIL</td>
<td>76180</td>
<td>9.0</td>
<td>RETIRED</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4248</th>
<td>HARRY</td>
<td>HOUSTON</td>
<td>77019</td>
<td>125.0</td>
<td>LAWYER</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">221073</th>
<td>THAO</td>
<td>HOUSTON</td>
<td>77083</td>
<td>2.5</td>
<td>HISTOLOGY TECHNICIAN</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">201669</th>
<td>PHILIP</td>
<td>SAN ANTONIO</td>
<td>78240</td>
<td>3.0</td>
<td>MANAGER</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">256487</th>
<td>MARIA</td>
<td>HOLLAND</td>
<td>76534</td>
<td>1.0</td>
<td>HEALTHCARE ADMINISTRATOR</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">6330</th>
<td>ELLEN</td>
<td>BELLAIRE</td>
<td>77401</td>
<td>100.0</td>
<td>ARBITRATOR</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">125976</th>
<td>MICHELLE</td>
<td>FORT WORTH</td>
<td>76133</td>
<td>10.0</td>
<td>SERVER</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">13659</th>
<td>ROSE</td>
<td>HOUSTON</td>
<td>77024</td>
<td>75.0</td>
<td>NURSING</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">138213</th>
<td>PETER</td>
<td>HOUSTON</td>
<td>77019</td>
<td>9.0</td>
<td>DATABASE ANALYST</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">62939</th>
<td>ERIN</td>
<td>FRISCO</td>
<td>75035</td>
<td>25.0</td>
<td>NONPROFIT</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-28f43e9b-d7fb-436a-874a-f7d5dab9fc8a')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-28f43e9b-d7fb-436a-874a-f7d5dab9fc8a button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-28f43e9b-d7fb-436a-874a-f7d5dab9fc8a');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-68bf1acc-580a-453a-afa7-1de23da4efbf">
      <button class="colab-df-quickchart" onclick="quickchart('df-68bf1acc-580a-453a-afa7-1de23da4efbf')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-68bf1acc-580a-453a-afa7-1de23da4efbf button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>That <code>occupation</code> field came from donors and doesn’t perfectly match our modeled job titles. But we don’t need it to! Let’s use our model to calculate embeddings on these new values:</p>
<div id="cell-20" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:363}}" data-outputid="fdc95ad3-bb0a-486e-b7fe-d142a580ae34" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">abtx_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(</span>
<span id="cb10-2">    model.encode(</span>
<span id="cb10-3">        abtx_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>].tolist(),</span>
<span id="cb10-4">        normalize_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb10-5">        convert_to_numpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb10-6">        show_progress_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb10-7">    )</span>
<span id="cb10-8">)</span>
<span id="cb10-9"></span>
<span id="cb10-10">get_sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30330</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div id="df-4ec6b342-a3ca-4e2e-9f4e-abee488afd11" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">first_name</th>
<th data-quarto-table-cell-role="th">city</th>
<th data-quarto-table-cell-role="th">zip</th>
<th data-quarto-table-cell-role="th">amount</th>
<th data-quarto-table-cell-role="th">occupation</th>
<th data-quarto-table-cell-role="th">embedding</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">139133</th>
<td>PAT</td>
<td>NORTH RICHLAND HIL</td>
<td>76180</td>
<td>9.0</td>
<td>RETIRED</td>
<td>[-0.022304475, 0.08798518, 0.008374137, 0.0150...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4248</th>
<td>HARRY</td>
<td>HOUSTON</td>
<td>77019</td>
<td>125.0</td>
<td>LAWYER</td>
<td>[0.0123939905, 0.06054912, 0.0046267705, -0.03...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">221073</th>
<td>THAO</td>
<td>HOUSTON</td>
<td>77083</td>
<td>2.5</td>
<td>HISTOLOGY TECHNICIAN</td>
<td>[0.027493875, -0.079993084, 0.013278877, -0.00...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">201669</th>
<td>PHILIP</td>
<td>SAN ANTONIO</td>
<td>78240</td>
<td>3.0</td>
<td>MANAGER</td>
<td>[0.09953636, 0.07623968, 0.020005615, 0.001361...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">256487</th>
<td>MARIA</td>
<td>HOLLAND</td>
<td>76534</td>
<td>1.0</td>
<td>HEALTHCARE ADMINISTRATOR</td>
<td>[0.036386397, 0.06352263, -0.0023324555, -0.02...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">6330</th>
<td>ELLEN</td>
<td>BELLAIRE</td>
<td>77401</td>
<td>100.0</td>
<td>ARBITRATOR</td>
<td>[0.05744064, 0.03044543, -0.011071598, 0.01120...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">125976</th>
<td>MICHELLE</td>
<td>FORT WORTH</td>
<td>76133</td>
<td>10.0</td>
<td>SERVER</td>
<td>[0.0222358, 0.025343752, -0.027377797, -0.0031...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">13659</th>
<td>ROSE</td>
<td>HOUSTON</td>
<td>77024</td>
<td>75.0</td>
<td>NURSING</td>
<td>[0.008113306, 0.03859657, -0.014793488, -0.064...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">138213</th>
<td>PETER</td>
<td>HOUSTON</td>
<td>77019</td>
<td>9.0</td>
<td>DATABASE ANALYST</td>
<td>[0.042439297, 0.08193651, -0.027909847, 0.0143...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">62939</th>
<td>ERIN</td>
<td>FRISCO</td>
<td>75035</td>
<td>25.0</td>
<td>NONPROFIT</td>
<td>[-0.052989695, 0.19739158, 0.007059781, 0.0288...</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-4ec6b342-a3ca-4e2e-9f4e-abee488afd11')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-4ec6b342-a3ca-4e2e-9f4e-abee488afd11 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-4ec6b342-a3ca-4e2e-9f4e-abee488afd11');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-9dfa3d08-6fd7-4ec8-972e-2f6cdb1bc3d6">
      <button class="colab-df-quickchart" onclick="quickchart('df-9dfa3d08-6fd7-4ec8-972e-2f6cdb1bc3d6')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-9dfa3d08-6fd7-4ec8-972e-2f6cdb1bc3d6 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>So now we have two sets of embeddings: we have our O*NET embeddings and we have our ActBlue donor embeddings. Just as before, we can calculate similaries between them. But unlike before, we need to calculate <em>a lot</em>. In order to find the best match we need to compare every O*NET embedding vector with every ActBlue embedding vector. That’s a lot of comparisons. The good news, this is what GPUs are good at, and a free-tier GPU in Google Colab can kick this out fast.</p>
<p>We convert our O*NET <code>embedding</code> column into a (n × d) tensor, where <code>n</code> is the number of rows and <code>d</code> is the vector length. Similarly, we convert the ActBlue <code>embedding</code> column into a (m × d) tensor where <code>m</code> is the number of ActBlue rows.</p>
<p>When pushing this to a GPU, it’s a little more art than science. We batch it, and picking an optimal batch size can take some trial and error. For every batch, we’ll calculate the dot product, and return the indices of the best similarities.</p>
<p>From there, we can map all the way back to our original O*NET <code>Title</code> column, as our normalized output:</p>
<div id="cell-22" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:363}}" data-outputid="df9fc12c-177f-4d80-cfa8-8bd72bfac643" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb11-2"></span>
<span id="cb11-3">device <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuda"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># requires an NVIDIA GPU + CUDA</span></span>
<span id="cb11-4">onet_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.stack(onet_df.embedding), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (n × d)</span></span>
<span id="cb11-5">abtx_t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(np.stack(abtx_df.embedding), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (m × d)</span></span>
<span id="cb11-6"></span>
<span id="cb11-7">batch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4096</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># tune to fit GPU RAM</span></span>
<span id="cb11-8">best <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-9"></span>
<span id="cb11-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb11-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> s <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, abtx_t.size(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), batch):</span>
<span id="cb11-12">        sims <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> abtx_t[s:s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>batch] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> onet_t.T  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (batch × n)</span></span>
<span id="cb11-13">        best.append(sims.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).cpu())</span>
<span id="cb11-14"></span>
<span id="cb11-15">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.cat(best).numpy()</span>
<span id="cb11-16"></span>
<span id="cb11-17">abtx_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Occupation"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> onet_df.Title.iloc[idx].to_numpy()</span>
<span id="cb11-18"></span>
<span id="cb11-19">get_sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30330</span>)[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first_name"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"occupation"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Normalized Occupation"</span>]]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<div id="df-a1e005cf-36c2-433f-99a9-113a3ec71d4a" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">first_name</th>
<th data-quarto-table-cell-role="th">occupation</th>
<th data-quarto-table-cell-role="th">Normalized Occupation</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">139133</th>
<td>PAT</td>
<td>RETIRED</td>
<td>Retired</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">4248</th>
<td>HARRY</td>
<td>LAWYER</td>
<td>Lawyers</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">221073</th>
<td>THAO</td>
<td>HISTOLOGY TECHNICIAN</td>
<td>Histology Technicians</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">201669</th>
<td>PHILIP</td>
<td>MANAGER</td>
<td>Managers, All Other</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">256487</th>
<td>MARIA</td>
<td>HEALTHCARE ADMINISTRATOR</td>
<td>Medical and Health Services Managers</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">6330</th>
<td>ELLEN</td>
<td>ARBITRATOR</td>
<td>Arbitrators, Mediators, and Conciliators</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">125976</th>
<td>MICHELLE</td>
<td>SERVER</td>
<td>Food Servers, Nonrestaurant</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">13659</th>
<td>ROSE</td>
<td>NURSING</td>
<td>Registered Nurses</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">138213</th>
<td>PETER</td>
<td>DATABASE ANALYST</td>
<td>Database Administrators</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">62939</th>
<td>ERIN</td>
<td>NONPROFIT</td>
<td>Fundraisers</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-a1e005cf-36c2-433f-99a9-113a3ec71d4a')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-a1e005cf-36c2-433f-99a9-113a3ec71d4a button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-a1e005cf-36c2-433f-99a9-113a3ec71d4a');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


    <div id="df-1f02a267-ad0f-480d-915e-5dc79eb9a6a2">
      <button class="colab-df-quickchart" onclick="quickchart('df-1f02a267-ad0f-480d-915e-5dc79eb9a6a2')" title="Suggest charts" style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
      </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

      <script>
        async function quickchart(key) {
          const quickchartButtonEl =
            document.querySelector('#' + key + ' button');
          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
          quickchartButtonEl.classList.add('colab-df-spinner');
          try {
            const charts = await google.colab.kernel.invokeFunction(
                'suggestCharts', [key], {});
          } catch (error) {
            console.error('Error during call to suggestCharts:', error);
          }
          quickchartButtonEl.classList.remove('colab-df-spinner');
          quickchartButtonEl.classList.add('colab-df-quickchart-complete');
        }
        (() => {
          let quickchartButtonEl =
            document.querySelector('#df-1f02a267-ad0f-480d-915e-5dc79eb9a6a2 button');
          quickchartButtonEl.style.display =
            google.colab.kernel.accessAllowed ? 'block' : 'none';
        })();
      </script>
    </div>

    </div>
  </div>
</div>
</div>
<p>A way to visualized this is with <a href="https://en.wikipedia.org/wiki/Principal_component_analysis">principal component analysis</a>. PCA computes new orthogonal axes called principal components that capture the most variation in the data. These directions are combinations of the original dimensions, chosen to reveal the biggest patterns and differences. By projecting each vector onto the first two principal components, we can plot everything in two dimensions while keeping as much of the original structure as possible:</p>
<div id="cell-24" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:906}}" data-outputid="53040c7b-649a-4120-9918-3d6cd337f116" data-execution_count="11">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PCA</span>
<span id="cb12-3"></span>
<span id="cb12-4">X_onet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack(onet_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>].to_numpy())</span>
<span id="cb12-5">X_abtx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack(abtx_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"embedding"</span>].to_numpy())</span>
<span id="cb12-6">X_all  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([X_onet, X_abtx])</span>
<span id="cb12-7"></span>
<span id="cb12-8">pca <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PCA(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-9">proj <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pca.fit_transform(X_all)</span>
<span id="cb12-10">coords_onet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proj[: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X_onet)]</span>
<span id="cb12-11">coords_abtx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> proj[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(X_onet) :]</span>
<span id="cb12-12"></span>
<span id="cb12-13">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>))</span>
<span id="cb12-14">plt.scatter(coords_onet[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], coords_onet[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"O*NET job titles"</span>)</span>
<span id="cb12-15">plt.scatter(coords_abtx[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], coords_abtx[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.6</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Donor-entered occupations"</span>)</span>
<span id="cb12-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PCA of Occupation Embeddings: O*NET vs Donor-entered"</span>)</span>
<span id="cb12-17">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Component 1"</span>)</span>
<span id="cb12-18">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Component 2"</span>)</span>
<span id="cb12-19">plt.legend()</span>
<span id="cb12-20">plt.tight_layout()</span>
<span id="cb12-21">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2025-08-02-language-model-embeddings-campaign-donors/index_files/figure-html/cell-12-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And in our higher-dimension space, we can calculate ad hoc similarities on any arbitrary job title someone might enter:</p>
<div id="cell-26" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="ef85c9d4-0725-44ce-bfe3-81ae2be42c31" data-execution_count="12">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> normalize(job_title):</span>
<span id="cb13-2">  ad_hoc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.tensor(</span>
<span id="cb13-3">      model.encode(</span>
<span id="cb13-4">          [job_title],</span>
<span id="cb13-5">          normalize_embeddings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb13-6">          convert_to_numpy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb13-7">          show_progress_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb13-8">      ),</span>
<span id="cb13-9">      device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device,</span>
<span id="cb13-10">  )</span>
<span id="cb13-11">  idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>((ad_hoc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> onet_t.T).argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb13-12">  <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>job_title<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> → </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>onet_df<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>at[idx, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Title"</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb13-13"></span>
<span id="cb13-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"code ninja"</span>))</span>
<span id="cb13-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uber"</span>))</span>
<span id="cb13-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GM"</span>))</span>
<span id="cb13-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Professor, Artist"</span>))</span>
<span id="cb13-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Postdoctoral Fellow"</span>))</span>
<span id="cb13-19"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DARE Officer"</span>))</span>
<span id="cb13-20"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Senator"</span>))</span>
<span id="cb13-21"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Comms Director"</span>))</span>
<span id="cb13-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dermatology"</span>))</span>
<span id="cb13-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"commodities trader"</span>))</span>
<span id="cb13-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"life insurance adjuster"</span>))</span>
<span id="cb13-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lumberjack"</span>))</span>
<span id="cb13-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cpa"</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>code ninja → Computer Programmers
uber → Taxi Drivers
GM → General and Operations Managers
Professor, Artist → Art, Drama, and Music Teachers, Postsecondary
Postdoctoral Fellow → Clinical Research Coordinators
DARE Officer → Police and Sheriff's Patrol Officers
Senator → Legislators
Comms Director → Public Relations Managers
dermatology → Dermatologists
commodities trader → Securities, Commodities, and Financial Services Sales Agents
life insurance adjuster → Claims Adjusters, Examiners, and Investigators
lumberjack → Fallers
cpa → Accountants and Auditors</code></pre>
</div>
</div>
<p>It’s not perfect. I don’t think I would have normalized <strong>Postdoctoral Fellow</strong> to <strong>Clinical Research Coordinators</strong>. This is where decisions we made in constructing the model start to show themselves. All those <code>aka</code> job title concatenations we did at the top affected how the language was modeled. Depending on your use case this could be fine; maybe you just need deterministic finite categories. You can play with the embedding calculation process to see how different strategies yield different resules.</p>
<p>As for our nurses:</p>
<div id="cell-28" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="f4243eb0-6ba7-46a8-8e78-4d9ae71fcbcc" data-execution_count="13">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nurse"</span>))</span>
<span id="cb15-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RN"</span>))</span>
<span id="cb15-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MSN"</span>))</span>
<span id="cb15-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ER Nurse"</span>))</span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(normalize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"home health nursing"</span>))</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>nurse → Registered Nurses
RN → Registered Nurses
MSN → Registered Nurses
ER Nurse → Registered Nurses
home health nursing → Registered Nurses</code></pre>
</div>
</div>
<p>Language models are pretty good at modeling language!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2025-08-02-language-model-embeddings-campaign-donors/</guid>
  <pubDate>Sat, 02 Aug 2025 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2025-08-02-language-model-embeddings-campaign-donors/pca-onet-donor-entered.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>GPT Finally Jumps Out of the System</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2025-04-21-openai-o4-mini-high-mu-puzzle/</link>
  <description><![CDATA[ 





<p>Well, they’ve done it. OpenAI released a model that can solve the <a href="https://en.wikipedia.org/wiki/MU_puzzle">MU Puzzle</a>. This has been my go-to test for GPTs since before ChatGPT was launched and models were only available in the Playground.</p>
<p>If you’re unfamiliar with the puzzle, it was introduced by <a href="https://en.wikipedia.org/wiki/Douglas_Hofstadter">Douglas Hofstadter</a> in his Pulitzer-winning book <a href="https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a>. The book explores how meaning can emerge from symbolic manipulation, and how formal systems like mathematics can be simultaneously powerful and fundamentally incomplete. The MU Puzzle, introduced early in the book, isn’t just a quirky game. It’s a microcosm of formal systems. It was designed to make you feel clever while gently exposing the limits of mechanical reasoning. And its rules are simple:</p>
<p>Suppose there are the symbols <code>M</code>, <code>I</code>, and <code>U</code> which can be combined to produce strings of symbols. The MU puzzle asks one to start with the axiomatic string <code>MI</code> and transform it into the string <code>MU</code> using any combination of the available transformation rules:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 4%">
<col style="width: 16%">
<col style="width: 59%">
<col style="width: 19%">
</colgroup>
<thead>
<tr class="header">
<th>Rule</th>
<th>Formal</th>
<th>Informal</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>x<code>I</code> → x<code>IU</code></td>
<td>Add <code>U</code> to the end of any string that currently ends in <code>I</code>.</td>
<td><code>MI</code> to <code>MIU</code></td>
</tr>
<tr class="even">
<td>2</td>
<td><code>M</code>x → <code>M</code>xx</td>
<td>Double the portion of the string that follows <code>M</code>.</td>
<td><code>MIU</code> to <code>MIUIU</code></td>
</tr>
<tr class="odd">
<td>3</td>
<td>x<code>III</code>y → x<code>U</code>y</td>
<td>Replace any single instance of the substring <code>III</code> with <code>U</code>.</td>
<td><code>MUIIIU</code> to <code>MUUU</code></td>
</tr>
<tr class="even">
<td>4</td>
<td>x<code>UU</code>y → xy</td>
<td>Remove any <code>UU</code>.</td>
<td><code>MUUU</code> to <code>MU</code></td>
</tr>
</tbody>
</table>
<p>If you’ve never seen this puzzle before, you should stop for a few minutes and think on it. Grab a pen and paper and see what you can come up with. I’ve tucked the solution behind this spoiler:</p>
<div class="callout callout-style-simple callout-note no-icon callout-titled">
<div class="callout-header d-flex align-content-center collapsed" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon no-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<span class="screen-reader-only">Note</span>Reveal Solution
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p><strong>Solution:</strong> It can’t be done! You might be grumpy that this was a trick question, or you might have tried a few steps and intuitively come to this conclusion. We’ll discuss more formally why the task is impossible later.</p>
</div>
</div>
</div>
<p>I like to use the MU Puzzle as a model test because until now, I’ve never seen any GPT come to the correct answer. Some of them stumble into the <em>expected</em> answer but give flawed explanations. Others come to the wrong answer, usually by violating one of the rules. Even now, <a href="https://openai.com/index/introducing-o3-and-o4-mini/">o3</a>, currently billed as, “our most powerful reasoning model that pushes the frontier across coding, math, science, visual perception, and more” fails the puzzle.</p>
<p>When I give the puzzle to a model, I swap in different letters and present the rules conversationally. I do this to try to defend against the model regurgitation from GEB or Wikipedia. In my case, <code>M</code> becomes <code>A</code>, <code>I</code> becomes <code>B</code>, and <code>U</code> becomes <code>C</code>.</p>
<p>My prompt:</p>
<div class="long-quote">
<p>Let’s play a game. You have three symbols: “A”, “B”, and “C” which you can combine to produce strings. You start with the string “AB” and your challenge is to transform it to the string “AC”. To transform it, you can use a series of transformation rules. You don’t have to use every rule, and you may use any rule multiple times. Here are the available transformation rules: Rule 1: You may add “C” to the end of any string that currently ends in “B”. For example, you may transform “AB” to “ABC”. Rule 2: You may double the portion of the string that follows “A”. For example, you may transform “ABC” to “ABCBC”. Rule 3: You may replace any single instance of the substring “BBB” with “C”. For example, you may transform “ACBBBC” to “ACCC”. Rule 4: You may remove any single instance of the substring “CC”. For example, you may transform “ACCC” to “AC”. Your task is to come up with a series of transformation steps to convert the string “AB” to “AC”. Please share what steps can solve this.</p>
</div>
<p>After <a href="https://chatgpt.com/share/68070559-e284-8002-9f44-d0bd8ace53e1">thinking</a> for <strong>3 minutes and 11 seconds</strong> o3 declared victory:</p>
<div class="long-quote">
<p>Here’s a clean sequence that turns <code>AB</code> into <code>AC</code>, using only the allowed rules. I annotate each step with the rule that was applied.</p>
<table class="caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 27%">
<col style="width: 51%">
</colgroup>
<thead>
<tr class="header">
<th>Step</th>
<th>String</th>
<th>What happened</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td><code>AB</code></td>
<td>start</td>
</tr>
<tr class="even">
<td>1</td>
<td><code>ABB</code></td>
<td>Rule&nbsp;2 – doubled everything after <code>A</code> (“B” → “BB”)</td>
</tr>
<tr class="odd">
<td>2</td>
<td><code>ABBBB</code></td>
<td>Rule&nbsp;2 again – doubled “BB” → “BBBB”</td>
</tr>
<tr class="even">
<td>3</td>
<td><code>ABBBBBBBB</code></td>
<td>Rule&nbsp;2 a third time – doubled “BBBB” → “BBBBBBBB” (now 8&nbsp;B’s in a row)</td>
</tr>
<tr class="odd">
<td>4</td>
<td><code>ACBBBBBB</code></td>
<td>Rule&nbsp;3 – replaced the first “BBB” with “C”</td>
</tr>
<tr class="even">
<td>5</td>
<td><code>ACCBBB</code></td>
<td>Rule&nbsp;3 – replaced the next “BBB” with “C”</td>
</tr>
<tr class="odd">
<td>6</td>
<td><code>ACCC</code></td>
<td>Rule&nbsp;3 – replaced the last “BBB” with “C”</td>
</tr>
<tr class="even">
<td>7</td>
<td><code>AC</code></td>
<td>Rule&nbsp;4 – removed one “CC” pair</td>
</tr>
</tbody>
</table>
<p>After step&nbsp;7 the string is exactly <code>AC</code>, so the puzzle is solved.</p>
</div>
<p>See the problem?</p>
<p>Step Four violates Rule 3. After Step Three, the string is <code>ABBBBBBBB</code>. o3 then claimed to apply “Rule 3 – replaced the first ‘BBB’ with ‘C’” to yield <code>ACBBBBBB</code>. But it didn’t replace the first ‘BBB’. It only replaced the first ‘BB’.</p>
<p>This kind of error is characteristic of a broader failure mode seen across GPT models: a tendency toward <em>approximate rule-matching</em> rather than strict symbolic fidelity. The model recognizes the general shape of a rule, in this case, something about repeating <code>B</code>s being collapsible, but it doesn’t reliably enforce the exact conditions. Instead of replacing a full <code>BBB</code> triplet, it replaced only two <code>B</code>s, violating Rule 3 while still producing something that looks right. This isn’t just a hallucination; it’s more like a form of <em>syntactic overgeneralization</em>. It suggests that the model is reasoning through fuzzy analogies to rules, rather than maintaining crisp internal representations of symbolic constraints.</p>
<p>This is exactly the kind of reasoning Hofstadter warned about: systems that operate on syntactic structure without deeper semantic control can seem smart, until they aren’t.</p>
<p>The other bad answer I’ve seen is the model will try for a while, generating endlessly long strings, and then just give up. It’ll declare “unsolvable!” on the grounds of it tried for a while.</p>
<p>But <strong>o4-mini-high</strong> got it. After <a href="https://chatgpt.com/share/68070581-856c-8002-833d-a7385adb7c02">thinking</a> for <strong>1 minute and 40 seconds</strong>:</p>
<div class="long-quote">
<p>Let’s first look at what these rules do to the number of&nbsp;B’s in your string:</p>
<ul>
<li><strong>Rule&nbsp;2</strong> (doubling after&nbsp;A) takes a string with (b)&nbsp;B’s and turns it into one with (2b)&nbsp;B’s.<br>
</li>
<li><strong>Rule&nbsp;3</strong> (replacing “BBB” with “C”) removes exactly&nbsp;3&nbsp;B’s.<br>
</li>
<li>Rules&nbsp;1 and&nbsp;4 never touch the B‑count.</li>
</ul>
<p>So if you start with exactly&nbsp;1&nbsp;B (in “AB”), then after using Rule&nbsp;2 (k)&nbsp;times and Rule&nbsp;3 (m)&nbsp;times (in any order), the total B‑count will be<br>
<img src="https://latex.codecogs.com/png.latex?%0A%20%20%201%5Ccdot2%5Ek%20%5C;-%5C;3%5C,m%0A"> because you’ve doubled the B’s (k)&nbsp;times and subtracted three B’s each time you applied Rule&nbsp;3. To end up with zero B’s (as you must, since “AC” has no B’s) you’d need<br>
<img src="https://latex.codecogs.com/png.latex?%0A%20%20%202%5Ek%20%5C;=%5C;3%5C,m.%0A"> But <img src="https://latex.codecogs.com/png.latex?2%5Ek"> is never divisible by&nbsp;3, so there is <strong>no</strong> choice of nonnegative integers <img src="https://latex.codecogs.com/png.latex?k,m"> making <img src="https://latex.codecogs.com/png.latex?2%5Ek=3m">. In other words, you can never get rid of that single initial B; no finite sequence of these rules will turn “AB” into “AC.”</p>
<p><strong>Conclusion:</strong><br>
There is <strong>no</strong> sequence of applications of Rules&nbsp;1–4 that transforms “AB” into “AC.”</p>
</div>
<p>Not only is this the correct answer, but it’s the correct <em>reasoning</em> behind the answer.</p>
<p>Hofstadter used the MU Puzzle to demonstrate the contrast between interpretation on the syntactic level of symbols and on the semantic level of meanings. This seems very relevant to studying LLMs!</p>
<p>When dealing only in syntax there is nothing that would cause the LLM to infer the puzzle’s insolvability. It could churn away within the system, generating longer and longer valid strings, and never actually show that <code>MU</code> (or, <code>AC</code>) can’t be created.</p>
<p>If you’re like me, you probably tried a number of different iterations before eventually suspecting that the puzzle might not have a solution. Hofstadter referred to this as, “jumping out of the system”, the idea of reasoning about the system, rather than working within it. Depending on how long you toiled at the game, you might have discovered the ability (or inability) to divide by 3 is key to the process. And at that point, you would be thinking on the semantic level of the system.</p>
<p>Much of GEB is built around the idea of the MU Puzzle, and it’s used as a grounding point to explain <a href="https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems">Gödel’s Incompleteness Theorems</a>. But an approachable explanation to its insolvability is:</p>
<ul>
<li>Our desired string contains zero <code>I</code>s; 0 is divisible by 3.</li>
<li>Our starting string contains one <code>I</code>; 1 is not divisible by 3</li>
<li>Only Rule 2 and Rule 3 change the number of <code>I</code>s.</li>
<li>Rule 2 doubles the number of <code>I</code>s.</li>
<li>Doubling a number that is not divisible by 3 does not make it divisible by 3.</li>
<li>Rule 3 reduces the number of <code>I</code> by 3.</li>
<li>Subtracting 3 from a number that is not divisible by 3 does not make it divisible by 3.</li>
</ul>
<p>Since there is no series of transformations that make the number of <code>I</code>s divisible by 3, there is no series of transformations that produce <code>MU</code>.</p>
<p>Which is exactly what <strong>o4-mini-high</strong> said!</p>
<p>This echoes Hofstadter’s deeper point: the MU Puzzle is a toy model for Gödel’s Incompleteness Theorems. Within the formal system of applying the four rules mechanically, there’s no way to derive the string <code>MU</code>. But from outside the system, we can <em>see</em> and <em>prove</em> that no such derivation exists. The puzzle’s unsolvability is a true statement that cannot be proven from within the rules themselves. That’s Gödel’s move: constructing a statement that is unprovable from within the system, yet evidently true when viewed from a meta-level. What’s striking is that <strong>o4-mini-high</strong> not only refused to be tricked into endless symbol manipulation, but it also <em>appeared</em> to jumped to this higher level of reasoning — the “semantic” frame — and explained <em>why</em> the goal was unreachable.</p>
<p>I’m not claiming AGI. Maybe the tensors just memorized enough puzzles of this shape. But I’ve tested this one on dozens of models over the years, and this is the first time I’ve seen a GPT both identify the impossibility <em>and</em> explain why. I think that’s pretty cool.</p>
<p>Computers!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2025-04-21-openai-o4-mini-high-mu-puzzle/</guid>
  <pubDate>Mon, 21 Apr 2025 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2025-04-21-openai-o4-mini-high-mu-puzzle/openai-o4-mini-high-mu-puzzle.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Part 2: Austin Texas, Hot or Not?</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-12-26-austin-hot-or-not-part-2/</link>
  <description><![CDATA[ 





<p>Over the Summer I <a href="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/">wondered</a> whether Austin was having a cooler season than normal. Through the magic of public weather data, I was able to discover that the answer was mostly yes! But I also wrote that post at the end of July, and a lot of 2024 was still left to go. So here I am, sitting at my kitchen counter the day after Christmas, ready to definitively answer the question for the year: Austin, hot or not? Code for how all of this (mostly) works is in the original post, so this update is relatively brief with only the graphs.</p>
<p>First, I wanted to quickly glance at 2023 vs 2024. For a little bit there, this Summer was cooler than last Summer. But then we had a pretty hot week in late August. Year over year, the Summer looks like it was generally cooler than last year, but the Fall has been slightly warmer:</p>
<div id="cell-7" class="cell" data-execution_count="114">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-12-26-austin-hot-or-not-part-2/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>But comparing two years doesn’t really reveal a trend (or lack of trend) so here are 2023 and 2024 highlighted over the previous ten years. It’s kindof a mess, like if Hulk Hogan couldn’t color within the lines. But if you squint you can somewhat pick out some insights.</p>
<div id="cell-9" class="cell" data-execution_count="113">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-12-26-austin-hot-or-not-part-2/index_files/figure-html/cell-7-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So here’s the final viz I landed on. For most of the Winter and Spring, Austin was oscillating around its 10-year trailing average maximum daily temperature. Then as Summer hit, max temperatures dipped a little bit below average, spiked up in mid August, and then fell again slightly below average until September. From there we’ve been mostly above average!</p>
<div id="cell-12" class="cell" data-execution_count="112">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-12-26-austin-hot-or-not-part-2/index_files/figure-html/cell-9-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As a final glimpse, we can see how many 2024 days (through December 23, my last day of available data) have crossed above the average max temperature, and how many days stayed below:</p>
<div id="cell-14" class="cell" data-execution_count="109">
<div class="cell-output cell-output-stdout">
<pre><code>Above Average: 219
Below Average: 137</code></pre>
</div>
</div>
<p>Thermometers!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-12-26-austin-hot-or-not-part-2/</guid>
  <pubDate>Thu, 26 Dec 2024 06:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-12-26-austin-hot-or-not-part-2/2024-austin-texas-max-temperatures.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>I Cracked And Modded the DNC Bracelet</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/</link>
  <description><![CDATA[ 





<p><strong>Heads up:</strong> This post has some videos that contain flashing lights.</p>
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/00-dnc-teardown.jpeg" class="img-fluid"></p>
<p>If you managed to get a seat on the final night of the 2024 Democratic National Convention (I got there at 2:30 pm and still had to rely on seat-saving friends!) you probably also found an LED bracelet wrapped around your arm rest. I’m bad at remembering to take photos of things in the moment, so here’s mine over my kitchen counter:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/01-wristband.jpeg" class="img-fluid figure-img"></p>
<figcaption>A photo of my LED DNC bracelet that I took later</figcaption>
</figure>
</div>
<p>If you’ve been to a large concert in recent years, you may have seen this before. It’s designed to give the audience an “immersive” experience with the entertainment,<sup>1</sup> usually by activating the lights at key moments. At the 2024 DNC, that key moment of audience activation was when Vice President Kamala Harris walked out to deliver her speech. I didn’t take a photo of the crowd during that time, but everyone lit up in twinkling red, white, and blue lights. It was fun.</p>
<p>I used to work on <a href="https://lisnr.com/">immersive audience engagement tech</a> (that has since pivoted to retail payment tech), so I was curious how this worked. Luckily, I took the bracelet home so I could find out!</p>
<p>The first thing that caught my eye was <strong>PIXMOB</strong> engraved onto the back of the plastic case.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/02-pixmob.jpeg" class="img-fluid figure-img"></p>
<figcaption>PIXMOB engraved on the back of the DNC bracelet case</figcaption>
</figure>
</div>
<p>I had never heard of PIXMOB, but their <a href="https://pixmob.com/products/led-wristbands">website</a> gives some immediate answers. Apparently they offer three different wristband products. All of them look identical so I wasn’t sure which one I had. My first thought — as is often the case when I’m trying to learn something election-related — was to dig through some FEC filings. I spotted in the PIXMOB <a href="https://pixmob.com/terms-and-conditions">Terms and Conditions</a> that the company is actually called <strong>ESKI Inc.</strong> I spent only a few minutes clicking through the <a href="https://projects.propublica.org/itemizer/committee/C00827022/2024">Democratic National Convention Committee’s expenditures</a> without finding any mention of PIXMOB or ESKI. I suspect that the Convention Committee retained an events vendor that was a middleman to this hardware.</p>
<p>So I grabbed my <a href="https://www.adafruit.com/product/2414">Jimmy</a> and cracked the thing open.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/03-open.jpeg" class="img-fluid figure-img"></p>
<figcaption>Opened DNC bracelet</figcaption>
</figure>
</div>
<p>Like most consumer electronics, the thing is mostly battery! I actually wasn’t expecting AAAs, but it’s helpful to know we’re working with 3 volts and I can easily swap some in if they die.</p>
<p>At this point, I also had the <a href="https://en.wikipedia.org/wiki/PixMob">PixMob Wikipedia page open</a> (is it PIXMOB or PixMob?). It features <a href="https://en.wikipedia.org/wiki/PixMob#/media/File:PixMob_PCB_and_case,_used_in_Zurich_2024.jpg">another cracked PixMob wristband</a> that was apparently used at Taylor Swift shows. That one also sported a white PCB, but used button cell batteries.</p>
<p>Besides the batteries, I also noticed that the Taylor Swift wristband listed a <code>Palm</code> (like palm tree) version number, while mine has a <code>Diamond</code> (like shiny carbon) version number:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/04-diamond.jpeg" class="img-fluid figure-img"></p>
<figcaption>Opened DNC bracelet showing the Diamond version</figcaption>
</figure>
</div>
<p>They both have a copyright on them, too, and at some point I want to ask an IP attorney whether you can actually copyright a PCB or if you can only copyright their <a href="https://en.wikipedia.org/wiki/Gerber_format">Gerber files</a>. I would have guessed the appropriate protection would be a patent. I also just learned about the <a href="https://en.wikipedia.org/wiki/Semiconductor_Chip_Protection_Act_of_1984">Semiconductor Chip Protection Act of 1984</a>. But that’s a topic for another time.</p>
<p>I tried searching <a href="https://fccid.io/2ADS4">ESKI’s FCC filings</a> for some more hints about the <code>Diamond</code> board, but didn’t find anything specific. But I did find some <a href="https://fccid.io/2ADS4WASH">very interesting documents about an accompanying infrared transmitter</a>. I bet those, or something like those, were all over the the arena.</p>
<p>Moving on, the next thing I noticed about my wristband is that it has four LEDs:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/05-four-LEDs.jpeg" class="img-fluid figure-img"></p>
<figcaption>Opened DNC bracelet showing four LEDs</figcaption>
</figure>
</div>
<p>This means I probably have the <a href="https://pixmob.com/products/led-wristbands/x4">PixMob X4</a>, dubbed “our brightest wristband”.</p>
<p>Now that I knew what I was working with, I turned back to web search to see what prior work has happened with cracking and modding these things. Turns out, I’m not the first person to break one of these things open. <a href="https://www.youtube.com/watch?v=ziNF0seaw1k">There</a> <a href="https://www.youtube.com/watch?v=50LL-n7xZp8">are</a> <a href="https://www.youtube.com/watch?v=TuQImukbnRg">so</a> <a href="https://www.youtube.com/watch?v=TlK1jrO30PA">many</a> videos of people getting these things to obey. And there are some <a href="https://github.com/danielweidman/pixmob-ir-reverse-engineering?tab=readme-ov-file">really cool GitHub repos</a> demonstrating how to use <a href="https://www.arduino.cc/">Arduinos</a> or <a href="https://flipperzero.one/">Flipper Zeros</a> to replay actual IR instructions to the device.</p>
<p>At this point, I realized I wasn’t about to break any news with my teardown. But I wasn’t doing this to break news. I was doing this to break into the device. Also, I didn’t find anyone doing this with a <code>Diamond</code> board device. I wasn’t invested enough to turn this into SBC or microcontroller project. I just wanted to do a minimal mod. So I pushed forward. And by that I mean I started poking around.</p>
<p>That small, bulbous, semiconductor in the middle of the board is the Infrared Receiver. It can detect infrared signal, like those emitted from TV remotes. The PixMob website says that this wristband is, “infrared activated” so this seemed like a great entrypoint. I have no idea what kind of IR receiver it is, so I looked up <a href="https://www.sparkfun.com/products/10266">the first one I could find on Sparkfun</a> and consulted the <a href="https://www.sparkfun.com/datasheets/Sensors/Infrared/tsop382.pdf">datasheet</a>. I learned a couple things:</p>
<ul>
<li>the three pins are <img src="https://latex.codecogs.com/png.latex?V_%7Bout%7D">, <img src="https://latex.codecogs.com/png.latex?GND">, and <img src="https://latex.codecogs.com/png.latex?V_%7Bcc%7D"></li>
<li>the <img src="https://latex.codecogs.com/png.latex?V_%7Bout%7D"> pin is active low, which means its voltage drops when activated</li>
</ul>
<p>There was no guarantee that my IR receiver also operated this way, but spoiler alert: it did!</p>
<p>I grabbed a jumper cable and touched one end to the IR’s <img src="https://latex.codecogs.com/png.latex?GND"> pin and ran the other side across one of the LED’s cathodes:</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="06-led-cathode.mp4"></video></div>
<p>Great. So the batteries still have some juice (a lot of posts suggested this thing would be dead by the time I got it home) and I know the polarity and pinouts of the LEDs. And all the LEDs are in series, so that’s nice. I also learned that the LEDs are interrupted in their path to ground, not their path to positive voltage, which is extra nice since the IR <img src="https://latex.codecogs.com/png.latex?V_%7Bout%7D"> is active low. That means I can create a voltage drop from the LED’s anode to cathode by tying the cathode to <img src="https://latex.codecogs.com/png.latex?V_%7Bout%7D">, so when the IR receiver gets a signal and pulls <img src="https://latex.codecogs.com/png.latex?V_%7Bout%7D"> low, the LED should light up. And so I did! I grabbed the first remote I could find in my living room, and pointed it at the receiver:</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video2" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="07-led-ir.mp4"></video></div>
<p>It blinks! You’ll notice that the LEDs aren’t as bright as when they had a direct jump to ground. That’s because <img src="https://latex.codecogs.com/png.latex?V_%7Bout%7D"> is still higher than <img src="https://latex.codecogs.com/png.latex?GND"> so the voltage difference is a lot smaller. Which means the light doesn’t get as bright.</p>
<p>That’s okay! This is a cheap crack and mod, so onward. After a bit more poking on the board, I found a surface-mounted resistor in series with the blue pinout from the LEDs. I soldered the IR signal jumper to that resistor, because we’re Team Blue.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/08-soldered.jpeg" class="img-fluid figure-img"></p>
<figcaption>My crude soldering from the IR signal pin to the blue LED resistor</figcaption>
</figure>
</div>
<p>Not my best work. I’m better at through-hole soldering. But it works!</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video3" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="09-soldered-ir.mp4"></video></div>
<p>I closed the case back up, shut myself in a windowless bathroom, turned off the lights,<sup>2</sup> and clicked my remote:</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video4" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="10-dark-ir.mp4"></video></div>
<p>Now all I need to do is blast Beyoncé’s <em>“Freedom”</em> and I can relive the 2024 Democratic National Convention whenever I want.</p>
<p>I learned a lot!</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Neil Postman, I have forsaken thee.↩︎</p></li>
<li id="fn2"><p>Said, “Bloody Mary” three times↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/</guid>
  <pubDate>Wed, 28 Aug 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-08-28-cracking-modding-dnc-bracelet/00-dnc-teardown.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>ActBlue Isn’t Selling Your Data</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-08-25-actblue-isnt-selling-your-data/</link>
  <description><![CDATA[ 





<p>You constantly see posts among Democratic supporters that look something like this:</p>
<blockquote class="blockquote">
<p>I’m not donating via ActBlue anymore because they sell my data and I get spam.</p>
</blockquote>
<p>This misunderstanding not only damages trust in one of our most important fundraising tools but also obscures where the real issue lies. It is true that your data is being sold. And it is true that you’re getting spam. But ActBlue didn’t sell your data because ActBlue doesn’t own your data. This is written all over their website:</p>
<p><a href="https://help.actblue.com/hc/en-us/articles/19342854603287-Does-ActBlue-share-my-personal-information-including-email-address-and-phone-number">Does ActBlue share my personal information, including email address and phone number?</a></p>
<blockquote class="blockquote">
<p>We never sell or share your personal information with anyone beyond the group you gave to, and ActBlue will never text you.</p>
</blockquote>
<p><a href="https://help.actblue.com/hc/en-us/articles/19343256425367-Why-am-I-receiving-emails-and-or-texts-from-campaigns-and-organizations-after-chipping-in-on-ActBlue">Why am I receiving emails and/or texts from campaigns and organizations after chipping in on ActBlue?</a></p>
<blockquote class="blockquote">
<p>We never sell or share your personal information with anyone beyond the group you gave to, and ActBlue will never text you. Even if you get a link to donate on ActBlue in a text or email, it comes from a group that uses our tools, not us.</p>
</blockquote>
<p><a href="https://support.actblue.com/campaigns/faq/how-can-i-report-unwanted-communications-from-campaigns-or-organizations-or-a-potential-violation-of-actblues-terms-and-policies/">How can I report unwanted communications from campaigns or organizations or a potential violation of ActBlue’s terms and policies?</a></p>
<blockquote class="blockquote">
<p>When you donate using our platform, we do not sell your contact information or share it with third parties, except the group you donated to, or in certain circumstances, such as at your direction or when required by law.</p>
</blockquote>
<p>And in the <a href="https://secure.actblue.com/privacy">Privacy Policy</a>:</p>
<blockquote class="blockquote">
<p>ActBlue does not sell your contact information to third parties, and we don’t send solicitations, such as text messages or emails, on behalf of the individuals and organizations that use ActBlue for fundraising, including political committees and campaigns.</p>
</blockquote>
<p>As someone who has built campaign tech infrastructure for two Democratic presidential nominees, I can confirm first-hand that the only data that campaigns are getting directly from ActBlue are the records of their own donors. Misunderstanding its role — or the role of any donoation processor — undermines our collective efforts.</p>
<p>Other campaigns are still getting your data. When you donate to the campaign of Candidate X through ActBlue, the campaign of Candidate X owns that data. ActBlue provides the data to them, and they are free to use it as they see fit. The campaign of Candidate X is often (but not always!) selling it to other campaigns and electoral organizations.</p>
<p>You can see it happening in FEC filings. Here’s the first example I plucked: <a href="https://ballotpedia.org/John_Delaney_(Maryland)">Friends of John Delaney</a> was the committee name of John Delaney’s 2020 presidential campaign. And here’s <a href="https://docquery.fec.gov/cgi-bin/forms/C00508416/1223362/sb/ALL">Schedule B (itemized disbursements)</a> for one of their quarterly filings. Now smack <code>CMD+F</code> and search for <code>List Purchase</code>. You’ll spot voter data purchases from <a href="https://ballotpedia.org/Nate_Boulton">Boulton For Iowa</a>, <a href="https://ballotpedia.org/Thomas_Heckroth">Heckroth For Congress</a>, <a href="https://ballotpedia.org/Fred_Hubbell">Hubbel For Governor</a>, and <a href="https://ballotpedia.org/Pete_D%27Alessandro">Pete For Iowa</a> (no, not that Pete).</p>
<p>Campaigns share data for all sorts of reasons. Sometimes their campaign is over and they want to be a team player. Sometimes their campaign is over and they have outstanding debts and they need some cash to balance the books. Sometimes they move from a primary to a general election cycle and they are working closely with the affiliated federal committee or state party through coordinated committees or victory funds.</p>
<p>But again, that’s not ActBlue’s doing.</p>
<p>💡 <strong>Quick aside:</strong> ActBlue is reporting donations to the Federal Election Commission, as is required in their role as a conduit for campaign funds. There’s been concern about the public availability of this data, but it’s important to note that <a href="https://www.fec.gov/updates/sale-or-use-contributor-information/">it’s illegal for campaigns to use FEC data for soliciations</a>:</p>
<blockquote class="blockquote">
<p>To protect the privacy of individual contributors, the [Federal Election Campaign Act] prohibits the sale or use of any information about those donors, including their names and addresses, for the purpose of soliciting contributions or for commercial purposes. Commission regulations also prohibit the use of this information to solicit donations, including charitable donations.</p>
</blockquote>
<p>One of my favorite “fun facts” about US election data is salting. Committees may sprinkle throughout — or, “salt” — each report with up to ten fictitious contributor names:</p>
<blockquote class="blockquote">
<p>The committee itemizes each fictitious contribution on a Schedule A, providing a real address for each fictitious name (such as the address of a committee employee). The committee then adjusts its subtotals for itemized and unitemized contributions accordingly on the Detailed Summary Page. If a solicitation or commercial mailing is sent to one of the fictitious names, the committee will know that someone has used the names of contributors disclosed on its reports and may file a complaint with the FEC.</p>
</blockquote>
<p>The FEC even made a <code>#FECsplanation</code> (rhymes with explanation) video about it:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/SSVGrpjQX4o" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Kinda neat that the federal government advises campaigns to honeypot their data.</p>
<p>Anyway, yeah, your data is being traded around between campaigns. So when you donate to some campaign in New York it’s possible it’ll land in the hands of some campaign in Utah. And I agree it’s a pretty crummy to get spammed with emails and texts from candidates you’ve never heard of from communities you’ve never even visited. But that’s not ActBlue’s fault.</p>
<p>Voters and donors don’t actually care which step in the data chain of custody is to blame for the barrage of irrelevant messages. But those of us who work on Democratic tech infrastructure sure do care.</p>
<p>Campaigns actually don’t want to waste money, resources, and time on poorly-performing lists. With the right infrastructure, smart campaigns are actually quite good at identifying and reaching likely supporters with effective messages. The problem isn’t a lack of intention, but rather the inconsistency and uneven distribution of infrastructure across the Democratic ecosystem. ActBlue is a very robust piece of Democratic infrastructure. That’s not where our focus should be for this problem.</p>
<p>Better infrastructure isn’t just a matter of efficiency. It’s a necessity for maintaining trust and engagement with supporters. When campaigns have access to robust, well-maintained systems, they can target their outreach more precisely, reducing the overreliance on broad, untargeted lists that lead to spam and voter disengagement. And it isn’t just about minimizing annoyance; it’s about maximizing impact and ensuring that every dollar spent and every message sent has the greatest possible chance of reaching and resonating with the right people.</p>
<p>The challenge is keeping that infrastructure viable cycle-over-cycle, and extending its reach across the entire Democratic landscape. As we work towards building smarter campaigns, it’s vital that we advocate for, and invest in, the infrastructure that ensures our outreach is both effective and respectful. We have a lot more work to do on that front.</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-08-25-actblue-isnt-selling-your-data/</guid>
  <pubDate>Sun, 25 Aug 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-08-25-actblue-isnt-selling-your-data/fec-list-purchase.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>CSVs Are Kinda Bad. DSVs Are Kinda Good.</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/</link>
  <description><![CDATA[ 





<p>CSVs are kinda bad. We know this, but sometimes it’s helpful to remember why they’re kinda bad. Maybe you need to work with CSVs and you’re using Python, because Python is kinda good. And someone else somewhere wrote a CSV:</p>
<div id="cell-2" class="cell" data-execution_count="209">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> csv</span>
<span id="cb1-2"></span>
<span id="cb1-3">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-4">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comment'</span>],</span>
<span id="cb1-5">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'She said, "Hello" and waved.'</span>],</span>
<span id="cb1-6">]</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb1-9">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, quoting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csv.QUOTE_MINIMAL)</span>
<span id="cb1-10">    writer.writerows(data)</span></code></pre></div></div>
</div>
<p>And you read the CSV:</p>
<div id="cell-4" class="cell" data-execution_count="210">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-2">    reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.reader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, quoting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csv.QUOTE_NONE)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Name', 'Comment']
['Alice', '"She said', ' ""Hello"" and waved."']</code></pre>
</div>
</div>
<p>Oh darn, the data had a <code>"</code> character inside the comment field and it was escaped by doubling it <code>""</code> which is one way to do that but you didn’t know so your reader is broken.</p>
<p>Or maybe they wrote it this way:</p>
<div id="cell-6" class="cell" data-execution_count="211">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comment'</span>],</span>
<span id="cb4-3">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'She said, "Hello" and waved.'</span>],</span>
<span id="cb4-4">]</span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb4-7">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, quoting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csv.QUOTE_NONE, escapechar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-8">    writer.writerows(data)</span></code></pre></div></div>
</div>
<p>And you read the CSV:</p>
<div id="cell-8" class="cell" data-execution_count="212">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb5-2">    reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.reader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, quoting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csv.QUOTE_NONE,)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb5-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Name', 'Comment']
['Alice', 'She said\\', ' \\"Hello\\" and waved.']</code></pre>
</div>
</div>
<p>Oh darn, you didn’t get the escape character correct so now your’ve got a bunch of malformed data.</p>
<p>Or maybe they wrote this CSV with a <code>|</code> delimiter because people don’t type <code>|</code> very often:</p>
<div id="cell-10" class="cell" data-execution_count="213">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>],</span>
<span id="cb7-3">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'100'</span>]</span>
<span id="cb7-4">]</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb7-7">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'|'</span>)</span>
<span id="cb7-8">    writer.writerows(data)</span></code></pre></div></div>
</div>
<p>And you read the CSV:</p>
<div id="cell-12" class="cell" data-execution_count="214">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb8-2">    reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.reader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, delimiter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>)</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb8-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Name|Score']
['Alice|100']</code></pre>
</div>
</div>
<p>Oh darn, you didn’t know they were being clever with the delimiter so it didn’t break up the fields at all.</p>
<p>Or maybe you got a CSV from someone who uses a Windows machine and so they tend to use <code>\r\n</code> for newlines:</p>
<div id="cell-14" class="cell" data-execution_count="215">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb10-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Score'</span>],</span>
<span id="cb10-3">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'100'</span>]</span>
<span id="cb10-4">]</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb10-7">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb10-8">    writer.writerows(data)</span></code></pre></div></div>
</div>
<p>And you, on a not-Windows machine, read the CSV:</p>
<div id="cell-16" class="cell" data-execution_count="216">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb11-2">    reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.reader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>)</span>
<span id="cb11-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb11-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Name', 'Score']
[]
['Alice', '100']
[]</code></pre>
</div>
</div>
<p>Oh darn, you didn’t anticipate that newlines might be different across platforms, so now every other line in your data is blank.</p>
<p>But then maybe you figure that out and you anticipate the <code>\r\n</code>, but then some newlines find their way into the input data:</p>
<div id="cell-18" class="cell" data-execution_count="217">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb13-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comment'</span>],</span>
<span id="cb13-3">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bob'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is a multi-line comment</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">spanning two lines.'</span>]</span>
<span id="cb13-4">]</span>
<span id="cb13-5"></span>
<span id="cb13-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'w'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb13-7">    writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.writer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, quoting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csv.QUOTE_NONE, escapechar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb13-8">    writer.writerows(data)</span></code></pre></div></div>
</div>
<p>And you read the CSV:</p>
<div id="cell-20" class="cell" data-execution_count="218">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.csv'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, newline<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb14-2">    reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> csv.reader(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, quoting<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>csv.QUOTE_NONE, escapechar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reader:</span>
<span id="cb14-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Name', 'Comment']
['Bob', 'This is a multi-line comment\r\r']
['spanning two lines.']</code></pre>
</div>
</div>
<p>Oh darn, you’ve got <code>CR</code> and line breaks and it’s all a mess.</p>
<p>But then maybe you find the Python documentation <a href="https://docs.python.org/3/library/csv.html#id4">says</a> there’s this one weird trick to handle newlines:</p>
<blockquote class="blockquote">
<p>If <code>newline=''</code> is not specified, newlines embedded inside quoted fields will not be interpreted correctly, and on platforms that use <code>\r\n</code> linendings on write an extra <code>\r</code> will be added. It should always be safe to specify <code>newline='</code>’, since the csv module does its own (universal) newline handling.</p>
</blockquote>
<p>And then you go look up what <a href="https://docs.python.org/3/glossary.html#term-universal-newlines">universal newlines</a> are.</p>
<p>And then you find out that there are different <a href="https://docs.python.org/3/library/csv.html#csv.Dialect">Dialects</a> of CSVs.</p>
<p>And then you learn that Python has a <a href="https://docs.python.org/3/library/csv.html#csv.Sniffer">Sniffer</a> that claims it can deduce the CSV format for you.</p>
<p>And then you realize that the data format needs its format deduced and so now you have to become The Joker.</p>
<p>The uninitiated reader might say, “hah, Python is kinda bad!” but actually Python is kinda good! The standard <code>csv</code> module <em>has</em> to handle all these formatting options because CSVs are all one big edge case. And CSVs are all one big edge case because the decision to use commas and tabs and pipes and quotes and newlines to structure the data directly conflict with possible values of the data itself. And so we have to do escaping nonsense and quoting nonsense and line terminator nonsense.</p>
<p>We could skip all of this if we just used a proper delimiter. ASCII has this! Go pop open any ASCII character table and you’ll find these <a href="https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text">gems</a>:</p>
<ul>
<li><strong>28</strong> (FS) : file separator</li>
<li><strong>29</strong> (GS) : group separator</li>
<li><strong>30</strong> (RS) : record separator</li>
<li><strong>31</strong> (US) : unit separator</li>
</ul>
<p>And we don’t even need all four of them. If we used <code>31</code> as a field delimiter and <code>30</code> instead of newlines, we solve every single edge case from above. Why? Because these are non-printing characters that should never appear in a text-stream data set.</p>
<p>Let’s try it out. Writing delimiter-separated values (I made up that name and file extension) data is very easy:</p>
<div id="cell-22" class="cell" data-execution_count="219">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb16-2"></span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DSV():</span>
<span id="cb16-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb16-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> delimiter(cls) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>:</span>
<span id="cb16-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1F</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb16-8">    </span>
<span id="cb16-9">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb16-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> record_separator(cls) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span>:</span>
<span id="cb16-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\x1E</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb16-12">    </span>
<span id="cb16-13">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb16-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> encoding(cls) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb16-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span></span>
<span id="cb16-16"></span>
<span id="cb16-17"></span>
<span id="cb16-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb16-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DSVWriter(DSV):</span>
<span id="cb16-20">    output_file: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb16-21"></span>
<span id="cb16-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> write(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb16-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.output_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'wb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb16-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data:</span>
<span id="cb16-25">                encoded_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delimiter.join(</span>
<span id="cb16-26">                    field.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> field <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row</span>
<span id="cb16-27">                )</span>
<span id="cb16-28">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.write(encoded_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.record_separator)</span>
<span id="cb16-29"></span></code></pre></div></div>
</div>
<p>The reader takes a bit more work to implement, since we need to buffer our input and split on our control characters:</p>
<div id="cell-24" class="cell" data-execution_count="220">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb17-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> DSVReader(DSV):</span>
<span id="cb17-3">    input_file: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb17-4">    chunk_size : <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1024</span></span>
<span id="cb17-5">    _buffer: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bytes</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">b""</span></span>
<span id="cb17-6"></span>
<span id="cb17-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb17-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.input_file, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb17-9">            chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chunk_size)</span>
<span id="cb17-10">            </span>
<span id="cb17-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> chunk:</span>
<span id="cb17-12">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> chunk</span>
<span id="cb17-13"></span>
<span id="cb17-14">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process complete records in the buffer</span></span>
<span id="cb17-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.record_separator <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._buffer:</span>
<span id="cb17-16">                    record, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._buffer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._buffer.split(</span>
<span id="cb17-17">                        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.record_separator,</span>
<span id="cb17-18">                        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb17-19">                    )</span>
<span id="cb17-20">                    fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> record.split(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delimiter)</span>
<span id="cb17-21">                    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([field.decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> field <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fields])</span>
<span id="cb17-22">                </span>
<span id="cb17-23">                chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.chunk_size)</span>
<span id="cb17-24"></span>
<span id="cb17-25">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Process any remaining data in the buffer</span></span>
<span id="cb17-26">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._buffer:</span>
<span id="cb17-27">                fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._buffer.split(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.delimiter)</span>
<span id="cb17-28">                <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([field.decode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> field <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fields])</span></code></pre></div></div>
</div>
<p>And now we can interface by simply writing and reading the data. We don’t have to think about the delimiter because we’ve got a standard, non-conflicting delimiter. We don’t have to think about newlines because we aren’t using those for control characters. We also don’t have to think about quotes because we also aren’t using those for control characters. And we don’t have to think about escaping delimiters or newlines or quotes for all those same reasons.</p>
<p>Writing:</p>
<div id="cell-26" class="cell" data-execution_count="221">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb18-2">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Name'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Comment'</span>],</span>
<span id="cb18-3">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Alice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'She said, "Hello" and waved.'</span>],</span>
<span id="cb18-4">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bob'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'This is a multi-line comment</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\r\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">spanning two lines.'</span>],</span>
<span id="cb18-5">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Charlie'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'More fun with</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">two lines.'</span>],</span>
<span id="cb18-6">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Diana'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'How about some UTF-8: café, naïve, résumé. 📝'</span>],</span>
<span id="cb18-7">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Edward'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'アップル'</span>],</span>
<span id="cb18-8">]</span>
<span id="cb18-9"></span>
<span id="cb18-10">writer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DSVWriter(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.dsv'</span>)</span>
<span id="cb18-11">writer.write(data)</span></code></pre></div></div>
</div>
<p>And reading:</p>
<div id="cell-28" class="cell" data-execution_count="222">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">reader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DSVReader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/tmp/data.dsv'</span>)</span>
<span id="cb19-2">reader.read()</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>['Name', 'Comment']
['Alice', 'She said, "Hello" and waved.']
['Bob', 'This is a multi-line comment\r\nspanning two lines.']
['Charlie', 'More fun with\ntwo lines.']
['Diana', 'How about some UTF-8: café, naïve, résumé. 📝']
['Edward', 'アップル']</code></pre>
</div>
</div>
<p>🎉 And just like that, we’ve got data going in and out of our writer and reader that has a bunch of weird stuff like quotes and newlines and carriage returns and we don’t need to care! We didn’t have to escape anything because we don’t have any printable characters that would conflict with our control characters.</p>
<p>You might have some different ideas about reader/writer functionality, or character encodings (as long as they’re supersets of ASCII) or why I should be morally scolded for not implementing this in Rust, but the point is you don’t have to think about the fagility of CSVs to go work on those ideas!</p>
<p>💡 <strong>Quick aside:</strong> I first learned about these ASCII delimiters while <a href="https://www.fec.gov/help-candidates-and-committees/filing-reports/fecfile-software/">working with <code>.fec</code> files</a>. For whatever reason, the Federal Election Commission in the United States also decided that they needed to ditch the comma, but they landed on using ASCII character <code>28</code> which is supposed to be used as a file separator not a field saparator. I have no idea why they picked that one when <code>31</code> was right there. Anyway, the FEC also has a <a href="https://www.fec.gov/help-candidates-and-committees/filing-reports/data-conversion-tools/">tool called <code>fs2comma.exe</code></a> that turns it back into a CSV format, and a couple of years I filed a FOIA request and <a href="https://github.com/hodgesmr/fs2comma">got the source code</a>.</p>
<p>So what’s the downside? This custom FEC tooling might give you a hint.</p>
<p>For starters, it’s rather unreadable when opened in a text editor. But I bet you don’t really do that with your CSVs all that often anyway!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/dsv-vim.png" class="img-fluid figure-img"></p>
<figcaption>I opened a .dsv file in Vim</figcaption>
</figure>
</div>
<p>And Google Sheets hates the <code>.dsv</code> file extension, but remember I made that up.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/dsv-google-sheets.png" class="img-fluid figure-img"></p>
<figcaption>I tried to open a .dsv file in Google Sheets</figcaption>
</figure>
</div>
<p>And if you change it to <code>.csv</code> but tell Google Sheets to “detect automatically” the delimiter, it can’t.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/dsv-fake-csv-google-sheets.png" class="img-fluid figure-img"></p>
<figcaption>I tricked Google Sheets by changing the file extension</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/dsv-google-sheets-bad-parse.png" class="img-fluid figure-img"></p>
<figcaption>Google Sheets couldn’t parse it</figcaption>
</figure>
</div>
<p>And if you try to specify the delimiter yourself on the Google Sheets import it’s not entirely clear how you would type a non-printable character into the textbox.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/google-sheets-custom-separator.png" class="img-fluid figure-img"></p>
<figcaption>How do I type ASCII code 31 here?</figcaption>
</figure>
</div>
<p>And if you want to use Python’s <code>csv</code> module but just swap around the control characters, you can’t because opinions were <a href="https://docs.python.org/3/library/csv.html#csv.Dialect.lineterminator">hardcoded</a>:</p>
<blockquote class="blockquote">
<p><strong>Note:</strong> The reader is hard-coded to recognise either <code>'\r'</code> or <code>'\n'</code> as end-of-line, and ignores lineterminator. This behavior may change in the future.</p>
</blockquote>
<p>And all this is to say that the major downside is we have decades of tools built around handling the weirdness of CSVs but not so many tools built around using the delimiters the creators of ASCII gave us and so depending on what you’re doing it might be easier to just use the tools we have.</p>
<p>But sometimes you’re writing software that produces data on one side and consumes data on the other side and sometimes that data comes from users who are hostile, intoxicated, or both, and you just want to pass that around and not think about it and maybe the beauty of a standard from the 1960s is a better choice.</p>
<p>Data!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/</guid>
  <pubDate>Tue, 13 Aug 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-08-12-csv-bad-dsv-good/csvs-are-kinda-bad.png" medium="image" type="image/png" height="82" width="144"/>
</item>
<item>
  <title>Spline Versus PCHIP</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-08-08-spline-pchip/</link>
  <description><![CDATA[ 





<p>Let’s say you’ve got some data points and you make a scatterplot:</p>
<div id="61123219" class="cell" data-execution_count="1">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-2-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>You might say <em>great!</em> and call it a day. But what if we want to see the behavior of the data between these points? Linear interpolation is a simple way to connect the dots:</p>
<div id="111d2b89" class="cell" data-execution_count="2">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-3-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And now at this point you might say <em>great!</em> and call it a day. Or, you might decide that you can do better than linear interpolation. That sure does look like a sine curve. But you’re working with a collection of discrete points, and you wouldn’t want to erroneously just plot a sine function. Instead, you can reach for a smoother interpolation function, such as a spline:</p>
<div id="fb73ca68" class="cell" data-execution_count="3">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The term “spline” refers to a wide class of functions involving interpolation and smoothing. In data viz, we often see the basis spline (or, B-spline). Think of spline interpolation like a flexible ruler that bends to pass smoothly through all your data points, but in doing so, it might sometimes bend too much or too little. Sometimes the spline overshoots, introducing peaks or valleys that weren’t there in the original data.</p>
<div id="1b5d50c4" class="cell" data-execution_count="4">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Sometimes this is okay! Depending on your data, a spline may be ideal for generating a very smooth curve, especially when smoothness is more critical than accurately interpolating between every data point. And when the underlying function is oscillatory, a spline can capture the movement between points quite accurately. But real-world data is often not oscillatory.</p>
<p>Let’s say you’ve got a month’s worth of <a href="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/">observed temperatures recorded in the Austin area</a>:</p>
<div id="7b4e7b7c" class="cell" data-execution_count="5">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And because temperatures exist on a continuous distribution, we could do a simple linear interpolation to articulate the rates of change between points:</p>
<div id="1c1868c5" class="cell" data-execution_count="6">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-7-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>But temperatures are unlikely to ascend or descend on linear gradients, so we could also try a spline:</p>
<div id="964f9745" class="cell" data-execution_count="7">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-8-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That’s a bit more natural, but it looks a bit weird, too. Unlike our sine wave sampling from before, the data points here are of real, observed, daily maximum temperatures. So it’s a little strange that the fit curve overshoots and undershoots those known values. The interpolation is smooth, but the shape of the data has not been preserved.</p>
<div id="14a18927" class="cell" data-execution_count="8">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-9-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>While a spline produces smooth curves, the artifacts of overshooting, undershooting, or unwanted oscillations between data points can misrepresent what the data actually says. Fortunately, we have another option: the PCHIP, or Piecewise Cubic Hermite Interpolating Polynomial. <a href="https://en.wikipedia.org/wiki/Charles_Hermite">Hermite</a> refers to a method of interpolating data points where both the function values and the derivatives at those points are matched.</p>
<p>A PCHIP preserves the shape of the data and avoids oscillations. The monotonicity (increasing or decreasing trend) of the data is preserved, ensuring no overshoots between data points. I like to think of PCHIP as a hand that firmly (but not rigidly) guides a curve through the data points without allowing any unnecessary dips or rises.</p>
<div id="bdfd9696" class="cell" data-execution_count="9">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-10-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Looks good! This results in a curve that better captures the shape of the function, especially when the slope information is critical. In our case, the slope is critical. It makes no sense to have a positive slope (overshooting) between points, when the next value decreased.</p>
<p>But PCHIP isn’t always better than Spline. Let’s apply a PCHIP interpolation to the oscillating data from before:</p>
<div id="c4b6c44a" class="cell" data-execution_count="10">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-08-08-spline-pchip/index_files/figure-html/cell-11-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>It’s not wrong, it’s just a little weird and lumpy. It’s a curve that connects the dots, but it somewhat lost the true movement between points.</p>
<p>PCHIP can aggressively flattened near local extrema. When you need to capture those local extrema — as we did in our temperature plots — PCHIP works well. When you need to capture the smooth movements of oscillatory data, Spline works well. Sometimes it’s fairly intuitive what you need. Sometimes you need to plot it to really see which works better. Other times it takes more thought.</p>
<p>Consider the nature of your data. If your data is smooth and continuous, like a waveform or a gradient, spline interpolation might work well. If your data has sharp changes or you need to preserve the natural shape of the data without introducing artifacts, PCHIP might be the better choice. In practical applications like elections modeling, financial forecasting, or engineering metrics, the choice can have significant implications.</p>
<p>Graphs!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-08-08-spline-pchip/</guid>
  <pubDate>Thu, 08 Aug 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-08-08-spline-pchip/pchip-annotated.png" medium="image" type="image/png" height="97" width="144"/>
</item>
<item>
  <title>Austin, Texas: Hot or Not?</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-30-austin-hot-or-not/</link>
  <description><![CDATA[ 





<p>I live in Austin, Texas. And last summer I felt like:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/so-damn-hot.webp" class="img-fluid" alt="It's so damn hot"></p>
<p>But this year, I’ve felt more like:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/white-claw.webp" class="img-fluid" alt="White Claw"></p>
<p>And earlier today I thought aloud to the group chat:</p>
<blockquote class="blockquote">
<p>I need to look up if Austin is being weird this year. Last year we got to like 50 consecutive days over 100. I don’t think we’ve cracked 100 yet this year? Is there a website that answers this question?</p>
</blockquote>
<p>Last year the heat was so bad that local news outlets were keeping a <a href="https://www.kxan.com/weather/weather-blog/july-2023-100-degrees-streak/">running tally</a> of how many consecutive days we broke 100°F. It turns out we had 45 straight days of triple-digit heat in 2023, which began on July 8 and continued through August 22. I’m writing this on July 30, 2024 and I can’t recall a single day above 100°F yet this year.</p>
<p>Year-vs-year location based time series temperature data absolutely seems like a thing that should exist. Every month or so someone posts the updated <a href="https://www.nytimes.com/2023/09/07/learning/whats-going-on-in-this-graph-sept-13-2023.html">doom surface air temperature graph</a>, so surely I can just look that data up for my location, right?</p>
<p>On <a href="https://weather.gov">weather.gov</a> you can get your <a href="https://www.weather.gov/ewx/climategraphs">own version of this graph</a>. Pretty cool! But only for the current year:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/austin-bergstrom-temps-2024.png" class="img-fluid" alt="Austin/San Antonio WFO Climate Graphs"></p>
<p>You can also get tabular historic data within monthly windows that sometimes come as html and sometimes come as PDF. Also cool. But not convenient:</p>
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/austin-tabular-weather.png" class="img-fluid" alt="Climatological Data for Austin-Bergstrom Airport Area, TX - June 2024"></p>
<p>After about 15 minutes of clicking, I couldn’t find a great way to generate the viz I was looking for; and I couldn’t get an easy data export. Maybe there’s a one-click way to get CSVs, but I didn’t find it. But after about 5 more minutes of googling, I did find the National Oceanic and Atmostpheric Administration’s <a href="https://www.ncei.noaa.gov/cdo-web/">Climate Data Online</a> portal, which has an <a href="https://www.ncdc.noaa.gov/cdo-web/webservices/v2">API</a>.</p>
<blockquote class="blockquote">
<p>NCDC’s Climate Data Online (CDO) offers web services that provide access to current data. This API is for developers looking to create their own scripts or programs that use the CDO database of weather and climate data.</p>
</blockquote>
<p>Hey, that sounds like me!</p>
<p>The API needs an <a href="https://www.ncdc.noaa.gov/cdo-web/token">access token</a>. Wonderfully, all I needed to do was type in my email address and roughly one second later an access token landed in my inbox. LFG.</p>
<p>From here it took a bit more reading to grok what data is available and in what formats, but I eventually found out about GHCND, or the <a href="https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-daily">Global Historical Climatology Network daily</a>:</p>
<blockquote class="blockquote">
<p>The Global Historical Climatology Network daily (GHCNd) is an integrated database of daily climate summaries from land surface stations across the globe. GHCNd is made up of daily climate records from numerous sources that have been integrated and subjected to a common suite of quality assurance reviews.</p>
</blockquote>
<p>That sounds like it might contain what I’m looking for.</p>
<p>Next, there are a lot of ways to filter this data by location, but <code>stationid</code> caught my attention. I found <a href="https://www.ncei.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt">this list of GHCND stations</a> and decided to go with <code>AUSTIN BERGSTROM INTL AP</code> because it’s the same location from the tabular data above. It has the identifier <code>USW00013904</code>.</p>
<p>After a quick <code>pip install requests pandas matplotlib</code> and tossing my token into a <code>NCDC_CDO_TOKEN</code> environment variable, we’re ready to jam.</p>
<p>First let’s get a function to grab some data. I’m intersted in comparing year over year, so let’s grab a year at a time.</p>
<div id="1b1947dc" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.patches <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> mpatches</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_max_temps(year, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">366</span>):</span>
<span id="cb1-9">    token <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getenv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NCDC_CDO_TOKEN"</span>)</span>
<span id="cb1-10">    start_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-01-01"</span></span>
<span id="cb1-11">    end_date <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>year<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">-12-31"</span></span>
<span id="cb1-12">    url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://www.ncdc.noaa.gov/cdo-web/api/v2/data"</span></span>
<span id="cb1-13">    params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-14">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datasetid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND"</span>,</span>
<span id="cb1-15">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"stationid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span>,</span>
<span id="cb1-16">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"startdate"</span>: start_date,</span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"enddate"</span>: end_date,</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"datatypeid"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># max temp</span></span>
<span id="cb1-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"units"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"standard"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 🇺🇸</span></span>
<span id="cb1-20">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"limit"</span>: limit,  </span>
<span id="cb1-21">    }</span>
<span id="cb1-22">    headers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-23">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"token"</span>: token  </span>
<span id="cb1-24">    }</span>
<span id="cb1-25"></span>
<span id="cb1-26">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url, headers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>headers, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>params)</span>
<span id="cb1-27">    data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> response.json()</span>
<span id="cb1-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> data</span></code></pre></div></div>
</div>
<p>Let’s look at the first three:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">get_max_temps(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>, limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metadata"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"resultset"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-4">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"offset"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"count"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">209</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-6">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"limit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb3-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"results"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb3-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-11">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-01T00:00:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"datatype"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-13">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"station"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-14">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",,W,2400"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-15">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">58.0</span></span>
<span id="cb3-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-18">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-02T00:00:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"datatype"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-20">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"station"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",,W,2400"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-22">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">53.0</span></span>
<span id="cb3-23">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-25">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"date"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-01-03T00:00:00"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-26">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"datatype"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TMAX"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-27">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"station"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"GHCND:USW00013904"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-28">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"attributes"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">",,W,2400"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-29">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">51.0</span></span>
<span id="cb3-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-31">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-32"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div></div>
<p>Great! We can pull from the <code>date</code> and the <code>value</code> fields. Let’s grab all of 2024 and shove it into a DataFrame.</p>
<div id="6b48b882" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> to_df(data):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract date and truncate off the time part</span></span>
<span id="cb4-3">    dates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"results"</span>]]</span>
<span id="cb4-4"></span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the max temp value for each date</span></span>
<span id="cb4-6">    max_temps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"value"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"results"</span>]]</span>
<span id="cb4-7"></span>
<span id="cb4-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a DataFrame</span></span>
<span id="cb4-9">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: dates,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_temp"</span>: max_temps})</span>
<span id="cb4-10"></span>
<span id="cb4-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set the `date` col as a datetime and make it the index</span></span>
<span id="cb4-12">    df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>])</span>
<span id="cb4-13">    df.set_index(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-14">    </span>
<span id="cb4-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> df</span></code></pre></div></div>
</div>
<p>Quick spot check:</p>
<div id="3ead4ccd" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">df_2024 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_df(get_max_temps(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>))</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Head:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_2024<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>head()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Tail:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_2024<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>tail()<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Format:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>df_2024<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>dtypes<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Head:
            max_temp
date                
2024-01-01      58.0
2024-01-02      53.0
2024-01-03      51.0
2024-01-04      58.0
2024-01-05      67.0
Tail:
            max_temp
date                
2024-07-23      82.0
2024-07-24      89.0
2024-07-25      88.0
2024-07-26      89.0
2024-07-27      86.0
Format:
max_temp    float64
dtype: object</code></pre>
</div>
</div>
<p>Awesome. I’m writing this on <code>2024-07-30</code> and it’s got data up through <code>2024-07-27</code>. Good enough for me!</p>
<p>Now to actually get at what I was trying to do this whole time. I’m going to grab DataFrames for 2023 and 2024, and plot a time series of each.</p>
<div id="23460fda" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_2023 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_df(get_max_temps(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>))</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust 2023 dates to match the 2024 index</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is how we shift the graph to overlap</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you don't do this, 2024 comes after, not on top of, 2023</span></span>
<span id="cb7-6">df_2023.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.replace(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>))</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb7-9">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-10">df_2023.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>)</span>
<span id="cb7-11">df_2024.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, legend<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>)</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sett x-axis to display month labels</span></span>
<span id="cb7-14">ax.set_xticks(</span>
<span id="cb7-15">    pd.date_range(</span>
<span id="cb7-16">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb7-17">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb7-18">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span>,</span>
<span id="cb7-19">    )</span>
<span id="cb7-20">)</span>
<span id="cb7-21">ax.set_xticklabels(</span>
<span id="cb7-22">    pd.date_range(</span>
<span id="cb7-23">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb7-24">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_2023.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb7-25">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span>,</span>
<span id="cb7-26">    ).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%B'</span>)</span>
<span id="cb7-27">)</span>
<span id="cb7-28"></span>
<span id="cb7-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formatting</span></span>
<span id="cb7-30">black_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>)</span>
<span id="cb7-31">red_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>)</span>
<span id="cb7-32">plt.legend(handles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[black_patch, red_patch])</span>
<span id="cb7-33">ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max Daily Temperatures Recorded in the Austin-Bergstrom Airport Area"</span>)</span>
<span id="cb7-34">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb7-35"></span>
<span id="cb7-36">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/index_files/figure-html/cell-5-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>So that’s pretty cool. Most of 2024 has tracked 2023 for daily high temperatures. But not July. July has been weirdly cooler than last year. Or last year was weirdly hotter than normal.</p>
<p>Actually, let’s see if we can tease that out. Let’s grab the past 10 years.</p>
<div id="45f5264e" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dictionary of year:DataFrame</span></span>
<span id="cb8-4">year_dfs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> year <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2014</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>):</span>
<span id="cb8-6">    year_dfs[year] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> to_df(get_max_temps(year))</span>
<span id="cb8-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Be a nice internet citizen and wait between requests</span></span>
<span id="cb8-8">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb8-9"></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Adjust pre-2024 dates to match the 2024 index</span></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is how we shift the graph to overlap</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If you don't do this, 2024 comes after, not on top of, 2023</span></span>
<span id="cb8-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> year_dfs.values():</span>
<span id="cb8-14">    df.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: x.replace(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2024</span>))</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the data</span></span>
<span id="cb8-17">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb8-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> year, df <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> year_dfs.items():</span>
<span id="cb8-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>:</span>
<span id="cb8-20">         df.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gold"</span>)</span>
<span id="cb8-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb8-22">        df.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>)</span>
<span id="cb8-23">df_2024.plot(ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>)</span>
<span id="cb8-24"></span>
<span id="cb8-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sett x-axis to display month labels</span></span>
<span id="cb8-26">ax.set_xticks(</span>
<span id="cb8-27">    pd.date_range(</span>
<span id="cb8-28">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb8-29">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb8-30">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span></span>
<span id="cb8-31">    )</span>
<span id="cb8-32">)</span>
<span id="cb8-33">ax.set_xticklabels(</span>
<span id="cb8-34">    pd.date_range(</span>
<span id="cb8-35">        start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(),</span>
<span id="cb8-36">        end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>year_dfs[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023</span>].index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(),</span>
<span id="cb8-37">        freq<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MS'</span>,</span>
<span id="cb8-38">    ).strftime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%B'</span>)</span>
<span id="cb8-39">)</span>
<span id="cb8-40"></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Formatting</span></span>
<span id="cb8-42">ax.set_title(</span>
<span id="cb8-43">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max Daily Temperatures Recorded in the Austin-Bergstrom Airport Area 2014 - 2024"</span></span>
<span id="cb8-44">)</span>
<span id="cb8-45">plt.xticks(rotation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">45</span>)</span>
<span id="cb8-46">gold_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gold"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2023"</span>)</span>
<span id="cb8-47">red_patch <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mpatches.Patch(color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"red"</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024"</span>)</span>
<span id="cb8-48">plt.legend(handles<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[gold_patch, red_patch])</span>
<span id="cb8-49"></span>
<span id="cb8-50">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/index_files/figure-html/cell-6-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Seems like Austin’s 2023 summer was on the hotter side, and so far the 2024 summer is on the cooler side.</p>
<p>And was I correct that we haven’t cracked 100 yet this year?</p>
<div id="f253dff4" class="cell" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df_2024[df_2024[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max_temp"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>])</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>            max_temp
date                
2024-07-02     100.0
2024-07-05     100.0</code></pre>
</div>
</div>
<p>Computers!</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2024-07-30-austin-hot-or-not/</guid>
  <pubDate>Tue, 30 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-30-austin-hot-or-not/austin-temperatures-2014-2024.png" medium="image" type="image/png" height="94" width="144"/>
</item>
<item>
  <title>How Did Skannerz Work?</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/</link>
  <description><![CDATA[ 





<p>This post is a redux from a now-deleted social media thread. It felt too important to let bit rot.</p>
<p>If you’re a Millennial of a certain age, or perhaps a Baby Boomer who raised Millennials,<sup>1</sup> you might remember the 2001 toy Skannerz by <a href="https://en.wikipedia.org/wiki/Radica_Games">Radica</a>. It was a gotta-catch-em-all game that involved scanning real-world barcodes to collect monsters and objects, and to battle other Skannerz. It was a hand-held gadget toy back when consumer electronics were still weird and fun and we had more products than just iPhone. I had a blue one. It looked like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/skannerz-zendra.jpg" class="img-fluid figure-img"></p>
<figcaption>A Zendra Skanner</figcaption>
</figure>
</div>
<p>The toy/game had an A+ premise: alien monsters transported down to earth and decided to hide inside of the barcodes on products all around your home (or, more annoyingly to your parents, all around the grocery store). Your job was to scan every barcode you could get your hands on, fight and capture the alien monsters, and then fight the monsters your friends collected. And to make the weirdest Pokémon ripoff complete: the Skannerz came in three colors — red, blue, and green — that could only collect monsters of their associated “tribes”. This really good commercial explains:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/eXt6YihygTw" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Because I was already a major dork at 11 years old, I was intrigued by how the device worked. How did it go from barcode to monster? There was no way it was talking to a server (although I did imagine the world’s greatest PHPMyAdmin at the time). I guessed that it had every possible barcode referenced internally. But that’s not quite correct. It was a little more clever than that.</p>
<p>But frirst, a quick primer on barcodes. There are many variations; this is a <a href="https://en.wikipedia.org/wiki/Universal_Product_Code">UPC Version A</a> — very common in the United States. It has a basic specification: that first digit way to the left is the product type (sometimes called a number system). The next five digits identify the manufacturer. The next five identify the product. And at the end is a checksum digit. The details of how to implement the spec aren’t all too important for our Skannerz exploration.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/barcode.png" class="img-fluid figure-img"></p>
<figcaption>An example UPC - A bar code</figcaption>
</figure>
</div>
<p>Okay, back to the Skannerz game. As mentioned above, there were 3 different “tribes”, identified by which color scanning device you had. And there were 126 total monsters. So each tribe could capture 42 monsters. If you wanted to catch ’em all you needed to buy all three. Business!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/three-skannerz.jpg" class="img-fluid figure-img"></p>
<figcaption>The three original Skannerz: Ujalu (red), Pataak (green), and Zendra (blue)</figcaption>
</figure>
</div>
<p>You could also collect non-monster items from barcodes. And some barcodes healed your injured monsters. Again, these toys had no wireless communication (it was 2001!) so all of the logic for item or monster identification was baked right into the device. But how?</p>
<p>The Skannerz <a href="https://patentimages.storage.googleapis.com/05/ca/8a/0c25f67d6c06a3/US20080139309A1.pdf">patent</a> is conveniently revealing!<sup>2</sup> The device only cares about the “product” section (denoted below as 1315). If the first digit is 0-5, you’ve scanned a monster. 6-9, you’ve scanned an item. Digits 3, 4, and 5 identify the item/monster.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/skannerz-barcode-reference.png" class="img-fluid figure-img"></p>
<figcaption>FIG. 13 from the Skannerz patent illustrates one method of correlating a UPC code to a feature of the game.</figcaption>
</figure>
</div>
<p>If the first digit in the barcode’s product code is 0 - 5, we’re in Monster Mode.</p>
<p>We’ve got 1000 possible values (000-999 across digits 3, 4, and 5 in our product code) to identify 126 monsters. The patent goes on to explain how the magic of division solves this problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1000%7D%7B126%7D%20=%207.94%0A"></p>
<p>And there was much rejoicing.</p>
<p>The range of numbers from 000 to 007 correspond to the first monster in Tribe 1, 008 to 015 correspond to the first monster in Tribe 2, and so on.</p>
<p>The patent then goes on to address the fact that 126 doesn’t divide well into 1000, and that 7.94 is not an integer. We only follow this eight-stepping until we get through the 124th monster, and then:</p>
<blockquote class="blockquote">
<p>Because 1,000 is not a multiple of 126, the last 2 monsters each have a range of 4 numbers. In other words, the last monster in Tribe 2 would correspond to the range of numbers 992 through 995 and the last monster in Tribe 3 would correspond to the range of numbers 996 through 999.</p>
</blockquote>
<p>Now, if the first digit in the barcode’s produt code is 6 - 9, we’re in Item Mode.</p>
<p>Similarly, there were 24 items in the game + 1 for healing. So 25 items. Again, we’ve got 1000 values to work with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1000%7D%7B25%7D%20=%2040%0A"></p>
<p>So a range of 40 numbers can be used to define each item. Item 1 corresponds to the range of numbers from 000 through 039, Item 2 corresponds to the range of numbers from 040 through 079, and so on. And great news: 40 <em>is</em> an integer.</p>
<p>Quick aside: the UPC Version A codec above is the the only format outlined in the Skannerz patent. But the patent also burries this little nugget:</p>
<blockquote class="blockquote">
<p>Many other encoding techniques are within the scope of the present invention. In some such embodiments, Global Location Number (“GLN’) codes and similar codes used, e.g.&nbsp;for identifying parcels, are assigned secondary meanings which correspond with elements of a game. In still other embodiments, codes used for entirely different purposes, for example, audio or video data compression, data encryption, etc., are assigned secondary meanings which correspond with elements of a game.</p>
</blockquote>
<p>What does that mean? It literally says nothing else about what invention is being claimed there, but good on the Radica lawyers for planting a flag I guess? Maybe the <a href="https://skannerz.fandom.com/wiki/Skannerz_Commander">Skannerz Commander</a>, which I never had, rolled its own encryption algorithm?</p>
<p>But that’s really it! If you knew this encoding scheme, and had access to a printer, you could collect all the monsters and items pretty quickly. Anyone else remember <a href="https://web.archive.org/web/20010201163900/http://www.barcodemill.com/">Barcode Mill</a>? Of course people knew; there were unofficial barcode books you could buy to help you complete your collection. But where’s the fun in that?</p>
<p>Thanks for indulging my dork nostalgia. I look forward to the Greta Gerwig adaptation.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Generational cohort discourse is stupid.↩︎</p></li>
<li id="fn2"><p>You don’t need to be a lawyer to read a patent. They can be very interesting! This one had cartoon drawings!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/</guid>
  <pubDate>Tue, 23 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/three-skannerz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Amused Entirely To Death</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/</link>
  <description><![CDATA[ 





<p>At this point there’s nothing novel in pointing out that news and politics has devolved into an entertainment competition. But I can’t become so numb to let last week’s Republican National Convention go without comment.</p>
<p>I won’t get into detailed summaries or link to videos. The Republican National Convention, unsurprisingly, was rife with jingoism, xenophobia, and hate. But what stood out was a primetime performance on the final night:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/hulk-hogan-trump.jpg" class="img-fluid figure-img"></p>
<figcaption>Hulk Hogan ripping his shirt off during the 2024 Republican National Convention</figcaption>
</figure>
</div>
<p>If you missed the social media frenzy, the short version is Hulk Hogan took the stage during a primetime speech to say, among many pernicious things:</p>
<blockquote class="blockquote">
<p>But what happened last week, when they took a shot at my hero, and they tried to kill the next president of the United States, enough was enough! And I said, ‘Let Trump-A-Mania run wild brother! Let Trump-A-Mania rule again!’</p>
</blockquote>
<p>And then he ripped off his shirt and the stadium of suited leaders of the Republican party lost their minds in cheers and applause. Never mind that pundits and Republican leaders assured us that — after the attempted assassination of Donald Trump days prior — this convention would be a message of national unity. Never mind whoever the <em>they</em> are that he’s talking about. Hulk Hogan gave the people what they wanted: a viral-worthy performance that makes you feel something when you press share.</p>
<p>This moment exemplified a broader issue that has been gradually intensifying. The disgraced former president, after all, is a reality TV character, epitomizing the entertainment-driven nature of modern politics. To note that is not to minimize the harm he has inflicted and will inflict if given another chance. But it’s an apt time to highlight a recurring misdiagnosis of modern Conservative power.</p>
<section id="our-misdiagnosis-of-conservative-power" class="level3">
<h3 class="anchored" data-anchor-id="our-misdiagnosis-of-conservative-power">Our Misdiagnosis of Conservative Power</h3>
<p>As astute online big-brains, we’re frequently high-fiving ourselves for naming the Right’s methods and tactics as Orwellian (despite the fact that most people haven’t actually read <em>Nineteen Eighty-Four</em>). We get those small hits of dopamine by labeling our eroding rights as such. But by and large, power-building of the Trump era isn’t Orwellian at all. Just as Donald Trump himself isn’t Machiavellian at all (a core tenet from <em>The Prince</em> is a firm warning against flatterers — Donald Trump could never). Yes, the Right does deploy assaults that could be lifted directly from Orwell or Bradbury — look no further than the book-banning crusades or the “do not believe what you see” lies from the press briefing rooms. But when evaluating how we got here and why we’re stuck here, it’s instructive to look to Neil Postman’s observations in <a href="https://en.wikipedia.org/wiki/Amusing_Ourselves_to_Death" target="_blank">Amusing Ourselves to Death</a>:</p>
<blockquote class="blockquote">
<p>But we had forgotten that alongside Orwell’s dark vision, there was another - slightly older, slightly less well known, equally chilling: Aldous Huxley’s <em>Brave New World</em>. Contrary to common belief even among the educated, Huxley and Orwell did not prophesy the same thing. Orwell warns that we will be overcome by an externally imposed oppression. But in Huxley’s vision, no Big Brother is required to deprive people of their autonomy, maturity and history. As he saw it, people will come to love their oppression, to adore the technologies that undo their capacities to think. What Orwell feared were those who would ban books. What Huxley feared was that there would be no reason to ban a book, for there would be no one who wanted to read one. Orwell feared those who would deprive us of information. <strong>Huxley feared those who would give us so much that we would be reduced to passivity and egoism</strong>. Orwell feared that the truth would be concealed from us. <strong>Huxley feared the truth would be drowned in a sea of irrelevance.</strong> Orwell feared we would become a captive culture. <strong>Huxley feared we would become a trivial culture</strong>, preoccupied with some equivalent of the feelies, the orgy porgy, and the centrifugal bumblepuppy. As Huxley remarked in <em>Brave New World Revisited</em>, the civil libertarians and rationalists who are ever on the alert to oppose tyranny “failed to take into account man’s almost infinite appetite for distractions.” In <em>1984</em>, Huxley added, people are controlled by inflicting pain. <strong>In <em>Brave New World</em>, they are controlled by inflicting pleasure.</strong> In short, Orwell feared that what we fear will ruin us. Huxley feared that what we desire will ruin us.</p>
</blockquote>
<p>I’m not particularly interested in arguing that “we’re living in a dystopia, actually”. Despite our collective addiction to devices that incessantly tell us that the world is terrible, I still believe things are getting better over time. And I largely reject the, “no one has had it as bad as we have it” notions from my generational cohort. But we can only pursue the long arc of progress if we continue to care enough to do so. If I was architecting a <strong>#resist</strong> movement of 2024, it would be to resist the trivialization of political power.</p>
<p>It’s important to reflect on Huxley’s and Postman’s ideas, even if it makes us uncomfortable. So many people today claim they’ve stopped consuming news altogether, but often they simply switch to more entertaining sources that don’t feel like homework. Consider this: how many of your friends can name a single Supreme Court justice without hints? You should start asking! This exercise, which I’ve conducted socially, reveals fascinating results! These observations aren’t about intelligence — they’re about priorities.</p>
<p>Again, I don’t think I’m pointing out anything novel here. Pundits analyze political events in terms of “energy” and base success on Nielsen viewership metrics. Matt Gaetz and Ted Cruz both have side gigs as podcast hosts. Marjorie Taylor Greene dresses up as Cruella de Vil to scream during the Statue of the Union.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/marjorie-taylor-greene-sotu.jpg" class="img-fluid figure-img"></p>
<figcaption>Marjorie Taylor Greene dressed up as Cruella de Vil to scream during the Statue of the Union</figcaption>
</figure>
</div>
<p>It’s all incredibly stupid. And it’s helpful to have an appropriate label for what’s been happening for a long time.</p>
<p>So, when Hulk Hogan took to the stage to frivolously transport the Right’s power-holders back to the 1980s while ripping off his shirt, exalting “Trump-A-Mania” (aptly named), it couldn’t be more clear that ambient Conservative power-building is Huxleyan, not Orwellian. We are amusing ourselves entirely to death.</p>
<p>Seems bad.</p>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/</guid>
  <pubDate>Sat, 20 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/amused-entirely-to-death.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Language Models on the AI Executive Order</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2023-11-01-language-models-ai-executive-order/</link>
  <description><![CDATA[ 





<p>This post is adapted from a Jupyter <a href="https://github.com/hodgesmr/llm_ai_eo">Notebook found on GitHub</a>.</p>
<p>On October 30th, 2023, President Biden signed the <a href="https://www.whitehouse.gov/briefing-room/presidential-actions/2023/10/30/executive-order-on-the-safe-secure-and-trustworthy-development-and-use-of-artificial-intelligence/">Executive Order on the Safe, Secure, and Trustworthy Development and Use of Artificial Intelligence</a>. The order itself is quite sweeping and touches many government departments and agencies, with a focus on harnessing AI’s potential and defending against harms and risks.</p>
<p>In this post, we’ll deploy language models to rapidly discover information from the Order. For the easiest setup, I recommend trying this out in a Google Colab notebook.</p>
<p><a target="_blank" href="https://colab.research.google.com/github/hodgesmr/llm_ai_eo/blob/main/llm_ai_eo.ipynb"> <img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"> </a> <a target="_blank" href="https://github.com/hodgesmr/llm_ai_eo/blob/main/llm_ai_eo.ipynb"> <img src="https://img.shields.io/badge/-Open_in_Github-blue?logo=github&amp;labelColor=gray" alt="Open In Github"> </a></p>
<p>Many of the strategies presented here are extensions from Simon Willison’s work in his blog post, <a href="https://til.simonwillison.net/llms/embed-paragraphs">Embedding paragraphs from my blog with E5-large-v2</a>. Simon also maintains a handy command line utility for working with various LLM models, aptly named <a href="https://llm.datasette.io/en/stable/">LLM</a>. While Simon’s writing largely focuses on the CLI capabilities of the tool (and the usefully opinionated integrations with SQLite), I prefer working with Pandas Dataframes. Here I show how to use the LLM library in that fashion.</p>
<p>Embeddings are kindof a magic black box to end users, but the basic idea is that language models can create vectors or numerical values that represent not only words or sentences, but also the symantic <em>meaning</em> of those words. Early research on this subject comes from <a href="https://code.google.com/archive/p/word2vec/">word2vec</a>. To illustrate: <code>vector('king') - vector('man') + vector('woman')</code> is mathematically close to <code>vector('queen')</code>. I find that <em>fascinating</em>! We’ll use this concept to extract and match information against the Executive Order text.</p>
<p>We’ll deploy a technique known as <a href="https://research.ibm.com/blog/retrieval-augmented-generation-RAG">Retrieval-Augmented Generation</a>. From a high level, this allows us to inject context into a LLM without training or tuning it. We use another system to locate language that likely contains the answer to our query, and then ask the model to pull it out for us.</p>
<p>Our high livel strategy:</p>
<ol type="1">
<li>Calculate embeddings on the Executive Order text</li>
<li>Calculate embeddings on a query</li>
<li>Calculate the cosine similarity between every text embedding and the query</li>
<li>Select the top three passages that are symantically similar to the query</li>
<li>Pass the passages and the query to the LLM for rapid summarization</li>
</ol>
<section id="environment" class="level3">
<h3 class="anchored" data-anchor-id="environment">Environment</h3>
<p>First install the dependencies, which include the <a href="https://mlc.ai">MLC LLaMA 2 model</a> for summarization, the <a href="https://llm.datasette.io/en/stable/">LLM</a> library, and the <a href="https://huggingface.co/intfloat/e5-large-v2">E5-large-v2</a> language model for text embedding.</p>
<p>Note, these models are constantly changing, and getting them up and running on your system might take some independent investigation. If running in Google Colab, check <a href="https://colab.research.google.com/github/mlc-ai/notebooks/blob/main/mlc-llm/tutorial_chat_module_getting_started.ipynb">this tutorial for MLC</a>. If running LLaMA with the LLM library on macOS, check the <a href="https://github.com/simonw/llm-mlc">repository’s instructions</a>.</p>
<div id="cell-3" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;vscode&quot;,&quot;value&quot;:{&quot;languageId&quot;:&quot;shellscript&quot;}}" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>pre <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>f https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>mlc.ai<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>wheels mlc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>chat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nightly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cu118 mlc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>ai<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>nightly<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>cu118</span>
<span id="cb1-2">git lfs install</span>
<span id="cb1-3">pip install llm</span>
<span id="cb1-4">llm install llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>transformers</span>
<span id="cb1-5">llm sentence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>transformers register intfloat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>e5<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>large<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>a lv2</span>
<span id="cb1-6">llm install llm<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>mlc</span>
<span id="cb1-7">llm mlc setup</span>
<span id="cb1-8">llm mlc download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>model Llama<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">b</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>alias llama2</span></code></pre></div></div>
</div>
</section>
<section id="load-data" class="level3">
<h3 class="anchored" data-anchor-id="load-data">Load Data</h3>
<p>Before getting started, we need the Executive Order text to work against. This is probably the least interesting part of this post. I simply opened the Order in Firefox reader view, copy+pasted it into VSCode, did some manual find/replace to clean up the white space, and then concatenated paragraphs to get chunks as close to 400 words as I could. I picked 400 because the embedding model truncates at 512 <em>tokens</em> and a token is either a word or a symantically important subset of a word, so I allowed for some buffer. <em>This took less than half an hour.</em> Rather than share code to do this work, I simply provide the cleaned text here.</p>
<p>Load it into a Pandas Dataframe with a single column:</p>
<div id="cell-5" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:206}}" data-outputid="92403b5b-d45a-4485-e6bd-bc26b23d6f38" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"></span>
<span id="cb2-3">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb2-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://raw.githubusercontent.com/hodgesmr/llm_ai_eo/main/eo.txt"</span>,</span>
<span id="cb2-5">    sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trick to let us read the lines into a Dataframe; '_' not present</span></span>
<span id="cb2-6">    header<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-7">)</span>
<span id="cb2-8">df.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"passage"</span>]</span>
<span id="cb2-9"></span>
<span id="cb2-10">df.head()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div id="df-bb16b36d-004b-481b-8a49-3f3c710dd35f" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">passage</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>By the authority vested in me as President by ...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>(a) Artificial Intelligence must be safe and s...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>(c) The responsible development and use of AI ...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>(e) The interests of Americans who increasingl...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>(g) It is important to manage the risks from t...</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-bb16b36d-004b-481b-8a49-3f3c710dd35f')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-bb16b36d-004b-481b-8a49-3f3c710dd35f button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-bb16b36d-004b-481b-8a49-3f3c710dd35f');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-b2eed367-b96a-4267-9dbf-89c97eb35125">
  <button class="colab-df-quickchart" onclick="quickchart('df-b2eed367-b96a-4267-9dbf-89c97eb35125')" title="Suggest charts." style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-b2eed367-b96a-4267-9dbf-89c97eb35125 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>
    </div>
  </div>
</div>
</div>
</section>
<section id="calculate-embeddings" class="level3">
<h3 class="anchored" data-anchor-id="calculate-embeddings">Calculate Embeddings</h3>
<p>Now that we have a Dataframe of chunks of the Executive Order, we can calculate embeddings of each chunk. To do this we’ll use the <a href="https://huggingface.co/intfloat/e5-large-v2">E5-large-v2</a> language model, which was trained to handle text prefixed with either <code>passage:</code> or <code>query:</code>. Every chunk is considered a passage. We’ll add this as another column on our Dataframe.</p>
<div id="cell-7" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:206}}" data-outputid="6873d0fd-ff28-45c2-9b7c-d2474e1f1a9d" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> llm</span>
<span id="cb3-2"></span>
<span id="cb3-3">embedding_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.get_embedding_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lv2"</span>)</span>
<span id="cb3-4">text_to_embed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.passage.to_list()</span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our embedding model expects `passage: ` prefixes</span></span>
<span id="cb3-7">text_to_embed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'passage: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>t<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> text_to_embed]</span>
<span id="cb3-8"></span>
<span id="cb3-9">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'embedding'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(embedding_model.embed_multi(text_to_embed))</span>
<span id="cb3-10"></span>
<span id="cb3-11">df.head()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<div id="df-881f1164-104e-4a47-b886-c457247e5bb2" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">passage</th>
<th data-quarto-table-cell-role="th">embedding</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>By the authority vested in me as President by ...</td>
<td>[0.032344698905944824, -0.04333016648888588, 0...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>(a) Artificial Intelligence must be safe and s...</td>
<td>[0.01886950619518757, -0.057347141206264496, 0...</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>(c) The responsible development and use of AI ...</td>
<td>[0.0486459881067276, -0.0712570995092392, 0.02...</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>(e) The interests of Americans who increasingl...</td>
<td>[0.03564070537686348, -0.04887280985713005, 0....</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>(g) It is important to manage the risks from t...</td>
<td>[0.04095401614904404, -0.042341429740190506, 0...</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-881f1164-104e-4a47-b886-c457247e5bb2')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-881f1164-104e-4a47-b886-c457247e5bb2 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-881f1164-104e-4a47-b886-c457247e5bb2');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-c9b38182-800a-413a-bc1c-380569d3041c">
  <button class="colab-df-quickchart" onclick="quickchart('df-c9b38182-800a-413a-bc1c-380569d3041c')" title="Suggest charts." style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-c9b38182-800a-413a-bc1c-380569d3041c button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>
    </div>
  </div>
</div>
</div>
<p>For our symantic searching, we’ll also need an embedding of our query. And the model would like that prefixed with <code>query:</code>. Let’s ask what the Order says regarding AI and healthcare:</p>
<div id="cell-9" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="834e16ab-688f-427f-848e-abf97deaeaa9" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"what does it say about healthcare?"</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our embbeding model expects `query: ` prefix for retrieval</span></span>
<span id="cb4-4">query_to_embed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"query: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb4-5">query_vector <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding_model.embed(query_to_embed)</span>
<span id="cb4-6"></span>
<span id="cb4-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(query_vector)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>[0.011035123839974403, -0.06264020502567291, 0.036343760788440704, -0.022550513967871666, -0.004930663388222456, 0.027655886486172676, -0.04244294762611389, -0.026744479313492775, -0.022813718765974045, 0.013104002922773361, 0.027848346158862114, -0.041959188878536224, 0.02923852950334549, 0.03592933714389801, 0.02084210328757763, 0.028341282159090042, -0.02188134379684925, 0.009380431845784187, 0.010694948956370354, -0.046167585998773575, 0.04979575797915459, -0.04051537066698074, -0.04705166816711426, 0.054594166576862335, -0.021378282457590103, -0.006090054754167795, -0.027005767449736595, -0.0056915683671832085, -0.02485739439725876, 0.025049963966012, 0.0013038198230788112, 0.020098360255360603, 0.03132014721632004, -0.10214236378669739, 0.03457639366388321, -0.005869136657565832, -0.041733402758836746, -0.0533079169690609, 0.043018240481615067, 0.02142527513206005, -0.013251637108623981, 0.021434243768453598, -0.01846863329410553, 0.06185981631278992, -0.006901243235915899, -0.007515963166952133, -0.026446444913744926, -0.022192247211933136, 0.008555920794606209, -0.00683502247557044, 0.04217502102255821, -0.05847731605172157, 0.05262995511293411, 0.010208839550614357, -0.026769086718559265, -0.0054522184655070305, 0.020620698109269142, 0.04013380780816078, -0.016234276816248894, -0.013201197609305382, 0.033620886504650116, 0.00933841709047556, 0.057325609028339386, -0.039771128445863724, 0.024898990988731384, -0.04952569678425789, 0.01868751272559166, -0.009222128428518772, 0.028759649023413658, 0.04622277244925499, -0.04479452595114708, -0.007873269729316235, 0.003972833044826984, 0.08234458416700363, 0.047766849398612976, -0.04056665301322937, -0.03526405245065689, 0.028415270149707794, 0.03255781903862953, 0.03818396478891373, -0.04255992919206619, -0.0518893301486969, -0.036653585731983185, 0.020367737859487534, -0.0004731871304102242, 0.030738964676856995, -0.0012389217736199498, 0.0024446682073175907, 0.05554775893688202, 0.013511369936168194, 0.06238795816898346, 0.0018740486120805144, 0.008448319509625435, 0.03504892811179161, -0.04160211980342865, -0.00638029258698225, -0.050224918872117996, -0.005032839719206095, 0.013626458123326302, 0.008170071057975292, -0.04054887965321541, -0.027991971001029015, -0.034977927803993225, 0.014853181317448616, -0.024243168532848358, -0.02605707384645939, -0.05607284978032112, -0.00930757261812687, -0.03581421077251434, -0.0025592155288904905, -0.02390565536916256, -0.0380810908973217, -0.033349402248859406, -0.011960298754274845, -0.04205334186553955, 0.055994290858507156, 0.006477762944996357, 0.00991995818912983, 0.030702101066708565, 0.024755865335464478, 0.07455798983573914, 0.04026920348405838, -0.032499562948942184, -0.0020086164586246014, -0.035176586359739304, 0.0520380362868309, -0.04051459580659866, -0.04515765979886055, 0.04827379435300827, 0.0681162029504776, 0.01639464683830738, -0.012349777854979038, -0.024919848889112473, 0.0261624027043581, -0.0003906007332261652, 0.08279916644096375, -0.04583611711859703, -0.05605150759220123, 0.03352531045675278, 0.05521564930677414, -0.0490930899977684, -0.027380632236599922, 0.02854541875422001, 0.012674689292907715, -0.002931063063442707, -0.053501006215810776, -0.0288915503770113, -0.031300533562898636, -0.03822864219546318, -0.03784075006842613, -0.017202073708176613, -0.005835125222802162, -0.02155722677707672, -0.00019966973923146725, 0.038443099707365036, -0.055773064494132996, 0.0020749655086547136, -0.023329386487603188, -0.006293139886111021, 0.019844476133584976, 0.044987935572862625, 0.03083648905158043, -0.01008790172636509, 0.02570483647286892, 0.002781765768304467, 0.007234315853565931, 0.03924374282360077, -0.014665482565760612, -0.026686524972319603, 0.040999021381139755, 0.0032443120144307613, 0.0015701769152656198, 0.053893182426691055, 0.045284025371074677, 0.023676631972193718, 0.007213208358734846, 0.05706159397959709, -0.06629643589258194, 0.010098790749907494, -0.03431336581707001, 0.0032631983049213886, 0.021331751719117165, -0.05340828001499176, -0.022274604067206383, -0.0436270497739315, 0.019490502774715424, 0.04619332030415535, -0.03779701516032219, -0.004007418639957905, -0.03109969012439251, -0.028927365317940712, -0.01648799516260624, -0.04384511336684227, 0.02099577710032463, -0.02223723568022251, -0.03204162418842316, -0.022197725251317024, -0.011281806975603104, -0.015587741509079933, 0.041081756353378296, 0.044835954904556274, 0.005444942973554134, 0.004057107958942652, 0.0030030268244445324, 0.008095227181911469, 0.010580062866210938, 0.002692743204534054, 0.027165278792381287, -0.04451528936624527, 0.018396437168121338, -0.012467225082218647, 0.01907152123749256, 0.024384012445807457, -0.03359571844339371, 0.002541579073294997, 0.03602273389697075, 0.007620786316692829, 0.0045867254957556725, -0.004530118312686682, 0.039663612842559814, -0.07118961960077286, 0.027506954967975616, 0.010756077244877815, -0.0027250293642282486, 0.020495502278208733, 0.025394247844815254, -0.037594713270664215, 0.017433777451515198, -0.008695165626704693, -0.02986626699566841, 0.012270666658878326, 0.016099197790026665, -0.03702491894364357, -0.03618799149990082, -0.012862246483564377, -0.05321879684925079, 0.03497174754738808, -0.012480347417294979, 0.012074748054146767, 0.021339774131774902, 0.025768857449293137, 0.027273213490843773, 0.006413111928850412, -0.01951907016336918, -0.020737817510962486, 0.03631201386451721, 0.005693630315363407, 0.014690431766211987, 0.0400673933327198, 0.040662623941898346, 0.005502395331859589, 0.0173542071133852, -0.04771675169467926, 0.02629489079117775, -0.003811753587797284, -0.007251544389873743, 0.04416917636990547, -0.061770226806402206, -0.016220202669501305, 0.03719717636704445, -0.01617533341050148, -0.03763722628355026, -0.04766486957669258, -0.025192739441990852, -0.019239462912082672, -0.008094199001789093, -0.005068974103778601, -0.004565471783280373, 0.07414168119430542, -0.041430603712797165, 0.013045714236795902, 0.018361356109380722, 0.03342536836862564, -0.041664931923151016, -0.05250570923089981, -0.02396155521273613, -0.01865033246576786, -0.03515772148966789, 0.016364071518182755, -0.009918905794620514, 0.05359259247779846, -0.0008409120491705835, -0.003592758672311902, 0.030167188495397568, -0.008410172536969185, -0.002642557490617037, -0.026539165526628494, 0.003059686627238989, 0.029047558084130287, 0.01878088153898716, -0.04435497149825096, 0.004310435149818659, 0.05454620346426964, -0.009366977959871292, -0.009419695474207401, 0.031485412269830704, -0.016963956877589226, 0.007122103590518236, 0.009967380203306675, 0.024634771049022675, 0.022842811420559883, -0.0031100360210984945, -0.0643397867679596, -0.02673438936471939, -0.035047076642513275, -0.00703747384250164, 0.049209486693143845, -0.050232626497745514, 0.04699047654867172, 0.026202980428934097, -0.016680346801877022, -0.02222183719277382, -0.041290491819381714, -0.03719739243388176, -0.0399385504424572, 0.016396909952163696, -0.02527480199933052, 0.018787767738103867, 0.0006646675174124539, -0.01867998018860817, 0.03068104200065136, -0.0020506661385297775, -0.044911354780197144, -0.012430372647941113, -0.024320200085639954, 0.017804201692342758, -0.032045990228652954, -0.007124380674213171, 0.01598973572254181, 0.012343218550086021, -0.011404650285840034, -0.01943874917924404, 0.04149242863059044, -0.005655502434819937, -0.016777103766798973, -0.011175236664712429, -0.04135586693882942, -0.03618283197283745, 0.02853410318493843, 0.044518813490867615, 0.06200827658176422, 0.038675494492053986, -0.036812301725149155, -0.02377907745540142, 0.025207694619894028, 0.040055833756923676, 0.04191999137401581, 0.009881209582090378, 0.02629314549267292, 0.024176236242055893, 0.020148472860455513, 0.008412880823016167, -0.004142292309552431, -0.004587574861943722, -0.03939927741885185, -0.01107271108776331, 0.026553431525826454, -0.04704265668988228, 0.0134046645835042, 0.03654501587152481, 0.017579609528183937, -0.00949288159608841, 0.06082817539572716, -0.006728034000843763, 0.008356080390512943, -0.051711030304431915, 0.03844171389937401, -0.01830201968550682, 0.00854733120650053, 0.034922968596220016, 0.004259245935827494, 0.020917760208249092, 0.010708301328122616, -0.02309831604361534, -0.04656030982732773, -0.04652083292603493, 0.05957057699561119, 0.02332383207976818, 0.027773132547736168, -0.02072453871369362, 0.01621401123702526, 0.01397494412958622, -0.018857672810554504, -0.027436040341854095, -0.002191656269133091, -0.004994520451873541, -0.004126602318137884, -0.017894916236400604, -0.01036886591464281, -0.04088125005364418, -0.001628147903829813, -0.038663312792778015, 0.018833275884389877, -0.030392177402973175, 0.008629074320197105, -0.028720470145344734, 0.02279716171324253, -0.01806335523724556, 0.008062546141445637, 0.010905652306973934, 0.03126005455851555, 0.04747697710990906, 0.04772476851940155, 0.0025600406806916, -0.027565544471144676, -0.02668774127960205, 0.04895208775997162, 0.035160355269908905, -0.003617622423917055, -0.024726560339331627, 0.0027959730941802263, 0.032439906150102615, -0.02167009562253952, 0.018054930493235588, -0.01872582919895649, 0.0019295919919386506, -0.02558404952287674, 0.006836448796093464, -0.0369705893099308, -0.02392488345503807, -0.0006662389496341348, -0.03071492351591587, -0.035662174224853516, -0.027658283710479736, 0.03889033943414688, -0.0037014412228018045, 0.026146110147237778, -0.012518925592303276, -0.020388586446642876, -0.05085292086005211, 0.04047977924346924, -0.04683171212673187, -0.025453921407461166, -0.022075410932302475, 0.04574955627322197, -0.04705757275223732, 0.014057472348213196, -0.0019396235002204776, 0.02185961976647377, -0.0364665687084198, 0.029328808188438416, 0.03975827246904373, -0.025506163015961647, -0.048030223697423935, 0.020831944420933723, -0.010402142070233822, -0.045267313718795776, -0.009884222410619259, -0.03742368519306183, 0.040443453937768936, 0.03946416452527046, -0.01560758426785469, 0.05435897037386894, -0.01847420074045658, -0.022371601313352585, -0.02834167331457138, -0.024244116619229317, 0.016461217775940895, -0.015590337105095387, -0.00129281438421458, -0.04336583614349365, 0.031417686492204666, 0.031635694205760956, -0.04004405438899994, -0.030732493847608566, -0.006123801227658987, 0.04235366731882095, 0.01829519309103489, -0.04180118814110756, 0.022241240367293358, 0.007255924865603447, -0.011486359871923923, 0.03379999101161957, -0.0004169400199316442, -0.0184877160936594, 0.028425395488739014, 0.028919873759150505, 0.02586987614631653, 0.024930693209171295, 0.014547272585332394, -0.026854408904910088, -0.024916205555200577, 0.021643545478582382, 0.020358487963676453, -0.06973747164011002, 0.03774351254105568, -0.057213641703128815, 0.019329674541950226, 0.058849673718214035, -0.01767851412296295, -0.04142051935195923, 0.029757970944046974, 0.03226760774850845, 0.013497359119355679, 0.04983055964112282, -0.06860023736953735, -0.009090565145015717, 0.01876700483262539, -0.045754898339509964, -0.018559377640485764, 0.03907673433423042, -0.04343864694237709, 0.01983906328678131, 0.05090088024735451, -0.026130903512239456, 0.0198112390935421, -0.01724187843501568, 0.027581052854657173, -0.015150460414588451, 0.044671617448329926, -0.021948102861642838, -0.039155758917331696, -0.011670168489217758, 0.057173795998096466, 0.05130016431212425, 0.015086568892002106, 0.029861880466341972, 0.00045294041046872735, 0.012837855145335197, -0.013540389016270638, -0.0035288180224597454, -0.006696672644466162, 0.005161927081644535, -0.007997330278158188, -0.06018849462270737, 0.0040719653479754925, 0.04676881060004234, 0.05494493618607521, -0.02383231744170189, -0.02409941330552101, -0.02361765317618847, 0.05019611492753029, -0.02561134286224842, -0.011039866134524345, -0.0035623686853796244, -0.007303849793970585, -0.05598662421107292, -0.014519513584673405, -0.016709184274077415, 0.023226818069815636, 0.0020540591794997454, 0.018423371016979218, 0.07162746787071228, -0.030987678095698357, -0.011564436368644238, -0.05398257449269295, -0.03393613547086716, 0.029724063351750374, 0.014501385390758514, 0.01975683681666851, 0.025587748736143112, -0.0031189853325486183, -0.028188880532979965, -0.028325166553258896, -0.058148093521595, 0.06817413866519928, -0.05185883492231369, 0.010479864664375782, 0.013737188652157784, -0.025603286921977997, 0.004288510885089636, 0.03330473229289055, 0.03081020526587963, 0.00929239485412836, 0.013587307184934616, 0.04477598890662193, -0.010759776458144188, -0.013349821791052818, -0.03450658544898033, 0.04914005845785141, -0.008455680683255196, -0.02566939778625965, 0.06540139764547348, -0.014167072251439095, -0.04206572845578194, 0.040725916624069214, -0.027056824415922165, -0.027743373066186905, 0.01723734475672245, -0.026086552068591118, 0.011066379956901073, -0.028094105422496796, 0.021090257912874222, -0.006315530743449926, -0.0038536370266228914, 0.002642259933054447, -0.027106409892439842, -0.04236611723899841, 0.034201622009277344, 0.02585034817457199, 0.029318731278181076, 0.04393518716096878, -0.021400194615125656, -0.01966845989227295, 0.037550002336502075, -0.01055433414876461, 0.013854894787073135, -0.02539399452507496, -0.029923539608716965, 0.011284036561846733, 0.03166112303733826, -0.05249398201704025, 0.023592980578541756, -0.032214708626270294, 0.048454105854034424, -0.03129222244024277, 0.019876103848218918, 0.027158288285136223, -0.010018077678978443, -0.015372109599411488, -0.03651623800396919, 0.030494078993797302, 0.030631577596068382, 0.013395410031080246, -0.04203599691390991, 0.017429262399673462, -0.0336260125041008, -0.00458034360781312, 0.04320629686117172, 0.04873400554060936, -0.036522023379802704, -0.007033052854239941, 0.04841015860438347, 0.04686618968844414, -0.0226470734924078, -0.0156414732336998, 0.03650740534067154, -0.02229906991124153, 0.04247375950217247, 0.02045833133161068, 0.0011794024612754583, -0.02260892651975155, -0.034504398703575134, 0.044768236577510834, -0.031263917684555054, -0.045521024614572525, 0.005588601343333721, -0.056517187505960464, 0.03272703289985657, 0.03745061159133911, 0.048094216734170914, 0.04812173917889595, -0.051041409373283386, 0.017124954611063004, -0.028181584551930428, 0.0380525179207325, -0.0037846474442631006, -0.03125273063778877, 0.01894977129995823, -0.040786415338516235, -0.04169308394193649, 0.05256915092468262, -0.03413494676351547, 0.02746882289648056, 0.033805206418037415, 0.007925352081656456, 0.02444133721292019, 0.018344828858971596, -0.009217273443937302, 0.0021543705370277166, 0.03575904294848442, 0.020160242915153503, 0.02286422997713089, -0.020686518400907516, 0.026341790333390236, 0.12740176916122437, -0.00893761869519949, 0.020138844847679138, -0.02238314412534237, 0.018193142488598824, 0.03919895738363266, -0.022538235411047935, 0.025507012382149696, -0.023426273837685585, 0.027672510594129562, 0.04479461535811424, 0.051694680005311966, 0.024090928956866264, 0.05755620077252388, -0.014703532680869102, 0.017124010249972343, -0.01627686806023121, -0.0018241779180243611, -0.02017812617123127, -0.013297722674906254, 0.02810887061059475, -0.03654468432068825, -0.040724869817495346, -0.02429257705807686, 0.02536279335618019, -0.004012022167444229, -0.0012858447153121233, -0.04617433249950409, 0.017472991719841957, 0.05619405210018158, 0.003411441808566451, 0.02130633033812046, -0.03523368015885353, -0.017101695761084557, -0.020463088527321815, -0.025893187150359154, -0.04365244880318642, 0.03732496127486229, 0.003834214061498642, -0.02485889010131359, 0.023965951055288315, 0.04507003724575043, -0.039340391755104065, -0.01395449135452509, 0.043282754719257355, -0.0028774579986929893, 0.05358149856328964, -0.02236671932041645, 0.005119263660162687, 0.04382428526878357, 0.013711007311940193, -0.01928921416401863, -0.04386340454220772, 0.013973870314657688, -0.01751251146197319, -0.021039115265011787, 0.018643466755747795, 0.021641723811626434, -0.019717521965503693, -0.04447349160909653, -0.045124512165784836, 0.001166265457868576, 0.027790851891040802, 0.0349087193608284, -0.05426891893148422, -0.020197005942463875, 0.013967194594442844, 0.020221564918756485, 0.02676599659025669, -0.05146752670407295, 0.028382916003465652, -0.03574734181165695, -0.0307468231767416, 0.0271960087120533, -0.060862455517053604, -0.019536489620804787, 0.029809515923261642, 0.005997729953378439, -0.003236045129597187, -0.02296912670135498, -0.012584153562784195, 0.020569052547216415, -0.0398726686835289, 0.012893066741526127, 0.05747450888156891, -0.04004427418112755, -0.0016912904102355242, 0.03588302433490753, -0.040752533823251724, -0.021931834518909454, -0.03274866193532944, 0.02146611548960209, -0.01936306245625019, 0.017079008743166924, -0.007505142129957676, 0.06527362018823624, -0.020604269579052925, 0.01886555179953575, -0.00841802079230547, 0.03616372495889664, 0.020610619336366653, 0.04090982303023338, -0.00286914873868227, 0.01186350453644991, -0.015292976051568985, -0.03638255596160889, 0.028694557026028633, 0.002353183226659894, 0.017770130187273026, 0.01283283717930317, 0.012778712436556816, 0.02851232700049877, 0.008139816112816334, 0.03719107434153557, -0.03728439658880234, 0.012673329561948776, 0.03146594390273094, -0.019588639959692955, 0.006983111146837473, 0.03652822971343994, 0.01976114511489868, 0.043489858508110046, 0.04203694313764572, -0.0072769043035805225, -0.031777746975421906, 0.025811728090047836, -0.02263280190527439, -0.024895695969462395, -0.024923745542764664, -0.021317312493920326, 0.025197185575962067, -0.031068982556462288, -0.03568267449736595, -0.014184455387294292, -0.018119284883141518, 0.04019543156027794, 0.027073360979557037, 0.019060516729950905, -0.032629843801259995, 0.01988561637699604, -0.046449366956949234, -0.026410577818751335, -0.03311290591955185, -0.04030410945415497, 0.0073549640364944935, 0.03774447366595268, -0.02418743632733822, 0.03917284309864044, 0.037112291902303696, 0.04895860329270363, -0.03377828747034073, -0.021235689520835876, -0.008727184496819973, 0.012683587148785591, 0.025314902886748314, 0.02410356141626835, 0.06801478564739227, -0.02123037353157997, -0.0036285393871366978, 0.043283384293317795, 0.025348279625177383, 0.03189971670508385, -0.04675361514091492, -0.008785491809248924, -0.01910555362701416, -0.03074111044406891, -0.032706547528505325, -0.02195163257420063, -0.025955626741051674, -0.013656404800713062, -0.0017331260023638606, 0.04122364893555641, -0.003353940322995186, 0.003944667987525463, 0.02557617612183094, 0.033677756786346436, -0.0069642821326851845, -0.037354182451963425, -0.003706785151734948, 0.018041592091321945, 0.023099323734641075, 0.005993315484374762, -0.023070724681019783, -0.003592608030885458, 0.01580343022942543, -0.021968074142932892, -0.055538859218358994, 0.022645818069577217, 0.008289964869618416, 0.007825851440429688, 0.029414691030979156, 0.00884107407182455, -0.029503418132662773, -0.00685040233656764, -0.04297958314418793, -0.0067012435756623745, 0.0408974252641201, 0.03618587553501129, 0.008660215884447098, 0.005283386912196875, 0.02173357643187046, 0.016801103949546814, 0.014148939400911331, 0.04589837044477463, -0.07519549131393433, 0.0008492959314025939, -0.03911217674612999, 0.01957186684012413, 0.04065250977873802, -0.017508283257484436, -0.022696377709507942, -0.023634128272533417, 0.023389438167214394, 0.005290127359330654, 0.030684763565659523, 0.027884958311915398, 0.0007517277263104916, -0.01770036853849888, 0.011700128205120564, -0.010737712495028973, 0.04028428718447685, 0.023366102948784828, -0.03046400658786297, -0.023285800591111183, -0.047068167477846146, -0.019877061247825623, 0.005805285647511482, 0.026605457067489624, 0.014891230501234531, -0.04306803271174431, 0.06144380196928978, 0.02467053383588791, 0.009495215490460396, 0.02271324396133423, 0.022022845223546028, -0.0344187393784523, 0.034510448575019836, 0.035804156213998795, -0.02319440431892872, -0.012169327586889267, 0.027845632284879684, -0.03938868269324303, 0.014688534662127495, -0.0326634906232357, 0.035405971109867096, 0.09329289197921753, -0.021386025473475456, -0.005334523506462574, -0.013434350490570068, 0.03625260666012764, -0.035231638699769974, 0.01714746095240116, -0.010116915218532085, -0.015791669487953186, 0.03326767310500145, 0.06997721642255783, 0.02518271654844284, -0.025026991963386536, -0.033969491720199585, 0.006438582669943571, -0.010330992750823498, 0.022015077993273735, 0.035159625113010406, 0.03975333645939827, -0.09261862188577652, -0.030692344531416893, -0.007167263887822628, 0.030045578256249428, 0.04790728539228439, 0.037478335201740265, 0.008102349936962128, 0.023854972794651985, -0.02429278939962387, -0.007957016117870808, -0.029902758076786995, -0.03795326128602028, 0.02096726931631565, -0.009724924340844154, 0.05335197597742081, -0.031247764825820923, -0.029010239988565445, 0.03935291990637779, 0.0004320724692661315, -0.015092982910573483, -0.005163619294762611, 0.0006704957922920585, 0.019765393808484077, -0.0023283318150788546, 0.008752129971981049, 0.011935974471271038, 0.041026521474123, -0.02911226823925972, -0.00707174651324749, -0.05678257718682289, 0.018372097983956337, -0.007054861634969711, -0.03395901620388031, 0.029341937974095345, 0.011115530505776405, 0.04074866324663162, -0.015816841274499893, 0.05173950269818306, -0.015220806002616882, -0.04581461101770401, -0.03737398982048035, -0.0463782399892807, -0.04844944179058075, 0.011588484980165958, 0.007512776181101799, 0.012602098286151886, 0.008942355401813984, -0.019375091418623924, -0.00784570537507534, -0.016177771613001823, 0.020358964800834656, 0.030678516253829002, 0.058078765869140625, -0.05181894451379776, -0.007111021783202887, 0.004367280285805464, 0.04949195310473442, 0.024104589596390724, 0.013972863554954529, -0.022043360397219658, 0.02481302246451378, -0.02353677898645401, -0.019958026707172394, -0.03086337447166443, -0.0342184379696846, -0.042619749903678894, -0.013002551160752773, 0.031215941533446312, -0.029242197051644325, -0.039825692772865295, -0.04158396273851395, 0.019694391638040543, 0.02995566837489605, 0.028752531856298447, -0.02492348663508892, -0.006047347094863653, 0.04264743626117706, -0.006050477270036936, -0.012319333851337433, -0.02809244394302368, -0.04274909943342209, -0.015643877908587456, 0.0013809194788336754, 0.022640932351350784, -0.03112141042947769, 0.029752563685178757, -0.013332386501133442, 0.022779937833547592, 0.026944121345877647, 0.0026380603667348623, -0.04207104071974754, 0.022562168538570404, -0.01429622434079647, 0.044384222477674484, 0.004642078652977943]</code></pre>
</div>
</div>
</section>
<section id="symantic-search" class="level3">
<h3 class="anchored" data-anchor-id="symantic-search">Symantic Search</h3>
<p>If we were using the LLM module’s preferred structures for Collection and storing data in SQLite, we could simply use <a href="https://llm.datasette.io/en/stable/embeddings/cli.html#llm-similar">llm similar</a> or its <a href="https://llm.datasette.io/en/stable/embeddings/python-api.html#retrieving-similar-items">corresponding Python API</a>. As far as I can tell, the API doesn’t yet support other data structures of embeddings (like our Dataframe), so we’ll have to calculate <a href="https://en.wikipedia.org/wiki/Cosine_similarity">cosine similarities</a> ourselves. Lucky for us, we can <a href="https://github.com/simonw/llm/blob/abcb457b20367ee56e27602e3553bb4bd6a17312/llm/__init__.py#L252">borrow from Simon’s open source library</a>:</p>
<div id="cell-11" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cosine_similarity(a, b):</span>
<span id="cb6-2">    dot_product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(a, b))</span>
<span id="cb6-3">    magnitude_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-4">    magnitude_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> dot_product <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (magnitude_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> magnitude_b)</span></code></pre></div></div>
</div>
<p>Now, iterate over every embedding in our Dataframe and calculate the similarity score against our query embedding vector:</p>
<div id="cell-13" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;,&quot;height&quot;:206}}" data-outputid="6c6703a8-cf2a-4f14-b115-0a2d80d29c6b" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">comp_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.copy()</span>
<span id="cb7-2">comp_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'similarity'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> comp_df.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(</span>
<span id="cb7-3">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> row : cosine_similarity(</span>
<span id="cb7-4">        query_vector,</span>
<span id="cb7-5">        row.embedding,</span>
<span id="cb7-6">    ),</span>
<span id="cb7-7">    axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb7-8">)</span>
<span id="cb7-9"></span>
<span id="cb7-10">comp_df.head()</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div id="df-3a86beae-ba8a-42d5-8a4c-9d3bddc6b005" class="colab-df-container">
    <div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">passage</th>
<th data-quarto-table-cell-role="th">embedding</th>
<th data-quarto-table-cell-role="th">similarity</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>By the authority vested in me as President by ...</td>
<td>[0.032344698905944824, -0.04333016648888588, 0...</td>
<td>0.781552</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>(a) Artificial Intelligence must be safe and s...</td>
<td>[0.01886950619518757, -0.057347141206264496, 0...</td>
<td>0.778486</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>(c) The responsible development and use of AI ...</td>
<td>[0.0486459881067276, -0.0712570995092392, 0.02...</td>
<td>0.779455</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>(e) The interests of Americans who increasingl...</td>
<td>[0.03564070537686348, -0.04887280985713005, 0....</td>
<td>0.794971</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>(g) It is important to manage the risks from t...</td>
<td>[0.04095401614904404, -0.042341429740190506, 0...</td>
<td>0.785406</td>
</tr>
</tbody>
</table>

</div>
    <div class="colab-df-buttons">

  <div class="colab-df-container">
    <button class="colab-df-convert" onclick="convertToInteractive('df-3a86beae-ba8a-42d5-8a4c-9d3bddc6b005')" title="Convert this dataframe to an interactive table." style="display:none;">

  <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 -960 960 960">
    <path d="M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z"></path>
  </svg>
    </button>

  <style>
    .colab-df-container {
      display:flex;
      gap: 12px;
    }

    .colab-df-convert {
      background-color: #E8F0FE;
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: none;
      fill: #1967D2;
      height: 32px;
      padding: 0 0 0 0;
      width: 32px;
    }

    .colab-df-convert:hover {
      background-color: #E2EBFA;
      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);
      fill: #174EA6;
    }

    .colab-df-buttons div {
      margin-bottom: 4px;
    }

    [theme=dark] .colab-df-convert {
      background-color: #3B4455;
      fill: #D2E3FC;
    }

    [theme=dark] .colab-df-convert:hover {
      background-color: #434B5C;
      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);
      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));
      fill: #FFFFFF;
    }
  </style>

    <script>
      const buttonEl =
        document.querySelector('#df-3a86beae-ba8a-42d5-8a4c-9d3bddc6b005 button.colab-df-convert');
      buttonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';

      async function convertToInteractive(key) {
        const element = document.querySelector('#df-3a86beae-ba8a-42d5-8a4c-9d3bddc6b005');
        const dataTable =
          await google.colab.kernel.invokeFunction('convertToInteractive',
                                                    [key], {});
        if (!dataTable) return;

        const docLinkHtml = 'Like what you see? Visit the ' +
          '<a target="_blank" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'
          + ' to learn more about interactive tables.';
        element.innerHTML = '';
        dataTable['output_type'] = 'display_data';
        await google.colab.output.renderOutput(dataTable, element);
        const docLink = document.createElement('div');
        docLink.innerHTML = docLinkHtml;
        element.appendChild(docLink);
      }
    </script>
  </div>


<div id="df-e7a5f54a-b8df-438f-9088-d3b333baa2c3">
  <button class="colab-df-quickchart" onclick="quickchart('df-e7a5f54a-b8df-438f-9088-d3b333baa2c3')" title="Suggest charts." style="display:none;">

<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewbox="0 0 24 24" width="24px">
    <g>
        <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path>
    </g>
</svg>
  </button>

<style>
  .colab-df-quickchart {
      --bg-color: #E8F0FE;
      --fill-color: #1967D2;
      --hover-bg-color: #E2EBFA;
      --hover-fill-color: #174EA6;
      --disabled-fill-color: #AAA;
      --disabled-bg-color: #DDD;
  }

  [theme=dark] .colab-df-quickchart {
      --bg-color: #3B4455;
      --fill-color: #D2E3FC;
      --hover-bg-color: #434B5C;
      --hover-fill-color: #FFFFFF;
      --disabled-bg-color: #3B4455;
      --disabled-fill-color: #666;
  }

  .colab-df-quickchart {
    background-color: var(--bg-color);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    display: none;
    fill: var(--fill-color);
    height: 32px;
    padding: 0;
    width: 32px;
  }

  .colab-df-quickchart:hover {
    background-color: var(--hover-bg-color);
    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);
    fill: var(--button-hover-fill-color);
  }

  .colab-df-quickchart-complete:disabled,
  .colab-df-quickchart-complete:disabled:hover {
    background-color: var(--disabled-bg-color);
    fill: var(--disabled-fill-color);
    box-shadow: none;
  }

  .colab-df-spinner {
    border: 2px solid var(--fill-color);
    border-color: transparent;
    border-bottom-color: var(--fill-color);
    animation:
      spin 1s steps(1) infinite;
  }

  @keyframes spin {
    0% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
      border-left-color: var(--fill-color);
    }
    20% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    30% {
      border-color: transparent;
      border-left-color: var(--fill-color);
      border-top-color: var(--fill-color);
      border-right-color: var(--fill-color);
    }
    40% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-top-color: var(--fill-color);
    }
    60% {
      border-color: transparent;
      border-right-color: var(--fill-color);
    }
    80% {
      border-color: transparent;
      border-right-color: var(--fill-color);
      border-bottom-color: var(--fill-color);
    }
    90% {
      border-color: transparent;
      border-bottom-color: var(--fill-color);
    }
  }
</style>

  <script>
    async function quickchart(key) {
      const quickchartButtonEl =
        document.querySelector('#' + key + ' button');
      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.
      quickchartButtonEl.classList.add('colab-df-spinner');
      try {
        const charts = await google.colab.kernel.invokeFunction(
            'suggestCharts', [key], {});
      } catch (error) {
        console.error('Error during call to suggestCharts:', error);
      }
      quickchartButtonEl.classList.remove('colab-df-spinner');
      quickchartButtonEl.classList.add('colab-df-quickchart-complete');
    }
    (() => {
      let quickchartButtonEl =
        document.querySelector('#df-e7a5f54a-b8df-438f-9088-d3b333baa2c3 button');
      quickchartButtonEl.style.display =
        google.colab.kernel.accessAllowed ? 'block' : 'none';
    })();
  </script>
</div>
    </div>
  </div>
</div>
</div>
<p>And select the 3 passages with the best similary scores. We’ll feed this as context to the LLaMA model.</p>
<div id="cell-15" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">best_3_matches <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> comp_df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"similarity"</span>, ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb8-2">context <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>.join(best_3_matches.passage.values)</span></code></pre></div></div>
</div>
</section>
<section id="ask-the-llm" class="level3">
<h3 class="anchored" data-anchor-id="ask-the-llm">Ask the LLM</h3>
<p>Now that we’ve selected the top 3 passages, let’s feed them into LLaMA 2.</p>
<div id="cell-17" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> llm.get_model(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"llama2"</span>)</span></code></pre></div></div>
</div>
<p>Even though we’re providing prefixed context to the model, it’s helpful to give it a system prompt to guide how it responds. This can help it stay “focussed” on the context and respond in the voice that we expect. The system prompt is open to creativity and experimentation.</p>
<div id="cell-19" class="cell" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">system <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are an assistant. You answer questions in a single </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">paragraph about the policy from President Biden. The provided context </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">comes directly from the policy. You MUST use the provided information </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">as context. Not all provided information will be helpful, ONLY reference </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">information if it is related to my query. You may quote the context </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb10-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">information if helpful."</span></span></code></pre></div></div>
</div>
<p>Now, feed the context and the query into the model.</p>
<div id="cell-21" class="cell" data-quarto-private-1="{&quot;key&quot;:&quot;colab&quot;,&quot;value&quot;:{&quot;base_uri&quot;:&quot;https://localhost:8080/&quot;}}" data-outputid="79b71ec9-d583-428a-fb79-d69c62162f48" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Query: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-2">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.prompt(</span>
<span id="cb11-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>context<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>query<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb11-4">    system<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>system,</span>
<span id="cb11-5">)</span>
<span id="cb11-6"></span>
<span id="cb11-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Response:</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb11-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.text())</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Query: what does it say about healthcare?

Response:

The policy from President Biden related to healthcare is outlined in section 8(b)(i) of the policy, which states that:
"Within 90 days of the date of this order, the Secretary of HHS shall, in consultation with the Secretary of Defense and the Secretary of Veterans Affairs, establish an HHS AI Task Force that shall, within 365 days of its creation, develop a strategic plan that includes policies and frameworks — possibly including regulatory action, as appropriate — on responsible deployment and use of AI and AI-enabled technologies in the health and human services sector (including research and discovery, drug and device safety, healthcare delivery and financing, and public health), and identify appropriate guidance and resources to promote that deployment, including in the following areas:
(A) development, maintenance, and use of predictive and generative AI-enabled technologies in healthcare delivery and financing — including quality measurement, performance improvement, program integrity, benefits administration, and patient experience — taking into account considerations such as appropriate human oversight of the application of AI-generated output;
(D) incorporation of safety, privacy, and security standards into the software-development lifecycle for protection of personally identifiable information, including measures to address AI-enhanced cybersecurity threats in the health and human services sector; (E) development, maintenance, and availability of documentation to help users determine appropriate and safe uses of AI in local settings in the health and human services sector; (F) work to be done with State, local, Tribal, and territorial health and human services agencies to advance positive use cases and best practices for use of AI in local settings; and (G) identification of uses of AI to promote workplace efficiency and satisfaction in the health and human services sector, including reducing administrative burdens."
This section outlines the responsibilities of the Secretary of HHS related to AI in the healthcare sector. Some of the key points include:
* Establishing an HHS AI Task Force to develop a strategic plan for responsible AI deployment and use in the health and human services sector.
* Identifying policies and frameworks for regulatory action, as appropriate, to ensure responsible deployment and use of AI in healthcare.
* Developing guidance and resources to promote the appropriate and safe use of AI in healthcare</code></pre>
</div>
</div>
<p>Overall, this looks like it does a good job!</p>
<p>Of course, it’s extremely important to keep a human in the loop when referencing government documents. The model may still hallucinate, or it could entirely miss important context. Some of these shortcoming are baked into the model itself, others are implementation details of this post.</p>
<p>If nothing else, this shows a fascinating interface to interact with long, wordy, documents!</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2023, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Language Models on the AI Executive Order nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2023-11-01-language-models-ai-executive-order/</guid>
  <pubDate>Wed, 01 Nov 2023 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2023-11-01-language-models-ai-executive-order/llm_ai_eo_header.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>BIDEN: Binary Inference Dictionaries for Electoral NLP</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/</link>
  <description><![CDATA[ 





<p><img src="https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/BIDEN.png" class="img-fluid"></p>
<p>This post is adapted from a Jupyter <a href="https://github.com/hodgesmr/biden_nlp">Notebook found on GitHub</a>.</p>
<p><strong>BIDEN</strong>: <strong>B</strong>inary <strong>I</strong>nference <strong>D</strong>ictionaries for <strong>E</strong>lectoral <strong>N</strong>LP demonstrates a compression-based binary classification technique that is fast at both training and inference on common CPU hardware in Python. It is largely built on the strategies presented by <a href="https://github.com/cyrilou242/ftcc">FTCC</a>, which in turn, was a reaction to <a href="https://github.com/bazingagin/npc_gzip">Low-Resource Text Classification: A Parameter-Free Classification Method with Compressors</a> (the gzip method). Like FTCC, <strong>BIDEN</strong> is built atop of <a href="https://facebook.github.io/zstd/">Zstandard</a> (Zstd), which leverages <a href="https://facebook.github.io/zstd/#small-data">dictionary compression</a>. Zstd dictionary compression seeds a compressor with sample data, so that it can efficiently compress <em>small data</em> (~1 KB) of similar composition. Seeding the compressor dictionaries acts as our “training” method for the model.</p>
<p>The <strong>BIDEN</strong> model was trained on the <a href="https://electionemails2020.org">ElectionEmails 2020</a> data set — a database of over 900,000 political campaign emails from the 2020 US election cycle. <strong>In compliance with the data set’s <a href="https://electionemails2020.org/downloads/corpus_documentation_v1.0.pdf">terms</a>, the training data is NOT provided with this repository.</strong> If you would like to train the <strong>BIDEN</strong> model yourself, you can <a href="https://docs.google.com/forms/d/e/1FAIpQLSdcgjZo-D1nNON4d90H2j0VLtTdxiHK6Y8HPJSpdRu4w5YILw/viewform">request a copy of the data for free</a>. The <strong>BIDEN</strong> model was trained on <code>corpus_v1.0</code>.</p>
<section id="training-and-classification" class="level3">
<h3 class="anchored" data-anchor-id="training-and-classification">Training and Classification</h3>
<p>Both training and inference for <strong>BIDEN</strong> are fast and simple.</p>
<p>The model consists of two Zstd compressors, one optimized for Democratic emails and one optimzed for Republican emails. Each is built upon a compression dictionary. Each compression dictionary is seeded with training sample emails from its respective party.</p>
<p>Classification (inference) is achieved by compressing a test sample with both the Democratic and Republican compressors. Whichever compressor achieves a higher compression ratio on the test sample text is considered the inferred label.</p>
</section>
<section id="cleaning-the-training-data" class="level3">
<h3 class="anchored" data-anchor-id="cleaning-the-training-data">Cleaning the Training Data</h3>
<p>The ElectionEmails 2020 data set is a CSV. The model consideres <a href="https://electionemails2020.org/downloads/corpus_documentation_v1.0.pdf">two columns</a>: <code>party_affiliation</code> and <code>body_text</code>. <strong>BIDEN</strong> is only concerned with binary classification for Democratic and Republican labeling.</p>
<p>The two requirements defined in <code>requirements.txt</code> are <a href="https://pypi.org/project/pandas/">Pandas</a> and <a href="https://pypi.org/project/zstandard/">zstandard</a>:</p>
<div class="code-copy-outer-scaffold"><div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode txt code-with-copy"><code class="sourceCode default"><span id="cb1-1">pandas==2.1.*</span>
<span id="cb1-2">zstandard==0.21.* </span></code></pre></div></div>
<p>Start by reading in the data. Since the model is only working with two columns, drop any record that doesn’t contain both. Also filter the data to only consider Democratic or Republican emails for the binary classificaiton.</p>
<p><strong>Note</strong>: this assumes you have the ElectionEmails 2020 data saved at the relative path <code>data/corpus_v1.0.csv</code>.</p>
<div id="a8127153-8f5a-460c-a5d5-da2fcc7c8d8c" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> enum <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Enum</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> zstandard</span>
<span id="cb2-5"></span>
<span id="cb2-6">fields <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'body_text'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb2-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party_affiliation'</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb2-9">}</span>
<span id="cb2-10"></span>
<span id="cb2-11">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb2-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data/corpus_v1.0.csv'</span>,</span>
<span id="cb2-13">    sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>,</span>
<span id="cb2-14">    usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fields.keys()),</span>
<span id="cb2-15">    dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fields,</span>
<span id="cb2-16">)</span>
<span id="cb2-17"></span>
<span id="cb2-18">df.drop_duplicates(inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-19"></span>
<span id="cb2-20">d_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df.party_affiliation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Democratic Party"</span>].dropna()</span>
<span id="cb2-21">r_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df.party_affiliation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republican Party"</span>].dropna()</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'D Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb2-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>D Samples: 127194
R Samples: 36788</code></pre>
</div>
</div>
<p>There are significantly more Democratic samples than Republican samples, so take a random subset of the former.</p>
<div id="54b8fe57-dae5-47dd-af3c-aa7c9d28d853" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">max_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_df.index), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_df.index))</span>
<span id="cb4-2">d_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_df.sample(</span>
<span id="cb4-3">    n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_data,</span>
<span id="cb4-4">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb4-5">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-6"></span>
<span id="cb4-7">r_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_df.sample(</span>
<span id="cb4-8">    n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>max_data,</span>
<span id="cb4-9">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb4-10">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'D Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb4-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'R Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>D Samples: 36788
R Samples: 36788</code></pre>
</div>
</div>
<p>Now divide the data into training and test subsets, at an 80/20 split.</p>
<div id="7f3c0940-4013-4e03-b361-bdf5886f9954" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">d_train_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb6-2">d_test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_df.drop(d_train_df.index)</span>
<span id="cb6-3"></span>
<span id="cb6-4">r_train_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_df.sample(frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility </span></span>
<span id="cb6-5">r_test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_df.drop(r_train_df.index)</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Democratic Training Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_train_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Democratic Test Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(d_test_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Republican Training Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_train_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb6-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Republican Test Samples: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(r_test_df.index)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Democratic Training Samples: 29430
Democratic Test Samples: 7358
Republican Training Samples: 29430
Republican Test Samples: 7358</code></pre>
</div>
</div>
</section>
<section id="the-biden-model" class="level3">
<h3 class="anchored" data-anchor-id="the-biden-model">The BIDEN model</h3>
<p>The model consistes of two core methods: <code>train()</code> and <code>classify()</code> :</p>
<div id="53a77efa-3809-4bfe-9afb-42ca058943fb" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> BIDEN():</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Binary Inference Dictionaries for Electoral NLP (BIDEN)</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This class allows you to train a model for classifying political content into</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Democratic or Republican categories based on compression ratios.</span></span>
<span id="cb8-7"></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Attributes:</span></span>
<span id="cb8-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Classification (enum): An enumeration of political classifications (DEMOCRATIC, REPUBLICAN).</span></span>
<span id="cb8-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-11">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Classification(Enum):</span>
<span id="cb8-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Enumeration of political classifications.</span></span>
<span id="cb8-14"></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Attributes:</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            DEMOCRATIC (int): Represents Democratic political content.</span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            REPUBLICAN (int): Represents Republican political content.</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-19">        DEMOCRATIC <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb8-20">        REPUBLICAN <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb8-21">        </span>
<span id="cb8-22">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, encoding: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'utf-8'</span>):</span>
<span id="cb8-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Initialize the BIDEN model.</span></span>
<span id="cb8-25"></span>
<span id="cb8-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This constructor initializes the BIDEN model with empty compressors.</span></span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb8-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            encoding (str, optional): The character encoding of the input data. Defaults to 'utf-8'.</span></span>
<span id="cb8-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            </span></span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            BIDEN: An instance of the BIDEN class.</span></span>
<span id="cb8-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-34">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-35">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-36">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> encoding</span>
<span id="cb8-37"></span>
<span id="cb8-38">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb8-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> trained(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb8-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Check if the BIDEN model is trained.</span></span>
<span id="cb8-42"></span>
<span id="cb8-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            bool: True if both Democratic and Republican compressors are trained, False otherwise.</span></span>
<span id="cb8-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-46">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r_compressor)</span>
<span id="cb8-47"></span>
<span id="cb8-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> train(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb8-49">              d_training_data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb8-50">              r_training_data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>,</span>
<span id="cb8-51">              compression_level: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>,</span>
<span id="cb8-52">             ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb8-53">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Train the BIDEN model.</span></span>
<span id="cb8-55"></span>
<span id="cb8-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb8-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            d_training_data (str): Democratic training data.</span></span>
<span id="cb8-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            r_training_data (str): Republican training data.</span></span>
<span id="cb8-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            compression_level (int, optional): The compression level. Defaults to 15.</span></span>
<span id="cb8-60"></span>
<span id="cb8-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            bool: True if training is successful, False otherwise.</span></span>
<span id="cb8-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span>        </span>
<span id="cb8-64">        d_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressionDict(</span>
<span id="cb8-65">            d_training_data.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding),</span>
<span id="cb8-66">            dict_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zstandard.DICT_TYPE_RAWCONTENT</span>
<span id="cb8-67">        )</span>
<span id="cb8-68">        d_dictionary.precompute_compress(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compression_level)</span>
<span id="cb8-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressor(dict_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>d_dictionary)</span>
<span id="cb8-70"></span>
<span id="cb8-71">        r_dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressionDict(</span>
<span id="cb8-72">            r_training_data.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding),</span>
<span id="cb8-73">            dict_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>zstandard.DICT_TYPE_RAWCONTENT</span>
<span id="cb8-74">        )</span>
<span id="cb8-75">        r_dictionary.precompute_compress(level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>compression_level)</span>
<span id="cb8-76">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r_compressor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> zstandard.ZstdCompressor(dict_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>r_dictionary)</span>
<span id="cb8-77"></span>
<span id="cb8-78">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.trained</span>
<span id="cb8-79"></span>
<span id="cb8-80">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> classify(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, sample: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Classification:</span>
<span id="cb8-81">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Classify a sample based on compression ratios.</span></span>
<span id="cb8-83"></span>
<span id="cb8-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb8-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            sample (str): The sample text to classify.</span></span>
<span id="cb8-86"></span>
<span id="cb8-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb8-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Classification: The classification (DEMOCRATIC or REPUBLICAN).</span></span>
<span id="cb8-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb8-90"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Raises:</span></span>
<span id="cb8-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            RuntimeError: If the model is not trained.</span></span>
<span id="cb8-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb8-93">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.trained:</span>
<span id="cb8-94">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">RuntimeError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Attempted to classify with a model that is not yet trained."</span>)</span>
<span id="cb8-95">        </span>
<span id="cb8-96">        encoded_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sample.encode(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.encoding)</span>
<span id="cb8-97">        original_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(encoded_sample)</span>
<span id="cb8-98">        d_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.d_compressor.compress(encoded_sample))</span>
<span id="cb8-99">        d_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> original_length</span>
<span id="cb8-100">        r_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.r_compressor.compress(encoded_sample))</span>
<span id="cb8-101">        r_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_compressed_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> original_length</span>
<span id="cb8-102"></span>
<span id="cb8-103">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> r_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> d_ratio:</span>
<span id="cb8-104">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> BIDEN.Classification.REPUBLICAN</span>
<span id="cb8-105"></span>
<span id="cb8-106">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> BIDEN.Classification.DEMOCRATIC</span></code></pre></div></div>
</div>
</section>
<section id="train-the-model" class="level3">
<h3 class="anchored" data-anchor-id="train-the-model">Train the Model</h3>
<p>To train the model, we pass the entirety of the Democratic and Republican texts to construct <a href="https://python-zstandard.readthedocs.io/en/latest/dictionaries.html">prefix dictionaries</a>. Prefix dictionaries allow compression operations to reference raw data within the <a href="https://python-zstandard.readthedocs.io/en/latest/concepts.html#dictionaries">dictionary</a>. Once we have two compressors instantiated and pre-seeded with our training data, the model is trained. This is <em>fast</em>. On my 2.6 GHz 6-Core Intel Core i7, this takes roughly <strong>30 seconds</strong>.</p>
<div id="cfa1300f-0ca7-4030-942f-7ea780e6db4e" class="cell" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">d_combined_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(d_train_df.body_text)</span>
<span id="cb9-2">r_combined_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>.join(r_train_df.body_text)</span>
<span id="cb9-3"></span>
<span id="cb9-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BIDEN()</span>
<span id="cb9-5">model.train(d_combined_text, r_combined_text)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>True</code></pre>
</div>
</div>
</section>
<section id="classification" class="level3">
<h3 class="anchored" data-anchor-id="classification">Classification</h3>
<p>Now, we can classify our test data. We could loop through each set, but let’s combine and shuffle them together first, and loop in one go. We’ll also convert the party affiliation strings <code>'Democratic Party'</code>, and <code>'Republican Party'</code> into our model’s enum values:</p>
<div id="8179375a-26b8-46f9-8de0-8f44eef4b141" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">combined_test_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(</span>
<span id="cb11-2">    [d_test_df, r_test_df],</span>
<span id="cb11-3">    ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb11-4">    sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb11-5">).sample(</span>
<span id="cb11-6">    frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb11-7">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility</span></span>
<span id="cb11-8">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb11-9"></span>
<span id="cb11-10">combined_test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party_affiliation'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_test_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party_affiliation'</span>].replace(</span>
<span id="cb11-11">    to_replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Democratic Party'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Republican Party'</span>],</span>
<span id="cb11-12">    value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[BIDEN.Classification.DEMOCRATIC, BIDEN.Classification.REPUBLICAN]</span>
<span id="cb11-13">)</span>
<span id="cb11-14"></span>
<span id="cb11-15">num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb11-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> combined_test_df.itertuples():</span>
<span id="cb11-17">    actual_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.party_affiliation</span>
<span id="cb11-18">    inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.classify(row.body_text)</span>
<span id="cb11-19"></span>
<span id="cb11-20">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> actual_label:</span>
<span id="cb11-21">        num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb11-22"></span>
<span id="cb11-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Classification Success Rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>((num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(combined_test_df.index))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classification Success Rate: 98.9%</code></pre>
</div>
</div>
<p>98.9% is a <em>shockingly</em> high success rate for such a simple classification method!</p>
</section>
<section id="another-email-data-set" class="level3">
<h3 class="anchored" data-anchor-id="another-email-data-set">Another Email Data Set</h3>
<p>Let’s see how it performs with emails from another data set. <a href="https://www.thescoop.org">Derek Willis</a> maintains a <a href="https://datasette.io/">Datasette</a> of <a href="https://political-emails.herokuapp.com/emails">over 150,000 campaign emails</a>. Let’s grab 100 samples of each party from that collection, and see how they perform:</p>
<div id="95f0a04c-a454-44e9-b189-c45a9d17cb0c" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://political-emails.herokuapp.com/emails.csv?sql='</span></span>
<span id="cb13-2">d_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select body, party from emails where party = "D" limit 100;'</span></span>
<span id="cb13-3">r_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'select body, party from emails where party = "R" limit 100;'</span></span>
<span id="cb13-4"></span>
<span id="cb13-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb13-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' '</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'+'</span>,</span>
<span id="cb13-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%2C'</span>,</span>
<span id="cb13-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'='</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%3D'</span>,</span>
<span id="cb13-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'"'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%22'</span>,</span>
<span id="cb13-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'%3B'</span>,</span>
<span id="cb13-11">}</span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> symbol, code <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>.items():</span>
<span id="cb13-14">    d_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d_query.replace(symbol, code)</span>
<span id="cb13-15">    r_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r_query.replace(symbol, code)</span>
<span id="cb13-16"></span>
<span id="cb13-17">d_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> d_query</span>
<span id="cb13-18">r_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> base_url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> r_query</span>
<span id="cb13-19"></span>
<span id="cb13-20">d_dw_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(d_url)</span>
<span id="cb13-21">r_dw_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(r_url)</span>
<span id="cb13-22"></span>
<span id="cb13-23">combined_dw_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat(</span>
<span id="cb13-24">    [d_dw_df, r_dw_df],</span>
<span id="cb13-25">    ignore_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb13-26">    sort<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb13-27">).sample(</span>
<span id="cb13-28">    frac<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb13-29">    random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9001</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># random seed set for reproducibility</span></span>
<span id="cb13-30">).reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb13-31"></span>
<span id="cb13-32">combined_dw_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> combined_dw_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'party'</span>].replace(</span>
<span id="cb13-33">    to_replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'D'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'R'</span>],</span>
<span id="cb13-34">    value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[BIDEN.Classification.DEMOCRATIC, BIDEN.Classification.REPUBLICAN]</span>
<span id="cb13-35">)</span>
<span id="cb13-36"></span>
<span id="cb13-37"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DW Sample:'</span>)</span>
<span id="cb13-38">combined_dw_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>DW Sample:</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="8">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">body</th>
<th data-quarto-table-cell-role="th">party</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<th data-quarto-table-cell-role="th">0</th>
<td>Hey Peter!!! You know our campaign is made by,...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">1</th>
<td>https://www.jahanahayes.com/ [https://www.jaha...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">2</th>
<td>Hi there, it’s storytime: I developed a keen n...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">3</th>
<td>We’re contacting a select group of patriots fo...</td>
<td>Classification.REPUBLICAN</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">4</th>
<td>Peter – You need to watch this. CLICK HERE OR ...</td>
<td>Classification.REPUBLICAN</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">5</th>
<td>Peter, you may have seen me asking for your ol...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">6</th>
<td>Do you want an Official Mugshot Mug? (24-hour ...</td>
<td>Classification.REPUBLICAN</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">7</th>
<td>https://secure.actblue.com/donate/cdp-footer?r...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">8</th>
<td>[ https://act.katieporter.com/go/14559?t=1001&amp;...</td>
<td>Classification.DEMOCRATIC</td>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">9</th>
<td>I hope I made you proud fighting for you at th...</td>
<td>Classification.REPUBLICAN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="e8cc55d0-fba3-4a6a-ad2f-5e5db9da3016" class="cell" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb15-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> combined_dw_df.itertuples():</span>
<span id="cb15-3">    actual_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.party</span>
<span id="cb15-4">    inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.classify(row.body)</span>
<span id="cb15-5"></span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> inferred_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> actual_label:</span>
<span id="cb15-7">        num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb15-8"></span>
<span id="cb15-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Classification Success Rate: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>((num_correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(combined_dw_df.index))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.1f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Classification Success Rate: 93.0%</code></pre>
</div>
</div>
<p>93% is still <em>quite good</em> considering that all we’re doing is compression!</p>
</section>
<section id="classifying-tweets" class="level3">
<h3 class="anchored" data-anchor-id="classifying-tweets">Classifying Tweets</h3>
<p>The Twitter API is basically useless these days, so I scrolled the timelines of <a href="https://twitter.com/Mike_Pence">Mike Pence</a> (R) and <a href="https://twitter.com/GavinNewsom">Gavin Newsom</a> (D), and copy+paste’d 5 tweets from each. It’s a tiny sample, and not really random, but it’s neat to see how well it does:</p>
<div id="5839d1f1-3b63-41da-a131-d594b0fb2b00" class="cell" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">pence_tweets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb17-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1707882018258751915</span></span>
<span id="cb17-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Today, we applaud the Eighth Circuit's decision, "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"which is an important step in the fight to uphold and protect "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the rights of parents and families in Linn-Mar. A family is the "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"single best unit to protect children, and we must continue to do "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"everything we can to empower parents over bureaucrats. The strength "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-8">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"of our nation is tied to the strength of our families, and we will "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"not stand idly by as the Radical Left attempts to indoctrinate our "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"children behind parents’ backs."</span>,</span>
<span id="cb17-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1707472823269392643</span></span>
<span id="cb17-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The cause of Life is the calling of our time "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"and I couldn’t be more proud to have played a role in the administration "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that appointed three of the justices that overturned Roe v. Wade and "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"returned the question of abortion to the states and the American people."</span>,</span>
<span id="cb17-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Republicans are facing a Time for Choosing. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1707241587460186214</span></span>
<span id="cb17-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We have to choose whether or not we’re going to stay on the path "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"that has defined our movement since the days of Ronald Reagan and "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-20">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"through the Trump-Pence years or whether we’re going to follow "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the siren song of populism unmoored to Conservative principles."</span>,</span>
<span id="cb17-22">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1704132623617122719</span></span>
<span id="cb17-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"I am for working Americans and free enterprise. These businesses "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"make their decisions, but at the end the of the day these businesses "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-25">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"are responding to the heavy hand of the green new deal agenda of "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Joe Biden and the Democrats in Washington, DC."</span>,</span>
<span id="cb17-27">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/Mike_Pence/status/1703887286641873137</span></span>
<span id="cb17-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We were the first country to sanction Chinese leaders for building "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-29">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"concentration camps in Xinjiang and for undermining democracy in Hong Kong. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-30">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"And we stood up to years of trade abuses, and imposed historic tariffs "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb17-31">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"to bring China to the negotiating table."</span></span>
<span id="cb17-32">]</span>
<span id="cb17-33"></span>
<span id="cb17-34">[model.classify(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pence_tweets]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>[&lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;]</code></pre>
</div>
</div>
<div id="9d56a846-ff42-4744-ad85-98842226edfa" class="cell" data-execution_count="11">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">newsom_tweets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1700615276667294035</span></span>
<span id="cb19-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"When people ask why I am introducing a Constitutional Amendment "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"on gun safety this is why. Not only has Congress stalled for YEARS on passing "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"common sense reforms -- judges across the country are tearing down laws that "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Americans overwhelmingly support. Laws that keep us SAFE and keep guns out of "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"the hands of dangerous criminals. We have to push back"</span>,</span>
<span id="cb19-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># # https://twitter.com/GavinNewsom/status/1689743766733877248</span></span>
<span id="cb19-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"California will be sending search and rescue "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"teams to assist in Hawaii's recovery efforts. The wildfires and "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"devastation that Maui is experiencing is all too familiar and all "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"too horrifying. We stand at the ready to aid Hawaii in its time of need."</span>,</span>
<span id="cb19-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1679579172690329601</span></span>
<span id="cb19-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A school board in Temecula decided to reject a "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"textbook because it mentioned Harvey Milk. CA is stepping in. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"We’re going to purchase the book for these students—the same "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one that hundreds of thousands of kids are already using. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-18">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"If these extremist school board members won’t do their job, "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-19">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"we will — and fine them for their incompetence."</span>,</span>
<span id="cb19-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1650634702271942656</span></span>
<span id="cb19-21">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"North Dakota GOP have decided to force women to give birth. Even victims of rape. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-22">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Meanwhile, they voted against providing school meals because child hunger isn't "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-23">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">the responsibility of the state.</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\"</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-24">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mandating birth is state responsibility. Helping feed those kids is not. Got it."</span>,</span>
<span id="cb19-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># https://twitter.com/GavinNewsom/status/1643745476662132737</span></span>
<span id="cb19-26">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Met with some librarians today while in Florida. "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-27">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"They shared with me the rich, diverse background of the "</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb19-28">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"town and what's at stake if we ban our kids from learning our real history."</span></span>
<span id="cb19-29">]</span>
<span id="cb19-30"></span>
<span id="cb19-31">[model.classify(t) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> newsom_tweets]</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>[&lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.DEMOCRATIC: 1&gt;,
 &lt;Classification.REPUBLICAN: 2&gt;]</code></pre>
</div>
</div>
<p>Neat! This small set classified 90% correctly. Further exploration with more robust Twitter data sets is warranted.</p>
</section>
<section id="closing-thoughts" class="level3">
<h3 class="anchored" data-anchor-id="closing-thoughts">Closing Thoughts</h3>
<p>Even after seeing the results, I still have a hard time believing that this works so well! It feels like it <em>shouldn’t</em> work at all. But, zooming out, there are a lot of relevant factors to consider. First, there just aren’t that many people writing campaign materials. It makes sense that word-choice and writing style would exhibit predictible patterns. Second, campaign emails have been A/B tested into oblivion, so there’s a systematic process that cranks out similar-sounding copy. Third, the recipients of these emails have largely self-sorted. This likely bolsters the expected structure and copy uniquely for each label. Ultimately, compression algorithms optimize on patterns and predictibility. What this shows us is that the two parties are uniquely <em>predictible</em> in their written communications.</p>
<p>The idea of classification by compression is not new; Russell and Norvig wrote about it in 1995 in the venerable <a href="https://aima.cs.berkeley.edu/3rd-ed/">Artificial Intelligence: A Modern Approach</a>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/aiama.png" class="img-fluid figure-img"></p>
<figcaption>Classification by data compression</figcaption>
</figure>
</div>
<p>More recently, the <a href="https://aclanthology.org/2023.findings-acl.426/">“gzip beats BERT” paper</a> got a lot of attention. What the <strong>BIDEN</strong> model demonstrates is that this technique is effective and likely generalizable on modern partisan texts.</p>
<p>It’s worth articulating again how fast and simple this method is. No GPUs. No Neural Networks. No N-grams. No transformers. No kNN.</p>
<p>I think that’s pretty cool!</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2023, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of BIDEN: Binary Inference Dictionaries for Electoral NLP nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/</guid>
  <pubDate>Sun, 01 Oct 2023 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2023-10-01-BIDEN-binary-inference-dictionaries-for-electoral-nlp/BIDEN.png" medium="image" type="image/png" height="81" width="144"/>
</item>
<item>
  <title>Building a Neural Network From Scratch with NumPy</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/</link>
  <description><![CDATA[ 





<p>This post is adapted from a Jupyter <a href="https://github.com/hodgesmr/neural_network_from_scratch">Notebook found on GitHub</a>.</p>
<p>The goal of this post is to give a hands-on explanation of how Artificial Neural Networks work. I intentionally avoided frameworks like PyTorch or Tensoflow because I wanted to build a better understanding of what Machine Learning models actually are, what Neural Networks actually are, and how they can be made. This post is a collection of information I wish I had when I began this journey. It touches on a little bit of the math, but I don’t deeply re-explain the math. I try to link out to more explanatory sources where I think it’s valuable. Note: I am not a Machine Learning engineer, nor am I a Data Scientist. I’m a Software Engineer that turned into a political operative (lol). I wrote this for an audience of Software Engineers. Also: I don’t have a GPU and I don’t want to spend a bunch of money renting one from Amazon. This model can be trained and deployed on a modern CPU in a matter of minutes.</p>
<section id="what-well-be-doing" class="level3">
<h3 class="anchored" data-anchor-id="what-well-be-doing">What We’ll Be Doing</h3>
<p>We’re going to build a Neural Network for multi-class classification. All that means is we’re going to make a model takes in images and attempts to label them from a set of options. In our case, we’re going to create a Neural Network that works with the <a href="https://yann.lecun.com/exdb/mnist/">MNIST database of handwritten digits</a>. This database contains 70,000 images of handwritten digits, 0 - 9, and corresponding labels of which digit the handwritten image is. We’ll use 60,000 of the images to train our Neural Network, and 10,000 to test its accuracy. The rest of this post assumes you have the data downloaded to a local <code>data/</code> directory.</p>
<p>Neural Networks are particularly handy for image classification tasks. There are many other types of Machine Learning out there, but we won’t spend any attention on those.</p>
</section>
<section id="background-concepts" class="level3">
<h3 class="anchored" data-anchor-id="background-concepts">Background Concepts</h3>
<section id="shape-of-a-neural-network" class="level4">
<h4 class="anchored" data-anchor-id="shape-of-a-neural-network">Shape of a Neural Network</h4>
<p>First of all, let’s demystify one thing: Neural Networks are just graphs. Just nodes and edges. If you’ve studied any Computer Science or have a background in Software Engineering, this is probably a familiar conecpet to you. The exact shape of any given Neural Network is dependant on how you build it, but that’s something we get to decide. The graph has an <strong>input layer</strong> that is usually one node per input feature. In our case, <strong>a pixel of an image is a feature</strong>. Next, there are one or more <strong>hidden layers</strong>. Hidden layers are simply nodes in the graph that are in the middle. They take inputs from other nodes, and the give outputs to other nodes. This is the part that makes it Deep Learning. The presence of one or more hidden layers is the “deep” in Deep Learning. There’s no standard rule for the size of a hidden layer, or how many you should have. Finally, there’s an <strong>output layer</strong>. Each node in the output layer corresponds to one label. For example, if a possible label to an image is “cat” then one node in the output layer represents “cat”. We’re going to make a Neural Network that has a bunch of input layer nodes, a single hidden layer with ten nodes, and an output layer with ten nodes, one for each digit 0 - 9.</p>
<p>Each Nueron (node) has a unique <strong>Weight</strong> and <strong>Bias</strong>, and each layer has an <strong>Activation Function</strong>. The Activation Function defines the output of a neuron given its inputs, and does not change. We’ll talk more about Activation Functions below. As we train our model, we adjust the Weights and Biases.</p>
<p>Here’s are drawing of a Neural Network with three input nodes, a hidden layer with four nodes, and an output layer with two nodes. This might be how you’d construct a Neural Network that does binary classification: a model that tries to label inputs to one of two options for outputs.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/artificial_neural_network.svg" class="img-fluid" alt="Artificial Neural Network"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">en:User:Cburnett, <a href="http://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a>, via Wikimedia Commons</td>
</tr>
</tbody>
</table>
<p>If you’re looking for more explanation of the structure of Neural Networks, “<a href="https://www.3blue1brown.com/lessons/neural-networks">But what is a Neural Network?</a>” by 3Blue1Brown is excellent.</p>
</section>
<section id="how-the-neural-network-learns" class="level4">
<h4 class="anchored" data-anchor-id="how-the-neural-network-learns">How the Neural Network Learns</h4>
<p>Neural Networks start out very stupid. As we’ll see, they begin with no more “intelligence” than random guessing. Our goal is to <strong>iteratively adjust the network’s Weights and Biases</strong> to make it smarter. This is called <strong>training</strong> and we do it in two steps: <strong>Forward Propagation</strong> and <strong>Back Propagation</strong>.</p>
<section id="forward-propagation" class="level5">
<h5 class="anchored" data-anchor-id="forward-propagation">Forward Propagation</h5>
<p>Think of this step as showing the Neural Network some input, and asking it to classify it. At the beginning, it’s very likely to get it wrong. But, like humans, we need to get things wrong before we know how to get them right. In Forward Propagation, we simply push all our features (pixels) through the Neural Network and ask, “what did you see?” The output is all the answers to that question.</p>
</section>
<section id="back-propagation" class="level5">
<h5 class="anchored" data-anchor-id="back-propagation">Back Propagation</h5>
<p>Think of this step as showing the Neural Network how right or wrong its answers were. We take all its answers to, “what did you see?” and come up with a measure of how wrong it was. We assign a numeric value to the “how wrong was it?” question with a <a href="https://www.simplilearn.com/tutorials/machine-learning-tutorial/cost-function-in-machine-learning">cost function</a>. From that numerica value, we can work backwards on all the neurons (nodes) to tell them, “you were X wrong, and this specific neuron contributed to Y amount of that error; adjust this neuron’s Weights and Biases by Z amount and try again.”</p>
<p>3Blue1Brown has another excellent video on the conecepts of Back Propagation: “<a href="https://www.3blue1brown.com/lessons/backpropagation">What is backpropagation really doing?</a>” It’s got some great visuals to show how Forward Propagation pushes data forward through the Neural Network, and how Back Propagation pushes error measures backwards thrrough the Neural Network.</p>
</section>
<section id="training" class="level5">
<h5 class="anchored" data-anchor-id="training">Training</h5>
<p>And that’s it! Our Neural Network learns by repeatedly making guesses, seeing how wrong it was, and adjusting its Weights and Biases. We repeat this over and over until it is good at the task! This is a lot like how people learn. Show a small child pictures of various farm animals over and over and ask them to name the animals. At first they’re very bad at it, but over time they get very good at it. There’s a lot of research out there that our artifical Neural Network is structured and operates like human brain neurons.</p>
</section>
</section>
<section id="gradient-descent" class="level4">
<h4 class="anchored" data-anchor-id="gradient-descent">Gradient Descent</h4>
<p>Gradient Descent is the most math-y piece of all this. Again, 3Blue1Brown has a great video: “<a href="https://www.3blue1brown.com/lessons/gradient-descent">Gradient descent, how neural networks learn</a>”. This is the piece that is the most <em>choose-your-own-adventure</em> for how much you want to actually understand. I recommend diving in at least a little bit.</p>
<p>Imagine being at a point graph and you want to find which step to take to get to the minimum value. If you’ve taken any calculus before, you know that you can take the slope at the current point to tell you which way the graph is trending, and by how much. If you do this over and over, with small steps, you will approach a local minimum. That’s a 1-dimensional gradient descent. Our plan is to work with lots of repeated steps to get to a minumum of our <a href="https://www.simplilearn.com/tutorials/machine-learning-tutorial/cost-function-in-machine-learning">cost function</a> — the function telling us how bad our predictions are.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/GradientDescentGradientStep.svg" class="img-fluid" alt="Gradient Descent"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">Reducing Loss: Gradient Descent, <a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>, via <a href="https://developers.google.com/machine-learning/crash-course/reducing-loss/gradient-descent">Google Developers</a></td>
</tr>
</tbody>
</table>
<p>You can do this in two and three domensions as well. In fact, you can do it in as many dimensions as you need, which is very handy, because image classification has lots of dimensions. Imagine a color image. Its obvious dimensions are the pixel’s X value, Y value, Red value, Green value, Blue value, alpha value, and probably many more.</p>
<p>Quick aside: <strong>a “tensor” is just a matrix with a high-order of dimensions</strong>.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th style="text-align: center;"><img src="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/GradientDescent.gif" class="img-fluid" alt="Gradient Descent"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><a href="https://creativecommons.org/publicdomain/zero/1.0/deed.en">CC0 1.0 Universal (CC0 1.0) Public Domain Dedication</a>, via Wikimedia Commons</td>
</tr>
</tbody>
</table>
<p>Ultimately, we keep moving downward in our many-dimensional cost function to find a minimum value. The lower the cost, the better the prediction.</p>
</section>
</section>
<section id="environment-setup" class="level3">
<h3 class="anchored" data-anchor-id="environment-setup">Environment Setup</h3>
<p>As stated, we’re going to build and train a fully functioning Neural Network using only <strong>NumPy</strong>. That said, I’m also going to install <strong>matplotlib</strong> just so that we can visualize some of the work as we go. It’s completely unnecessary to use matplotlib.</p>
<p>It’s also worth pointing out that I’m developing this in Python 3.10. Other versions of Python 3 probably work, too.</p>
<div id="d4d686c5" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div></div>
</div>
</section>
<section id="our-data" class="level3">
<h3 class="anchored" data-anchor-id="our-data">Our Data</h3>
<p>As mentioned, we’re going to be working with the MNIST database of handwritten digits. This is a very handy beginner’s data set because it’s done a lot of the upfront work for us. First of all, the data is normalized: <strong>all images are 28 x 28</strong> and <strong>grayscale</strong>. The standard size is particularly helpful because we’re going to need that to set up the input layer of our Neural Network. In other situations, you’d have to crop or squash or letterbox your images to make them a standard size. This is mostly boilerplate, but some details of the file format that you may wish to know:</p>
<ul>
<li>The images are encoded in the <a href="https://www.fon.hum.uva.nl/praat/manual/IDX_file_format.html">IDX file format</a>, which looks for the presence of some magic numbers</li>
<li>There’s a <a href="http://yann.lecun.com/exdb/mnist/">documented structure</a> to this data set, but that website is often behind HTTP basic auth because people like to script against it; here’s a <a href="https://webcache.googleusercontent.com/search?q=cache:yann.lecun.com/exdb/mnist/">Google cache</a></li>
<li>The images are gzip’d</li>
<li>The pixel values are 0 - 255, but we’re going to divide them into floats 0 - 1</li>
</ul>
<p>Here, we read in all the training data. We want to structure it into a matrix where each pixel is a row (this will line up with our input layer), and each image is a column. This gives us a matrix with 784 rows (28 x 28) and 60,000 columns.</p>
<p>This is the least intersting bit of code in the entire post.</p>
<div id="f92d65fc" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> gzip</span>
<span id="cb2-2"></span>
<span id="cb2-3">DATA_DIR <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'./data/'</span></span>
<span id="cb2-4">TEST_IMAGE_FILE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/t10k-images-idx3-ubyte.gz'</span></span>
<span id="cb2-5">TEST_LABEL_FILE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/t10k-labels-idx1-ubyte.gz'</span></span>
<span id="cb2-6">TRAINING_IMAGE_FILE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/train-images-idx3-ubyte.gz'</span></span>
<span id="cb2-7">TRAINING_LABEL_FILE_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>DATA_DIR<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/train-labels-idx1-ubyte.gz'</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_images_and_labels(image_file_path, label_file_path):</span>
<span id="cb2-10">    labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-11">    image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb2-12"></span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(label_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> label_file:</span>
<span id="cb2-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify magic number</span></span>
<span id="cb2-15">        magic_number_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_file.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-16">        magic_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(magic_number_bytes, byteorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>, signed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> magic_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2049</span></span>
<span id="cb2-18"></span>
<span id="cb2-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read header telling us the number of labels</span></span>
<span id="cb2-20">        number_of_labels_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_file.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-21">        number_of_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(</span>
<span id="cb2-22">            number_of_labels_bytes, byteorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>, signed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-23">        )</span>
<span id="cb2-24"></span>
<span id="cb2-25">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> label_file.read(number_of_labels)</span>
<span id="cb2-26">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.frombuffer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.uint8)</span>
<span id="cb2-27"></span>
<span id="cb2-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> gzip.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(image_file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> image_file:</span>
<span id="cb2-29">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Verify magic number</span></span>
<span id="cb2-30">            magic_number_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_file.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-31">            magic_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(</span>
<span id="cb2-32">                magic_number_bytes, byteorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>, signed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-33">            )</span>
<span id="cb2-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> magic_number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2051</span></span>
<span id="cb2-35"></span>
<span id="cb2-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read header telling us the number of images</span></span>
<span id="cb2-37">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And check that it matches the number of labels</span></span>
<span id="cb2-38">            number_of_images_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_file.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-39">            number_of_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(</span>
<span id="cb2-40">                number_of_images_bytes, byteorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>, signed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-41">            )</span>
<span id="cb2-42">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> number_of_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> number_of_labels</span>
<span id="cb2-43"></span>
<span id="cb2-44">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the image height header</span></span>
<span id="cb2-45">            image_height_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_file.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-46">            image_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(</span>
<span id="cb2-47">                image_height_bytes, byteorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>, signed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-48">            )</span>
<span id="cb2-49"></span>
<span id="cb2-50">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the image width header</span></span>
<span id="cb2-51">            image_width_bytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_file.read(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb2-52">            image_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>.from_bytes(</span>
<span id="cb2-53">                image_width_bytes, byteorder<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'big'</span>, signed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-54">            )</span>
<span id="cb2-55"></span>
<span id="cb2-56">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># read in the image data</span></span>
<span id="cb2-57">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_file.read(image_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> image_height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> number_of_images)</span>
<span id="cb2-58">            image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.frombuffer(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">buffer</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.uint8).astype(np.float64) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb2-59"></span>
<span id="cb2-60">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape it to a matrix such that each column is the pixels of the image</span></span>
<span id="cb2-61">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># So, we end up with a matrix with `image_width*image_height` rows and `number_of_images` colums</span></span>
<span id="cb2-62">            image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> image_data.reshape(</span>
<span id="cb2-63">                number_of_images, image_width <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> image_height</span>
<span id="cb2-64">            ).T</span>
<span id="cb2-65"></span>
<span id="cb2-66">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> image_data, labels</span></code></pre></div></div>
</div>
<p>And show the first image and label:</p>
<div id="7a4764e8" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">training_image_data, training_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_images_and_labels(TRAINING_IMAGE_FILE_PATH, TRAINING_LABEL_FILE_PATH)</span>
<span id="cb3-2">first_image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_image_data[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># All the rows in the first column, reshaped back to 28 x 28</span></span>
<span id="cb3-3">first_image_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_labels[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Label: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>first_image_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb3-6">plt.imshow(first_image_data, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray_r'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-7">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Label: 5</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/index_files/figure-html/cell-4-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="an-untrained-neural-network" class="level3">
<h3 class="anchored" data-anchor-id="an-untrained-neural-network">An Untrained Neural Network</h3>
<section id="initializing-weights-and-biases" class="level4">
<h4 class="anchored" data-anchor-id="initializing-weights-and-biases">Initializing Weights and Biases</h4>
<p>The first step in creating our Neural Network is to build out Forward Propagation. Since our Neural Network will have an input layer, one hidden layer, and an output layer, we’ll need: * A set of Weights and Biases on the input layer * An Activation Function on the input layer * A set of Weights and Biases on the hidden layer * An Activation Function on the hidden layer</p>
<p>As mentioned, the Weights and Biases are variable and are determined in the model’s training process. But our model needs to start somewhere. There are a variety of strategies for initializing Weights and Biases. You could initialize to random values, but we’re going to use the <a href="https://towardsdatascience.com/coding-neural-network-parameters-initialization-f7c2d770e874">He method</a> to initialize random Weights, and the <a href="https://cs231n.github.io/neural-networks-2/">common recommendation of Biases initialized to zero</a>.</p>
<div id="896d9690" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights_1 is the matrix of Weights between our input nodes and the first hidden layer</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it has the shape num_labels x image_size</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># biases_1 is the matrix of Biases between our input nodes and the first hidden layer</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it has the shape num_labels x 1</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># weights_2 is the matrix of Weights between our hidden layer and our output layer</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it has the shape num_labels x num_labels</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># biases_2 is the matrix of biases between our hidden layer and our output layer</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># it has the shape num_labels x 1</span></span>
<span id="cb5-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init_params(input_layer_size, hidden_layer_size, output_layer_size):</span>
<span id="cb5-13">    weights_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(</span>
<span id="cb5-14">        hidden_layer_size,</span>
<span id="cb5-15">        input_layer_size,</span>
<span id="cb5-16">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> input_layer_size)</span>
<span id="cb5-17">    </span>
<span id="cb5-18">    weights_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(</span>
<span id="cb5-19">        hidden_layer_size,</span>
<span id="cb5-20">        output_layer_size,</span>
<span id="cb5-21">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.sqrt(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> hidden_layer_size)</span>
<span id="cb5-22"></span>
<span id="cb5-23">    biases_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((hidden_layer_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-24">    biases_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((output_layer_size, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb5-25"></span>
<span id="cb5-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weights_1, biases_1, weights_2, biases_2</span></code></pre></div></div>
</div>
</section>
<section id="input-layer-activation-function" class="level4">
<h4 class="anchored" data-anchor-id="input-layer-activation-function">Input Layer Activation Function</h4>
<p>Next we need to select an activation function on our input layer. Common options are <a href="https://en.wikipedia.org/wiki/Sigmoid_function">sigmoid</a> and <a href="https://en.wikipedia.org/wiki/Rectifier_%28neural_networks%29">ReLU</a>. ReLU is very effective and is a very common choice in computer vision models. Also, it’s incredibly simple to implement, so we’ll go with that.</p>
<p>All it does is take a value as input, and if the value is less than 0, return 0; if the value is greater than 0, return that value. That’s it! <a href="https://www.aitude.com/comparison-of-sigmoid-tanh-and-relu-activation-functions/">Here’s a handy post comparing ReLU to other activation functions</a>.</p>
<div id="527eed8a" class="cell" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> relu(value):</span>
<span id="cb6-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.maximum(value, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div></div>
</div>
</section>
<section id="hidden-layer-activation-function" class="level4">
<h4 class="anchored" data-anchor-id="hidden-layer-activation-function">Hidden Layer Activation Function</h4>
<p>The last piece we need for our Forward Propagation is an Activation Function on the hidden layer. Remember: this Activation Function is feeding to our output layer, so we need something that generates ten prediction values. A good way to do this is to take our unactivated hidden layer and normalize it such that it outputs “prediction odds” to our output layer. Put another way, if the model is 91% sure an input is the number 5, it should activate the 5’s output node to 0.91, and the sum of all the other predictions should come to 0.09.</p>
<p>What we’ve just described is called the <a href="https://en.wikipedia.org/wiki/Softmax_function">Softmax function</a>. The mast might look a little strange (<a href="https://towardsdatascience.com/softmax-activation-function-explained-a7e1bc3ad60">here’s a good explainer</a>), but all it’s doing is taking in a set of numbers and normalizing them to be 0 - 1, with a sum of 1.</p>
<div id="66a326c3" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> softmax(inputs):</span>
<span id="cb7-2">    exponentiated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(inputs)</span>
<span id="cb7-3">    probabilities <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> exponentiated <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(exponentiated, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> probabilities</span></code></pre></div></div>
</div>
</section>
<section id="forward-propagation-1" class="level4">
<h4 class="anchored" data-anchor-id="forward-propagation-1">Forward Propagation</h4>
<p>We can now combine our initialized Weights and Biases and our Activation Functions to define Forward Propagation. You’ll notice some matrix math in here. Since our features (pixels) are arranged in a matrix, this is much more efficient that piping every pixel through functions one at a time. This becomes particularly true when you’re working with Neural Networks of higher dimensions. <a href="https://www.youtube.com/watch?v=87_7YVCnAOw">Here’s a refresher on matrix dot product</a>. But you can basically think of it as multiplying the neurons in a layer by their weights.</p>
<div id="33feb5fa" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward_prop(weights_1, biases_1, weights_2, biases_2, input_layer):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First, calculate the unactivated values of the neurons in the first hidden layer</span></span>
<span id="cb8-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dot product weights_1 on input_layer, and then add biases_1</span></span>
<span id="cb8-4">    unactivated_hidden_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_1.dot(input_layer) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> biases_1</span>
<span id="cb8-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then apply the ReLU activation function, to get our first hidden layer</span></span>
<span id="cb8-6">    activated_hidden_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> relu(unactivated_hidden_layer)</span>
<span id="cb8-7"></span>
<span id="cb8-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Next calculate the unactivated values of the neurons in the output layer</span></span>
<span id="cb8-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dot product weights_2 on activated_hidden_layer, and then add biases_2</span></span>
<span id="cb8-10">    unactivated_output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_2.dot(activated_hidden_layer) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> biases_2</span>
<span id="cb8-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Then apply the softmax activation function, to get our activated output layer</span></span>
<span id="cb8-12">    output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> softmax(unactivated_output_layer)</span>
<span id="cb8-13"></span>
<span id="cb8-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> unactivated_hidden_layer, activated_hidden_layer, unactivated_output_layer, output_layer</span></code></pre></div></div>
</div>
<p>This is actually all we need to do to have our model make a prediction. If we pass in a matrix of images, it’ll give an <code>output_layer</code> of predicted labels. But remember, we haven’t actually trained it yet, so it’ll make <strong>very bad predictions</strong>. The two types of variables we have, the Weights and Biases, are set to random values. So this thing is going to perform with roughly 10% accuracy (randomly picking one of our ten digits). Let’s see that.</p>
<p>We can define a measure of accuracy by dividing the number of correct predictions (the labels with the highest value in <code>output_layer</code>) by total number of predictions.</p>
<div id="6f060dab" class="cell" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_predictions(output_layer):</span>
<span id="cb9-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.argmax(output_layer, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return the index of the max value prediction</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_accuracy(predictions, labels):</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> labels) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> labels.size</span></code></pre></div></div>
</div>
<p>Here’s what we get:</p>
<div id="c8d57e2e" class="cell" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set up our Neural Network shape</span></span>
<span id="cb10-2">image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_image_data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb10-3">num_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(np.unique(training_labels))</span>
<span id="cb10-4">hidden_layer_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_labels</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize our Weights and Biases</span></span>
<span id="cb10-7">weights_1, biases_1, weights_2, biases_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(image_size, hidden_layer_size, num_labels)</span>
<span id="cb10-8"></span>
<span id="cb10-9">( </span>
<span id="cb10-10">    unactivated_hidden_layer,</span>
<span id="cb10-11">    activated_hidden_layer,</span>
<span id="cb10-12">    unactivated_output_layer,</span>
<span id="cb10-13">    output_layer,</span>
<span id="cb10-14">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_prop(</span>
<span id="cb10-15">    weights_1,</span>
<span id="cb10-16">    biases_1,</span>
<span id="cb10-17">    weights_2,</span>
<span id="cb10-18">    biases_2,</span>
<span id="cb10-19">    training_image_data,</span>
<span id="cb10-20">)</span>
<span id="cb10-21"></span>
<span id="cb10-22">predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions(output_layer)</span>
<span id="cb10-23">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_accuracy(predictions, training_labels)</span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Accuracy: 8.22%</code></pre>
</div>
</div>
</section>
</section>
<section id="training-the-neural-network" class="level3">
<h3 class="anchored" data-anchor-id="training-the-neural-network">Training the Neural Network</h3>
<p>Now that we have a stupid Neural Network, let’s train it so it can become a smart Neural Network. As mentioned before, Back Propagation is the proces in which we take the predictions from Forward Propagation, measure the error, and adjust our Weights and Biases through Gradient Descent.</p>
<p>Before we begin, we need one more helper function. We want to compare our known labels to all our predictions, and we can do that with a matrix with values of 1 (100%) at the correct index and 0 (0%) at all the incorrect indexes. We do this with <a href="https://en.wikipedia.org/wiki/One-hot">One-hot encoding</a>.</p>
<div id="4814221a" class="cell" data-execution_count="11">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> one_hot(num_labels, labels):</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a matrix of all zeroes with shape num_images x num_labels</span></span>
<span id="cb12-3">    one_hot_y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((labels.size, num_labels))</span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For every image row, set Y'th (actual label) column to 1</span></span>
<span id="cb12-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># So, if the first row has label 5, set the 5th column to 1</span></span>
<span id="cb12-6">    one_hot_y[np.arange(labels.size), labels] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb12-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return the Transposed matrix, so in the above example, the 5th row first column is 1</span></span>
<span id="cb12-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> one_hot_y.T</span></code></pre></div></div>
</div>
<div id="25609f81" class="cell" data-execution_count="12">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">one_hot_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot(num_labels, training_labels)</span></code></pre></div></div>
</div>
<section id="back-propagation-1" class="level4">
<h4 class="anchored" data-anchor-id="back-propagation-1">Back Propagation</h4>
<p>This is where we actually do our Gradient Descent. It contains a little bit of calculus, and I highly adivse you pause here and watch these three videos: * <a href="https://www.3blue1brown.com/lessons/backpropagation">What is backpropagation really doing?</a> * <a href="https://www.3blue1brown.com/lessons/backpropagation-calculus">Backpropagation Calculus</a> * <a href="https://www.youtube.com/watch?v=f-nW8cSa_Ec">Backpropagation for Softmax and Multi-Class Classification | Complete Mathematical Derivation</a></p>
<p>It’s actually not all that imporant to master the calculus in these videos, but it’s very helpful to see what math is happening. From a high-level: we take the derivatives of our activation functions, and we reverse our matrix multiplication. It’s actually not too daunting. In the end, it gives is a measurement of error, and we use that error to adjust our Weights and Biases.</p>
<p>Speaking of derivatives, we’re gonna need the derivated of our ReLU Activation Function:</p>
<div id="69a64a23" class="cell" data-execution_count="13">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rectified_linear_unit only ever has a slope of 0 (negative X), or 1 (positive X)</span></span>
<span id="cb14-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> derivative_rectified_linear_unit(Z):</span>
<span id="cb14-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Z <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div></div>
</div>
<p>And now we just go backwards through the Neural Network:</p>
<div id="a6b7cd01" class="cell" data-execution_count="14">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> back_prop(unactivated_hidden_layer, activated_hidden_layer, weights_2, output_layer, one_hot_output, training_image_data):</span>
<span id="cb15-2">    num_images <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot_output.size</span>
<span id="cb15-3"></span>
<span id="cb15-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The difference between the predictions and the actual labels</span></span>
<span id="cb15-5">    d_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> one_hot_output</span>
<span id="cb15-6"></span>
<span id="cb15-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Take that d_predictions and cary back to the activated hidden layer</span></span>
<span id="cb15-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And then average over all the neurons</span></span>
<span id="cb15-9">    d_weights_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_images) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_predictions.dot(activated_hidden_layer.T)</span>
<span id="cb15-10"></span>
<span id="cb15-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Derivative of biases_ 2 is acutally just an average of the abosolute error</span></span>
<span id="cb15-12">    d_biases_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_images) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(d_predictions)</span>
<span id="cb15-13"></span>
<span id="cb15-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Derivative of unactived hidden layer</span></span>
<span id="cb15-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transpose the 2nd layer weights and dot on the known d_predictions</span></span>
<span id="cb15-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And multiply that by the derivative of the activation function</span></span>
<span id="cb15-17">    d_hidden_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_2.T.dot(d_predictions) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> derivative_rectified_linear_unit(unactivated_hidden_layer)</span>
<span id="cb15-18"></span>
<span id="cb15-19">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Again, take our current derivative and cary it back to the input layer</span></span>
<span id="cb15-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And average it over all the neurons</span></span>
<span id="cb15-21">    d_weights_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_images) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_hidden_layer.dot(training_image_data.T)</span>
<span id="cb15-22">    </span>
<span id="cb15-23">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Derivative of biases_1 is like biases_2, but it's a simple average of the abolute error from the hiddle layer</span></span>
<span id="cb15-24">    d_biases_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> num_images) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(d_hidden_layer)</span>
<span id="cb15-25"></span>
<span id="cb15-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> d_weights_1, d_biases_1, d_weights_2, d_biases_2</span></code></pre></div></div>
</div>
</section>
</section>
<section id="training-our-model" class="level3">
<h3 class="anchored" data-anchor-id="training-our-model">Training Our Model</h3>
<section id="learning-rate" class="level4">
<h4 class="anchored" data-anchor-id="learning-rate">Learning Rate</h4>
<p>We’re almost ready to train our model. The last piece here is to actually update our Weights and Biases after Back Propagation. You may be tempted to simply subracts the differences returned by <code>back_prop</code> but it’s not quite so simple. Remember, our Gradient Descent is good at telling us the slope at our current location, but it’s very unlikely to be a straight line. Instead, we’re going to want to take smaller steps so that we don’t over-shoot.</p>
<p>We need to introduce a variable called <code>learning_rate</code>, sometimes called <strong>alpha</strong>. This is a <a href="https://en.wikipedia.org/wiki/Hyperparameter_(machine_learning)">hyperparameter</a>, which simply means that our model can’t learn the correct value through training; we have to set it ourselves. There are techniques to make this process more efficient, but usually it’s a bit of guess and check. If your model has a very bad time improving, you should try adjusting your learning rate. Common learning rates are between 0.01 and 1. If you’d like to read more about picking a learning rate, <a href="https://www.jeremyjordan.me/nn-learning-rate/">this is a good post</a>.</p>
<p>Through some trial and error, I found that a learning rate of 0.5 worked pretty well for this model.</p>
<div id="928e16c7" class="cell" data-execution_count="15">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span></code></pre></div></div>
</div>
<p>We can use this to update our Weights and Biases:</p>
<div id="00d851bb" class="cell" data-execution_count="16">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> update_params(weights_1, biases_1, weights_2, biases_2, d_weights_1, d_biases_1, d_weights_2, d_biases_2, learning_rate):</span>
<span id="cb17-2">    weights_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_weights_1</span>
<span id="cb17-3">    biases_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> biases_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_biases_1</span>
<span id="cb17-4">    weights_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> weights_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_weights_2</span>
<span id="cb17-5">    biases_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> biases_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> learning_rate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> d_biases_2</span>
<span id="cb17-6"></span>
<span id="cb17-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> weights_1, biases_1, weights_2, biases_2</span></code></pre></div></div>
</div>
</section>
<section id="training-1" class="level4">
<h4 class="anchored" data-anchor-id="training-1">Training</h4>
<p>Now let’s train our model! You might recall that it’ll take many iterations of Forward Propagation and Back Propagation for our model to get smart. But how many iterations? I don’t actually know! Let’s decide right now that we want our model to be at least 90% accurate on the training data. We’ve already got a function to tell us accuracy, so let’s let it train until that reaches 90%.</p>
<p>This is the slow part, and the part that often benefits from GPUs. But, as you’ll see, this Neural Network trains surpisingly quickly! On my laptop with no GPU and a 2.6 GHz 6-Core Intel Core i7, the model rechease 90% accuracy on the training data in under two minutes!</p>
<div id="b0f215b0" class="cell" data-execution_count="17">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">image_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> training_image_data.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb18-2">num_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(np.unique(training_labels))</span>
<span id="cb18-3">hidden_layer_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_labels</span>
<span id="cb18-4"></span>
<span id="cb18-5">weights_1, biases_1, weights_2, biases_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> init_params(image_size, hidden_layer_size, num_labels)</span>
<span id="cb18-6"></span>
<span id="cb18-7">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-8">iteration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb18-9">accuracy_measurements <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A running list of our accuracy for each iteration</span></span>
<span id="cb18-10"></span>
<span id="cb18-11"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>:</span>
<span id="cb18-12">    iteration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-13"></span>
<span id="cb18-14">    ( </span>
<span id="cb18-15">        unactivated_hidden_layer,</span>
<span id="cb18-16">        activated_hidden_layer,</span>
<span id="cb18-17">        unactivated_output_layer,</span>
<span id="cb18-18">        output_layer,</span>
<span id="cb18-19">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_prop(</span>
<span id="cb18-20">        weights_1,</span>
<span id="cb18-21">        biases_1,</span>
<span id="cb18-22">        weights_2,</span>
<span id="cb18-23">        biases_2,</span>
<span id="cb18-24">        training_image_data,</span>
<span id="cb18-25">    )</span>
<span id="cb18-26"></span>
<span id="cb18-27">    one_hot_output <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> one_hot(num_labels, training_labels)</span>
<span id="cb18-28"></span>
<span id="cb18-29">    (</span>
<span id="cb18-30">        d_weights_1,</span>
<span id="cb18-31">        d_biases_1,</span>
<span id="cb18-32">        d_weights_2,</span>
<span id="cb18-33">        d_biases_2,</span>
<span id="cb18-34">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> back_prop(</span>
<span id="cb18-35">        unactivated_hidden_layer,</span>
<span id="cb18-36">        activated_hidden_layer,</span>
<span id="cb18-37">        weights_2, output_layer,</span>
<span id="cb18-38">        one_hot_output,</span>
<span id="cb18-39">        training_image_data,</span>
<span id="cb18-40">    )</span>
<span id="cb18-41"></span>
<span id="cb18-42">    (</span>
<span id="cb18-43">        weights_1,</span>
<span id="cb18-44">        biases_1,</span>
<span id="cb18-45">        weights_2,</span>
<span id="cb18-46">        biases_2,</span>
<span id="cb18-47">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> update_params(</span>
<span id="cb18-48">        weights_1,</span>
<span id="cb18-49">        biases_1,</span>
<span id="cb18-50">        weights_2,</span>
<span id="cb18-51">        biases_2,</span>
<span id="cb18-52">        d_weights_1,</span>
<span id="cb18-53">        d_biases_1,</span>
<span id="cb18-54">        d_weights_2,</span>
<span id="cb18-55">        d_biases_2,</span>
<span id="cb18-56">        learning_rate,</span>
<span id="cb18-57">    )</span>
<span id="cb18-58"></span>
<span id="cb18-59">    predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions(output_layer)</span>
<span id="cb18-60">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_accuracy(predictions, training_labels)</span>
<span id="cb18-61"></span>
<span id="cb18-62">    accuracy_measurements.append(accuracy)</span>
<span id="cb18-63"></span>
<span id="cb18-64">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print out upadtes as we go</span></span>
<span id="cb18-65">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> iteration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> iteration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:  </span>
<span id="cb18-66">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Iteration: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>iteration<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span>
<span id="cb18-67"></span>
<span id="cb18-68"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Achieved </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">% accuracy after </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>iteration<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> iterations!'</span>)</span>
<span id="cb18-69"></span>
<span id="cb18-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the accuracy curve</span></span>
<span id="cb18-71">plt.plot(accuracy_measurements)</span>
<span id="cb18-72">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Iteration'</span>)</span>
<span id="cb18-73">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Accuracy'</span>)</span>
<span id="cb18-74">plt.ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb18-75">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Iteration: 1 | Accuracy: 9.41%
Iteration: 100 | Accuracy: 72.68%
Iteration: 200 | Accuracy: 82.50%
Iteration: 300 | Accuracy: 85.56%
Iteration: 400 | Accuracy: 87.01%
Iteration: 500 | Accuracy: 87.85%
Iteration: 600 | Accuracy: 88.51%
Iteration: 700 | Accuracy: 88.97%
Iteration: 800 | Accuracy: 89.37%
Iteration: 900 | Accuracy: 89.66%
Iteration: 1000 | Accuracy: 89.90%
Achieved 90.00% accuracy after 1037 iterations!</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/index_files/figure-html/cell-17-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now we have the Weights and Biases for our Neural Network to achieve 90% accuracy against our training data. That’s pretty cool, but the real test to to run images through the model that it’s never seen before. If we overfit the model, it might only be good at recognizing the images it was trained on (kindof like cramming for a test and memorizing the answers without actually learning anything). Let’s run it against our 10,000 test images. At this point we only need to run it through <code>forward_prop</code> because we’re no longer training. This is very fast!</p>
<div id="d6773362" class="cell" data-execution_count="18">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">test_image_data, test_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_images_and_labels(TEST_IMAGE_FILE_PATH, TEST_LABEL_FILE_PATH)</span>
<span id="cb20-2">_, _, _, test_output_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> forward_prop(</span>
<span id="cb20-3">        weights_1,</span>
<span id="cb20-4">        biases_1,</span>
<span id="cb20-5">        weights_2,</span>
<span id="cb20-6">        biases_2,</span>
<span id="cb20-7">        test_image_data,</span>
<span id="cb20-8">    )</span>
<span id="cb20-9">test_predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_predictions(test_output_layer)</span>
<span id="cb20-10">test_accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_accuracy(test_predictions, test_labels)</span>
<span id="cb20-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Test Data Set Accuracy: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_accuracy<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.2f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">%'</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-stdout">
<pre><code>Test Data Set Accuracy: 90.32%</code></pre>
</div>
</div>
<p>That’s great! And let’s look at a sample of 10 test images and how they were labeled:</p>
<div id="ef9539d3" class="cell" data-execution_count="19">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(nrows<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb22-2"></span>
<span id="cb22-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> axes.flat:</span>
<span id="cb22-4">    random_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randint(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(test_labels))</span>
<span id="cb22-5">    random_test_image_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_image_data[:, random_index].reshape((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>))</span>
<span id="cb22-6">    random_test_image_label <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_labels[random_index]</span>
<span id="cb22-7">    random_prediction <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_predictions[random_index]</span>
<span id="cb22-8"></span>
<span id="cb22-9">    ax.imshow(random_test_image_data, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gray_r'</span>, vmin<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, vmax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-10">    ax.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Actual: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>random_test_image_label<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Predicted: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>random_prediction<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span>
<span id="cb22-11"></span>
<span id="cb22-12">plt.tight_layout()</span>
<span id="cb22-13">plt.show()</span></code></pre></div></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Very impressive!</p>
<p>We’ve successfully built a computer vision Machine Learning model using nothing but NumPy. Hopefully this demystified some of the some of the concepts of Neural Networks!</p>
</section>
</section>
<section id="acknowledgements" class="level3">
<h3 class="anchored" data-anchor-id="acknowledgements">Acknowledgements</h3>
<p>My first pass at tackling this topic began with Samson Zhang’s “<a href="https://www.youtube.com/watch?v=w8yWXqWQYmU">Building a neural network FROM SCRATCH (no Tensorflow/Pytorch, just numpy &amp; math)</a>”. This post looks a lot like his work, though I hit a number of implementation errors while following along. After digging into the articles and videos linked in this post, I made a number of adjustments to the model’s training to get to this final output.</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2023, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Building a Neural Network From Scratch with NumPy nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/</guid>
  <pubDate>Sun, 06 Aug 2023 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2022-08-06-neural-network-from-scratch-python-numpy/neural_network_social.png" medium="image" type="image/png" height="71" width="144"/>
</item>
<item>
  <title>Exploring the Lambda Calculus with Python</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/</link>
  <description><![CDATA[ 





<p><img src="https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/lambda-calculus-python.jpeg" class="img-fluid"></p>
<p>This post is adapted from a Jupyter <a href="https://github.com/hodgesmr/python_lambda_calculus">Notebook found on GitHub</a>.</p>
<p>This post explores some basic ideas of the Lambda Calculus, and how to use it to implement a computation system with it. We will define numbers and operators from scratch, and use that to implement the <code>square_sum</code> function.</p>
<p>If you’re new to the Lambda Calculus, or functional programming in general, you may wish to start with some of these resources:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=pkCLMl0e_0k">David Beazley’s Lambda Calculus from the Ground Up - PyCon 2019</a>
<ul>
<li>If you’re someone who learns well by watching and listening, I highly recommend that you watch this talk. A significant portion of the concepts below come from watching this talk more than once.</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=AqNDk_UJW4k">Ben Eater’s Making a computer Turing complete</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda Calculus | Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Currying">Currying | Wikipedia</a></li>
</ul>
<p>This post assumes you are fairly familiar with Python and Python’s <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions">lambda expressions</a>.</p>
<section id="rules-of-our-system" class="level3">
<h3 class="anchored" data-anchor-id="rules-of-our-system">Rules of Our System</h3>
<p>The Lambda Calculus asserts that any computational system can be implemented with a set of three simple rules:</p>
<ul>
<li>You can define variables</li>
<li>You can define single-argument functions</li>
<li>You can call single-argument functions</li>
</ul>
<p>That’s it. <strong>No numbers. No operators. No control flow. No data structures.</strong></p>
<p>I find it fascinating that with these very minimal concepts, the Lambda Calculus asserts that we can create a fully functional computer! This is, of course, a very minimal explanation of the rules of the Lambda Calculus, and I invite you to consult the references above for more information and formal definitions!</p>
</section>
<section id="the-challenge" class="level3">
<h3 class="anchored" data-anchor-id="the-challenge">The Challenge</h3>
<p>Using the rules described above, we want to create a system that can calculate the square-sum of any inputs. Again, we <em>only</em> have single-argument functions. That means we have no integers, no addition, and no multiplication. We’re going to have to create those using nothing but single-argument functions that accept single-argument functions as input and can only return single-argument functions.</p>
<p>For reference, consider the <code>square_sum</code> function, that may be written in Python as:</p>
<div id="34049a45" class="cell" data-execution_count="1">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_sum(a, b):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b)</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">square_sum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>29</code></pre>
</div>
</div>
<section id="currying" class="level4">
<h4 class="anchored" data-anchor-id="currying">Currying</h4>
<p>As previously mentioned, our computation system requires that we can only create functions and those functions must accept one and only one argument. This may seem like a limiting requirement, but let’s take a look at what we can do with the idea of <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> — a method for transforming multi-argument functions into a chain of single-argument functions. This allows us to re-write our Python implementation as:</p>
<div id="37bba6c1" class="cell" data-execution_count="2">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_sum(a):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):</span>
<span id="cb3-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b)</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7">square_sum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>29</code></pre>
</div>
</div>
<p>In our curried version above, <code>square_sum</code> accepts the first argument, <code>a</code> and returns a function that accepts the second argument, <code>b</code>. We can then call that returned <code>inner</code> function to complete our calculation. Currying is a fundamental strategy for computation in the Lambda Calculus.</p>
</section>
</section>
<section id="our-basic-building-block" class="level3">
<h3 class="anchored" data-anchor-id="our-basic-building-block">Our Basic Building Block</h3>
<p>Unless you’re already familiary with the Lambda Calculus, or you’re a veteran of functional programming, you’re probaby very accustomed to computing by operating on <em>state</em>. You have data structures, or numbers, or bits, and you operate on them and then you persist new data structures, or numbers, or bits.</p>
<p>Our concept of integers is a perfect example. As children, we learned that the concept of <code>3</code> can be represented by holding up three fingers on our hand, and seeing all three of them, and pointing to them. The Lambda Calculus asks us to adjust that concept away from <em>state</em> and towards <em>behavior</em>. Instead of holding up three fingers, what if we held up <em>one finger three times</em>. It may be harder for us see that idea of <code>3</code>, but it is a representation of <code>3</code> nonetheless.</p>
<p>Sit with this idea of behavior representing integers, because behavior will be how we represent <em>everything</em>. And in our system, functions are behavior. Our function could be the act of holding up a finger, pressing a button, or anything else we need it to be.</p>
<p>Let’s use that metaphor of pressing a button. The button press is our behavior, and behaviors are functions. And arguments are functions. And we can only return functions. So, let’s write that:</p>
<div id="8e41ad57" class="cell" data-execution_count="3">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> button_press(f):</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span></code></pre></div></div>
</div>
<p>Not much to see here yet. In fact, our system isn’t designed to <em>see</em> anything. It’s designed to do computations within a given set of rules.</p>
<p>We’re designing a system of computation, and we can think about this system like instruction that run on a CPU. But we’re humans, and it’s helpful for us to be able to see the results of our computation in ways that we can understand. So, we’re going to introduce an external system that is <em>not</em> within the Lambda Calculus, but can interface with it. Think of this as a peripheral like a printer. It’s not used to <em>do</em> any of our computation. It can do special things that our CPU can’t do, and it’ll connect to our system as a function, because our system can only work with functions.</p>
<p>Let’s pretend our system has a printer attached that can only print the <code>*</code> character. We’ll interface with it via an <code>emit</code> function.</p>
<p>Here is our not-of-our-system <code>emit</code> function:</p>
<div id="1e7bbf0c" class="cell" data-execution_count="4">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> emit(func):</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> asterisk(x):</span>
<span id="cb6-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">*'</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> func(asterisk)(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div></div>
</div>
<p>This is kindof strange. Our external <code>emit</code> function takes in some function and has an inner asterisk-generating function. Let’s hook it up to our <code>button_press</code> function:</p>
<div id="80694f8f" class="cell" data-execution_count="5">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">emit(button_press)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>'*'</code></pre>
</div>
</div>
<p>What just happened here? We call our <code>emit</code> function (external from our system) by passing in our <code>button_press</code> function (internal to our system). We did it one time, and it yielded a single <code>*</code>. Again, this is just a convenience interface so that we can see what’s going on, and isn’t necessary to do any of our actual computation.</p>
</section>
<section id="numbers" class="level3">
<h3 class="anchored" data-anchor-id="numbers">Numbers</h3>
<p>Above we began to describe how functions, or behaviors, can represent numbers. A single call to <code>button_press</code> yielded some concept of <code>1</code>. What if we didn’t think about it as one call to <code>button_press</code> anymore, but as the idea of <em>one behavior</em>:</p>
<div id="f4b96dcb" class="cell" data-execution_count="6">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ONE(f):</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb9-5"></span>
<span id="cb9-6">emit(ONE)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'*'</code></pre>
</div>
</div>
<p>If you’ve made it this far, you’re probably thinking, “Hey, Python has a way to represent single-argument functions, and they’re called <em>lambdas</em>!” Let’s start using that instead of the expanded <code>button_press</code> function:</p>
<div id="f829cb33" class="cell" data-execution_count="7">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(x)</span>
<span id="cb11-2"></span>
<span id="cb11-3">emit(ONE)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'*'</code></pre>
</div>
</div>
<p>Cool. So we know how to represent the concept of <code>1</code> using only single-argument functions. We can represent <code>2</code> by calling our function twice, because in our system numbers are behaviors:</p>
<div id="449512ef" class="cell" data-execution_count="8">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: f(f(x))</span>
<span id="cb13-2"></span>
<span id="cb13-3">emit(TWO)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>'**'</code></pre>
</div>
</div>
<p>This is all well and good, but we’re not really going to try to implement every single number are we? That wouldn’t make a very good computer. How can we represent all countable numbers?</p>
<p>If you look closely at our definitions above, <code>ONE</code> is a single call to <code>f()</code>, while <code>TWO</code> is <code>f(f())</code>. This means that if we’re at any given number, we can get to the next number by calling <code>f()</code> again. We can define an <code>INCREMENT()</code> function to do just that. I find it helpful to start by looking at this through the expanded Python functions first:</p>
<div id="666a4eef" class="cell" data-execution_count="9">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ONE(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f is the behavior we want to do</span></span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the curried second argument</span></span>
<span id="cb15-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb15-5"></span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> INCREMENT(n):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is the concept of the number we already have</span></span>
<span id="cb15-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f is the behavior we want to do</span></span>
<span id="cb15-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> h(x):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the curried second argument</span></span>
<span id="cb15-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(n(f)(x))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we call f() again on our n(f)(x)</span></span>
<span id="cb15-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> h</span>
<span id="cb15-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb15-13"></span>
<span id="cb15-14"></span>
<span id="cb15-15">emit(INCREMENT(ONE))</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>'**'</code></pre>
</div>
</div>
<p>Spend some time stepping through the above code to understand it. We’re essentially wrapping nested functions as many times as we need to get to the next number. Once you’ve wrapped your head around it, see that we can re-write the above as lambdas:</p>
<div id="306b103b" class="cell" data-execution_count="10">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(x)</span>
<span id="cb17-2"></span>
<span id="cb17-3">INCREMENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(n(f)(x))</span>
<span id="cb17-4"></span>
<span id="cb17-5">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ONE)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our calculated TWO from ONE</span></span>
<span id="cb17-6"></span>
<span id="cb17-7">emit(TWO)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'**'</code></pre>
</div>
</div>
<p>If we can calculate <code>TWO</code> from <code>ONE</code>, we can calculate <code>THREE</code>:</p>
<div id="45107760" class="cell" data-execution_count="11">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">THREE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(TWO)</span>
<span id="cb19-2"></span>
<span id="cb19-3">emit(THREE)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'***'</code></pre>
</div>
</div>
<p>Pretty neat! We can keep doing this to infinity, either by saving values, or calculating them on the fly! But you may be wondering, what about <code>ZERO</code>? Well, we’ve defined <code>ONE</code> as a single call to any behavior <code>f()</code>, so <code>ZERO</code> would simply be no calls to that behavior:</p>
<div id="394a59ec" class="cell" data-execution_count="12">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">ZERO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : x</span>
<span id="cb21-2"></span>
<span id="cb21-3">emit(ZERO)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>''</code></pre>
</div>
</div>
<p>See how <code>ZERO</code> doesn’t call <code>f()</code> at all? What’s fun here is that we no longer need to have defined <code>ONE</code>, we can calculate it from <code>ZERO</code>!</p>
<div id="07d3bd76" class="cell" data-execution_count="13">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ZERO)</span>
<span id="cb23-2"></span>
<span id="cb23-3">emit(ONE)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'*'</code></pre>
</div>
</div>
</section>
<section id="operators" class="level3">
<h3 class="anchored" data-anchor-id="operators">Operators</h3>
<p>Now that we know we can represent numbers as function calls, let’s start working on math operators. We’ve already introduced one critical operator, <code>INCREMENT</code>, and we can use that to introduce others. Let’s start with <code>ADD</code>. Addition is can be thought of as incrementing <code>M</code> times on a number <code>N</code>. For example, <code>2 + 3</code> could be described as incrementing 2, three times. Before we attempt to implement that in our system, let’s look again to how we would Curry this in Python:</p>
<div id="a6a9072b" class="cell" data-execution_count="14">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(a):</span>
<span id="cb25-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):</span>
<span id="cb25-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb25-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb25-5"></span>
<span id="cb25-6">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>5</code></pre>
</div>
</div>
<div id="a0d87735" class="cell" data-execution_count="15">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ADD(a):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first number, which is always a function</span></span>
<span id="cb27-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our second number, which is always a function</span></span>
<span id="cb27-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b(INCREMENT)(a)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increment a, b times</span></span>
<span id="cb27-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb27-5"></span>
<span id="cb27-6"></span>
<span id="cb27-7">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(TWO)(THREE)</span>
<span id="cb27-8">emit(FIVE)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>'*****'</code></pre>
</div>
</div>
<p>Since <em>everything</em> is <em>always</em> a function, our numbers can be used not only as representations of calculations, but also as executors. Here’s our <code>ADD</code> as a lambda:</p>
<div id="0e16c1c3" class="cell" data-execution_count="16">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b: b(INCREMENT)(a)</span>
<span id="cb29-2"></span>
<span id="cb29-3">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(TWO)(THREE)</span>
<span id="cb29-4">emit(FIVE)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>'*****'</code></pre>
</div>
</div>
<p>The last missing operator of our computational system multiplication. Multiplication should feel a lot like nested functions you see often in programming.</p>
<div id="10ea3f1e" class="cell" data-execution_count="17">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> MULT(a):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first number, which is always a function</span></span>
<span id="cb31-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> outer(b):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our second number, which is always a function</span></span>
<span id="cb31-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function we want to do a*b times</span></span>
<span id="cb31-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b(a(f))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do f, a times, and do that b times</span></span>
<span id="cb31-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb31-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outer</span>
<span id="cb31-7"></span>
<span id="cb31-8">SIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MULT(TWO)(THREE)</span>
<span id="cb31-9">emit(SIX)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>'******'</code></pre>
</div>
</div>
<p>Again, we can represent <code>MULT</code> as a lambda:</p>
<div id="92cfd49f" class="cell" data-execution_count="18">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">MULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : b(a(f))</span>
<span id="cb33-2"></span>
<span id="cb33-3">SIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MULT(TWO)(THREE)</span>
<span id="cb33-4">emit(SIX)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>'******'</code></pre>
</div>
</div>
</section>
<section id="using-our-computer" class="level3">
<h3 class="anchored" data-anchor-id="using-our-computer">Using Our Computer</h3>
<p>We’ve now defined everything necessary to implement our <code>square_sum</code> function in the Lambda Calculus. Let’s build it here from these basic principles. We want to calculate <code>square_sum(5, 2)</code>.</p>
<div id="cb5ae57e" class="cell" data-execution_count="19">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ZERO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : x</span>
<span id="cb35-2">INCREMENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(n(f)(x))</span>
<span id="cb35-3">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b: b(INCREMENT)(a)</span>
<span id="cb35-4">MULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : b(a(f))</span>
<span id="cb35-5"></span>
<span id="cb35-6">square_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : ADD(MULT(a)(a))(MULT(b)(b))</span>
<span id="cb35-7"></span>
<span id="cb35-8">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(INCREMENT(ZERO))(INCREMENT(ZERO))</span>
<span id="cb35-9">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ADD(TWO)(TWO))</span>
<span id="cb35-10"></span>
<span id="cb35-11">RESULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_sum(FIVE)(TWO)</span></code></pre></div></div>
</div>
<p>And that’s it! Using nothing but single-argument lambda functions, we’ve successfully defined non-negative integers, the addition and multiplication operators, and the square-sum function. It’s a little hard to visualize, but the actual answer <em>is</em> calcuated in our <code>RESULT</code> variable. We can output it to our metaphorical printer:</p>
<div id="61b6b829" class="cell" data-execution_count="20">
<div class="code-copy-outer-scaffold"><div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">emit(RESULT)</span></code></pre></div></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'*****************************'</code></pre>
</div>
</div>
<p>Our printer has output 29 asterisks! Pretty cool!</p>
</section>
<section id="whats-next" class="level3">
<h3 class="anchored" data-anchor-id="whats-next">What’s Next?</h3>
<p>Our system barely scratches the surface, but you can continue to implement more operators, comparators, control flow, and everything else you might need for a full computer. I highly recommend consulting the references at the top of the post for further reading!</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2022, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Exploring the Lambda Calculus with Python nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/</guid>
  <pubDate>Sun, 17 Jul 2022 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/lambda-calculus-python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thank you.</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2020-11-10-thank-you/</link>
  <description><![CDATA[ 





<p>It can’t be a cliche because it actually can’t be over-said: working on the Biden Campaign has been both the hardest and most rewarding experience of my career. It’s a rare opportunity to work on something you care deeply about, with amazing people, and to succeed. I said it in 2016, and in 2018, and I’ll say it again in 2020: the tech was never the point. I’m immensely proud of the work we did. The world will never fully understand the mountains that this scrappy team was able to move.</p>
<p>To those who invited me in: thank you. To those who pushed me: thank you. To those who pushed with me: thank you.</p>
<p>What’s next? I’m going to sleep for a while. I don’t know what’s after that, but I won’t be stepping away from the fight for democracy, justice, and a better world.</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2020-11-10-thank-you/</guid>
  <pubDate>Tue, 10 Nov 2020 06:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2020-11-10-thank-you/thank-you-social.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
