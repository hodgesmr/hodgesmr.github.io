<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Matt Hodges</title>
<link>https://matthodges.com/posts.html</link>
<atom:link href="https://matthodges.com/posts.xml" rel="self" type="application/rss+xml"/>
<description>Matt Hodges is a political technologist who leverages over a decade of experience in Democratic campaigns and engineering to drive change.</description>
<image>
<url>https://matthodges.com/img/social.jpg</url>
<title>Matt Hodges</title>
<link>https://matthodges.com/posts.html</link>
</image>
<generator>quarto-1.5.55</generator>
<lastBuildDate>Tue, 23 Jul 2024 05:00:00 GMT</lastBuildDate>
<item>
  <title>How Did Skannerz Work?</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/</link>
  <description><![CDATA[ 





<p>This post is a redux from a now-deleted social media thread. It felt too important to let bit rot.</p>
<p>If you’re a Millennial of a certain age, or perhaps a Baby Boomer who raised Millennials,<sup>1</sup> you might remember the 2001 toy Skannerz by <a href="https://en.wikipedia.org/wiki/Radica_Games">Radica</a>. It was a gotta-catch-em-all game that involved scanning real-world barcodes to collect monsters and objects, and to battle other Skannerz. It was a hand-held gadget toy back when consumer electronics were still weird and fun and we had more products than just iPhone. I had a blue one. It looked like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/skannerz-zendra.jpg" class="img-fluid figure-img"></p>
<figcaption>A Zendra Skanner</figcaption>
</figure>
</div>
<p>The toy/game had an A+ premise: alien monsters transported down to earth and decided to hide inside of the barcodes on products all around your home (or, more annoyingly to your parents, all around the grocery store). Your job was to scan every barcode you could get your hands on, fight and capture the alien monsters, and then fight the monsters your friends collected. And to make the weirdest Pokémon ripoff complete: the Skannerz came in three colors — red, blue, and green — that could only collect monsters of their associated “tribes”. This really good commercial explains:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/eXt6YihygTw" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Because I was already a major dork at 11 years old, I was intrigued by how the device worked. How did it go from barcode to monster? There was no way it was talking to a server (although I did imagine the world’s greatest PHPMyAdmin at the time). I guessed that it had every possible barcode referenced internally. But that’s not quite correct. It was a little more clever than that.</p>
<p>But frirst, a quick primer on barcodes. There are many variations; this is a <a href="https://en.wikipedia.org/wiki/Universal_Product_Code">UPC Version A</a> — very common in the United States. It has a basic specification: that first digit way to the left is the product type (sometimes called a number system). The next five digits identify the manufacturer. The next five identify the product. And at the end is a checksum digit. The details of how to implement the spec aren’t all too important for our Skannerz exploration.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/barcode.png" class="img-fluid figure-img"></p>
<figcaption>An example UPC - A bar code</figcaption>
</figure>
</div>
<p>Okay, back to the Skannerz game. As mentioned above, there were 3 different “tribes”, identified by which color scanning device you had. And there were 126 total monsters. So each tribe could capture 42 monsters. If you wanted to catch ’em all you needed to buy all three. Business!</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/three-skannerz.jpg" class="img-fluid figure-img"></p>
<figcaption>The three original Skannerz: Ujalu (red), Pataak (green), and Zendra (blue)</figcaption>
</figure>
</div>
<p>You could also collect non-monster items from barcodes. And some barcodes healed your injured monsters. Again, these toys had no wireless communication (it was 2001!) so all of the logic for item or monster identification was baked right into the device. But how?</p>
<p>The Skannerz <a href="https://patentimages.storage.googleapis.com/05/ca/8a/0c25f67d6c06a3/US20080139309A1.pdf">patent</a> is conveniently revealing!<sup>2</sup> The device only cares about the “product” section (denoted below as 1315). If the first digit is 0-5, you’ve scanned a monster. 6-9, you’ve scanned an item. Digits 3, 4, and 5 identify the item/monster.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/skannerz-barcode-reference.png" class="img-fluid figure-img"></p>
<figcaption>FIG. 13 from the Skannerz patent illustrates one method of correlating a UPC code to a feature of the game.</figcaption>
</figure>
</div>
<p>If the first digit in the barcode’s product code is 0 - 5, we’re in Monster Mode.</p>
<p>We’ve got 1000 possible values (000-999 across digits 3, 4, and 5 in our product code) to identify 126 monsters. The patent goes on to explain how the magic of division solves this problem:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1000%7D%7B126%7D%20=%207.94%0A"></p>
<p>And there was much rejoicing.</p>
<p>The range of numbers from 000 to 007 correspond to the first monster in Tribe 1, 008 to 015 correspond to the first monster in Tribe 2, and so on.</p>
<p>The patent then goes on to address the fact that 126 doesn’t divide well into 1000, and that 7.94 is not an integer. We only follow this eight-stepping until we get through the 124th monster, and then:</p>
<blockquote class="blockquote">
<p>Because 1,000 is not a multiple of 126, the last 2 monsters each have a range of 4 numbers. In other words, the last monster in Tribe 2 would correspond to the range of numbers 992 through 995 and the last monster in Tribe 3 would correspond to the range of numbers 996 through 999.</p>
</blockquote>
<p>Now, if the first digit in the barcode’s produt code is 6 - 9, we’re in Item Mode.</p>
<p>Similarly, there were 24 items in the game + 1 for healing. So 25 items. Again, we’ve got 1000 values to work with:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B1000%7D%7B25%7D%20=%2040%0A"></p>
<p>So a range of 40 numbers can be used to define each item. Item 1 corresponds to the range of numbers from 000 through 039, Item 2 corresponds to the range of numbers from 040 through 079, and so on. And great news: 40 <em>is</em> an integer.</p>
<p>Quick aside: the UPC Version A codec above is the the only format outlined in the Skannerz patent. But the patent also burries this little nugget:</p>
<blockquote class="blockquote">
<p>Many other encoding techniques are within the scope of the present invention. In some such embodiments, Global Location Number (“GLN’) codes and similar codes used, e.g.&nbsp;for identifying parcels, are assigned secondary meanings which correspond with elements of a game. In still other embodiments, codes used for entirely different purposes, for example, audio or video data compression, data encryption, etc., are assigned secondary meanings which correspond with elements of a game.</p>
</blockquote>
<p>What does that mean? It literally says nothing else about what invention is being claimed there, but good on the Radica lawyers for planting a flag I guess? Maybe the <a href="https://skannerz.fandom.com/wiki/Skannerz_Commander">Skannerz Commander</a>, which I never had, rolled its own encryption algorithm?</p>
<p>But that’s really it! If you knew this encoding scheme, and had access to a printer, you could collect all the monsters and items pretty quickly. Anyone else remember <a href="https://web.archive.org/web/20010201163900/http://www.barcodemill.com/">Barcode Mill</a>? Of course people knew; there were unofficial barcode books you could buy to help you complete your collection. But where’s the fun in that?</p>
<p>Thanks for indulging my dork nostalgia. I look forward to the Greta Gerwig adaptation.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Generational cohort discourse is stupid.↩︎</p></li>
<li id="fn2"><p>You don’t need to be a lawyer to read a patent. They can be very interesting! This one had cartoon drawings!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <guid>https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/</guid>
  <pubDate>Tue, 23 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-23-how-did-skannerz-work/three-skannerz.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Amused Entirely To Death</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/</link>
  <description><![CDATA[ 





<p>At this point there’s nothing novel in pointing out that news and politics has devolved into an entertainment competition. But I can’t become so numb to let last week’s Republican National Convention go without comment.</p>
<p>I won’t get into detailed summaries or link to videos. The Republican National Convention, unsurprisingly, was rife with jingoism, xenophobia, and hate. But what stood out was a primetime performance on the final night:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/hulk-hogan-trump.jpg" class="img-fluid figure-img"></p>
<figcaption>Hulk Hogan ripping his shirt off during the 2024 Republican National Convention</figcaption>
</figure>
</div>
<p>If you missed the social media frenzy, the short version is Hulk Hogan took the stage during a primetime speech to say, among many pernicious things:</p>
<blockquote class="blockquote">
<p>But what happened last week, when they took a shot at my hero, and they tried to kill the next president of the United States, enough was enough! And I said, ‘Let Trump-A-Mania run wild brother! Let Trump-A-Mania rule again!’</p>
</blockquote>
<p>And then he ripped off his shirt and the stadium of suited leaders of the Republican party lost their minds in cheers and applause. Never mind that pundits and Republican leaders assured us that — after the attempted assassination of Donald Trump days prior — this convention would be a message of national unity. Never mind whoever the <em>they</em> are that he’s talking about. Hulk Hogan gave the people what they wanted: a viral-worthy performance that makes you feel something when you press share.</p>
<p>This moment exemplified a broader issue that has been gradually intensifying. The disgraced former president, after all, is a reality TV character, epitomizing the entertainment-driven nature of modern politics. To note that is not to minimize the harm he has inflicted and will inflict if given another chance. But it’s an apt time to highlight a recurring misdiagnosis of modern Conservative power.</p>
<section id="our-misdiagnosis-of-conservative-power" class="level3">
<h3 class="anchored" data-anchor-id="our-misdiagnosis-of-conservative-power">Our Misdiagnosis of Conservative Power</h3>
<p>As astute online big-brains, we’re frequently high-fiving ourselves for naming the Right’s methods and tactics as Orwellian (despite the fact that most people haven’t actually read <em>Nineteen Eighty-Four</em>). We get those small hits of dopamine by labeling our eroding rights as such. But by and large, power-building of the Trump era isn’t Orwellian at all. Just as Donald Trump himself isn’t Machiavellian at all (a core tenet from <em>The Prince</em> is a firm warning against flatterers — Donald Trump could never). Yes, the Right does deploy assaults that could be lifted directly from Orwell or Bradbury — look no further than the book-banning crusades or the “do not believe what you see” lies from the press briefing rooms. But when evaluating how we got here and why we’re stuck here, it’s instructive to look to Neil Postman’s observations in <a href="https://en.wikipedia.org/wiki/Amusing_Ourselves_to_Death" target="_blank">Amusing Ourselves to Death</a>:</p>
<blockquote class="blockquote">
<p>But we had forgotten that alongside Orwell’s dark vision, there was another - slightly older, slightly less well known, equally chilling: Aldous Huxley’s <em>Brave New World</em>. Contrary to common belief even among the educated, Huxley and Orwell did not prophesy the same thing. Orwell warns that we will be overcome by an externally imposed oppression. But in Huxley’s vision, no Big Brother is required to deprive people of their autonomy, maturity and history. As he saw it, people will come to love their oppression, to adore the technologies that undo their capacities to think. What Orwell feared were those who would ban books. What Huxley feared was that there would be no reason to ban a book, for there would be no one who wanted to read one. Orwell feared those who would deprive us of information. <strong>Huxley feared those who would give us so much that we would be reduced to passivity and egoism</strong>. Orwell feared that the truth would be concealed from us. <strong>Huxley feared the truth would be drowned in a sea of irrelevance.</strong> Orwell feared we would become a captive culture. <strong>Huxley feared we would become a trivial culture</strong>, preoccupied with some equivalent of the feelies, the orgy porgy, and the centrifugal bumblepuppy. As Huxley remarked in <em>Brave New World Revisited</em>, the civil libertarians and rationalists who are ever on the alert to oppose tyranny “failed to take into account man’s almost infinite appetite for distractions.” In <em>1984</em>, Orwell added, people are controlled by inflicting pain. <strong>In <em>Brave New World</em>, they are controlled by inflicting pleasure.</strong> In short, Orwell feared that what we fear will ruin us. Huxley feared that what we desire will ruin us.</p>
</blockquote>
<p>I’m not particularly interested in arguing that “we’re living in a dystopia, actually”. Despite our collective addiction to devices that incessantly tell us that the world is terrible, I still believe things are getting better over time. And I largely reject the, “no one has had it as bad as we have it” notions from my generational cohort. But we can only pursue the long arc of progress if we continue to care enough to do so. If I was architecting a <strong>#resist</strong> movement of 2024, it would be to resist the trivialization of political power.</p>
<p>It’s important to reflect on Huxley’s and Postman’s ideas, even if it makes us uncomfortable. So many people today claim they’ve stopped consuming news altogether, but often they simply switch to more entertaining sources that don’t feel like homework. Consider this: how many of your friends can name a single Supreme Court justice without hints? You should start asking! This exercise, which I’ve conducted socially, reveals fascinating results! These observations aren’t about intelligence — they’re about priorities.</p>
<p>Again, I don’t think I’m pointing out anything novel here. Pundits analyze political events in terms of “energy” and base success on Nielsen viewership metrics. Matt Gaetz and Ted Cruz both have side gigs as podcast hosts. Marjorie Taylor Greene dresses up as Cruella de Vil to scream during the Statue of the Union.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/marjorie-taylor-greene-sotu.jpg" class="img-fluid figure-img"></p>
<figcaption>Marjorie Taylor Greene dressed up as Cruella de Vil to scream during the Statue of the Union</figcaption>
</figure>
</div>
<p>It’s all incredibly stupid. And it’s helpful to have an appropriate label for what’s been happening for a long time.</p>
<p>So, when Hulk Hogan took to the stage to frivolously transport the Right’s power-holders back to the 1980s while ripping off his shirt, exalting “Trump-A-Mania” (aptly named), it couldn’t be more clear that ambient Conservative power-building is Huxleyan, not Orwellian. We are amusing ourselves entirely to death.</p>
<p>Seems bad.</p>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/</guid>
  <pubDate>Sat, 20 Jul 2024 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2024-07-20-amused-entirely-to-death/amused-entirely-to-death.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Exploring the Lambda Calculus with Python</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/</link>
  <description><![CDATA[ 





<p><img src="https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/lambda-calculus-python.jpeg" class="img-fluid"></p>
<p>This post explores some basic ideas of the Lambda Calculus, and how to use it to implement a computation system with it. We will define numbers and operators from scratch, and use that to implement the <code>square_sum</code> function.</p>
<p>If you’re new to the Lambda Calculus, or functional programming in general, you may wish to start with some of these resources:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=pkCLMl0e_0k">David Beazley’s Lambda Calculus from the Ground Up - PyCon 2019</a>
<ul>
<li>If you’re someone who learns well by watching and listening, I highly recommend that you watch this talk. A significant portion of the concepts below come from watching this talk more than once.</li>
</ul></li>
<li><a href="https://www.youtube.com/watch?v=AqNDk_UJW4k">Ben Eater’s Making a computer Turing complete</a></li>
<li><a href="https://en.wikipedia.org/wiki/Lambda_calculus">Lambda Calculus | Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/Currying">Currying | Wikipedia</a></li>
</ul>
<p>This post assumes you are fairly familiar with Python and Python’s <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions">lambda expressions</a>.</p>
<section id="rules-of-our-system" class="level3">
<h3 class="anchored" data-anchor-id="rules-of-our-system">Rules of Our System</h3>
<p>The Lambda Calculus asserts that any computational system can be implemented with a set of three simple rules: * You can define variables * You can define single-argument functions * You can call single-argument functions</p>
<p>That’s it. <strong>No numbers. No operators. No control flow. No data structures.</strong></p>
<p>I find it fascinating that with these very minimal concepts, the Lambda Calculus asserts that we can create a fully functional computer! This is, of course, a very minimal explanation of the rules of the Lambda Calculus, and I invite you to consult the references above for more information and formal definitions!</p>
</section>
<section id="the-challenge" class="level3">
<h3 class="anchored" data-anchor-id="the-challenge">The Challenge</h3>
<p>Using the rules described above, we want to create a system that can calculate the square-sum of any inputs. Again, we <em>only</em> have single-argument functions. That means we have no integers, no addition, and no multiplication. We’re going to have to create those using nothing but single-argument functions that accept single-argument functions as input and can only return single-argument functions.</p>
<p>For reference, consider the <code>square_sum</code> function, that may be written in Python as:</p>
<div id="34049a45" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_sum(a, b):</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b)</span>
<span id="cb1-3"></span>
<span id="cb1-4"></span>
<span id="cb1-5">square_sum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>29</code></pre>
</div>
</div>
<section id="currying" class="level4">
<h4 class="anchored" data-anchor-id="currying">Currying</h4>
<p>As previously mentioned, our computation system requires that we can only create functions and those functions must accept one and only one argument. This may seem like a limiting requirement, but let’s take a look at what we can do with the idea of <a href="https://en.wikipedia.org/wiki/Currying">Currying</a> — a method for transforming multi-argument functions into a chain of single-argument functions. This allows us to re-write our Python implementation as:</p>
<div id="37bba6c1" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_sum(a):</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):</span>
<span id="cb3-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>a) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> (b<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>b)</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7">square_sum(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>29</code></pre>
</div>
</div>
<p>In our curried version above, <code>square_sum</code> accepts the first argument, <code>a</code> and returns a function that accepts the second argument, <code>b</code>. We can then call that returned <code>inner</code> function to complete our calculation. Currying is a fundamental strategy for computation in the Lambda Calculus.</p>
</section>
</section>
<section id="our-basic-building-block" class="level3">
<h3 class="anchored" data-anchor-id="our-basic-building-block">Our Basic Building Block</h3>
<p>Unless you’re already familiary with the Lambda Calculus, or you’re a veteran of functional programming, you’re probaby very accustomed to computing by operating on <em>state</em>. You have data structures, or numbers, or bits, and you operate on them and then you persist new data structures, or numbers, or bits.</p>
<p>Our concept of integers is a perfect example. As children, we learned that the concept of <code>3</code> can be represented by holding up three fingers on our hand, and seeing all three of them, and pointing to them. The Lambda Calculus asks us to adjust that concept away from <em>state</em> and towards <em>behavior</em>. Instead of holding up three fingers, what if we held up <em>one finger three times</em>. It may be harder for us see that idea of <code>3</code>, but it is a representation of <code>3</code> nonetheless.</p>
<p>Sit with this idea of behavior representing integers, because behavior will be how we represent <em>everything</em>. And in our system, functions are behavior. Our function could be the act of holding up a finger, pressing a button, or anything else we need it to be.</p>
<p>Let’s use that metaphor of pressing a button. The button press is our behavior, and behaviors are functions. And arguments are functions. And we can only return functions. So, let’s write that:</p>
<div id="8e41ad57" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> button_press(f):</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span></code></pre></div>
</div>
<p>Not much to see here yet. In fact, our system isn’t designed to <em>see</em> anything. It’s designed to do computations within a given set of rules.</p>
<p>We’re designing a system of computation, and we can think about this system like instruction that run on a CPU. But we’re humans, and it’s helpful for us to be able to see the results of our computation in ways that we can understand. So, we’re going to introduce an external system that is <em>not</em> within the Lambda Calculus, but can interface with it. Think of this as a peripheral like a printer. It’s not used to <em>do</em> any of our computation. It can do special things that our CPU can’t do, and it’ll connect to our system as a function, because our system can only work with functions.</p>
<p>Let’s pretend our system has a printer attached that can only print the <code>*</code> character. We’ll interface with it via an <code>emit</code> function.</p>
<p>Here is our not-of-our-system <code>emit</code> function:</p>
<div id="1e7bbf0c" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> emit(func):</span>
<span id="cb6-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> asterisk(x):</span>
<span id="cb6-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>x<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">*'</span></span>
<span id="cb6-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> func(asterisk)(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>)</span></code></pre></div>
</div>
<p>This is kindof strange. Our external <code>emit</code> function takes in some function and has an inner asterisk-generating function. Let’s hook it up to our <code>button_press</code> function:</p>
<div id="80694f8f" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">emit(button_press)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>'*'</code></pre>
</div>
</div>
<p>What just happened here? We call our <code>emit</code> function (external from our system) by passing in our <code>button_press</code> function (internal to our system). We did it one time, and it yielded a single <code>*</code>. Again, this is just a convenience interface so that we can see what’s going on, and isn’t necessary to do any of our actual computation.</p>
</section>
<section id="numbers" class="level3">
<h3 class="anchored" data-anchor-id="numbers">Numbers</h3>
<p>Above we began to describe how functions, or behaviors, can represent numbers. A single call to <code>button_press</code> yielded some concept of <code>1</code>. What if we didn’t think about it as one call to <code>button_press</code> anymore, but as the idea of <em>one behavior</em>:</p>
<div id="f4b96dcb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ONE(f):</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):</span>
<span id="cb9-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb9-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb9-5"></span>
<span id="cb9-6">emit(ONE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>'*'</code></pre>
</div>
</div>
<p>If you’ve made it this far, you’re probably thinking, “Hey, Python has a way to represent single-argument functions, and they’re called <em>lambdas</em>!” Let’s start using that instead of the expanded <code>button_press</code> function:</p>
<div id="f829cb33" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(x)</span>
<span id="cb11-2"></span>
<span id="cb11-3">emit(ONE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>'*'</code></pre>
</div>
</div>
<p>Cool. So we know how to represent the concept of <code>1</code> using only single-argument functions. We can represent <code>2</code> by calling our function twice, because in our system numbers are behaviors:</p>
<div id="449512ef" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: f(f(x))</span>
<span id="cb13-2"></span>
<span id="cb13-3">emit(TWO)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>'**'</code></pre>
</div>
</div>
<p>This is all well and good, but we’re not really going to try to implement every single number are we? That wouldn’t make a very good computer. How can we represent all countable numbers?</p>
<p>If you look closely at our definitions above, <code>ONE</code> is a single call to <code>f()</code>, while <code>TWO</code> is <code>f(f())</code>. This means that if we’re at any given number, we can get to the next number by calling <code>f()</code> again. We can define an <code>INCREMENT()</code> function to do just that. I find it helpful to start by looking at this through the expanded Python functions first:</p>
<div id="666a4eef" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ONE(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f is the behavior we want to do</span></span>
<span id="cb15-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(x):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the curried second argument</span></span>
<span id="cb15-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(x)</span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb15-5"></span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> INCREMENT(n):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># n is the concept of the number we already have</span></span>
<span id="cb15-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> g(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># f is the behavior we want to do</span></span>
<span id="cb15-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> h(x):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x is the curried second argument</span></span>
<span id="cb15-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> f(n(f)(x))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we call f() again on our n(f)(x)</span></span>
<span id="cb15-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> h</span>
<span id="cb15-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> g</span>
<span id="cb15-13"></span>
<span id="cb15-14"></span>
<span id="cb15-15">emit(INCREMENT(ONE))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>'**'</code></pre>
</div>
</div>
<p>Spend some time stepping through the above code to understand it. We’re essentially wrapping nested functions as many times as we need to get to the next number. Once you’ve wrapped your head around it, see that we can re-write the above as lambdas:</p>
<div id="306b103b" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(x)</span>
<span id="cb17-2"></span>
<span id="cb17-3">INCREMENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(n(f)(x))</span>
<span id="cb17-4"></span>
<span id="cb17-5">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ONE)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our calculated TWO from ONE</span></span>
<span id="cb17-6"></span>
<span id="cb17-7">emit(TWO)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>'**'</code></pre>
</div>
</div>
<p>If we can calculate <code>TWO</code> from <code>ONE</code>, we can calculate <code>THREE</code>:</p>
<div id="45107760" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">THREE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(TWO)</span>
<span id="cb19-2"></span>
<span id="cb19-3">emit(THREE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>'***'</code></pre>
</div>
</div>
<p>Pretty neat! We can keep doing this to infinity, either by saving values, or calculating them on the fly! But you may be wondering, what about <code>ZERO</code>? Well, we’ve defined <code>ONE</code> as a single call to any behavior <code>f()</code>, so <code>ZERO</code> would simply be no calls to that behavior:</p>
<div id="394a59ec" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">ZERO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : x</span>
<span id="cb21-2"></span>
<span id="cb21-3">emit(ZERO)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>''</code></pre>
</div>
</div>
<p>See how <code>ZERO</code> doesn’t call <code>f()</code> at all? What’s fun here is that we no longer need to have defined <code>ONE</code>, we can calculate it from <code>ZERO</code>!</p>
<div id="07d3bd76" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">ONE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ZERO)</span>
<span id="cb23-2"></span>
<span id="cb23-3">emit(ONE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>'*'</code></pre>
</div>
</div>
</section>
<section id="operators" class="level3">
<h3 class="anchored" data-anchor-id="operators">Operators</h3>
<p>Now that we know we can represent numbers as function calls, let’s start working on math operators. We’ve already introduced one critical operator, <code>INCREMENT</code>, and we can use that to introduce others. Let’s start with <code>ADD</code>. Addition is can be thought of as incrementing <code>M</code> times on a number <code>N</code>. For example, <code>2 + 3</code> could be described as incrementing 2, three times. Before we attempt to implement that in our system, let’s look again to how we would Curry this in Python:</p>
<div id="a6a9072b" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add(a):</span>
<span id="cb25-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):</span>
<span id="cb25-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb25-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb25-5"></span>
<span id="cb25-6">add(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>5</code></pre>
</div>
</div>
<div id="a0d87735" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> ADD(a):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first number, which is always a function</span></span>
<span id="cb27-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(b):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our second number, which is always a function</span></span>
<span id="cb27-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b(INCREMENT)(a)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Increment a, b times</span></span>
<span id="cb27-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb27-5"></span>
<span id="cb27-6"></span>
<span id="cb27-7">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(TWO)(THREE)</span>
<span id="cb27-8">emit(FIVE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>'*****'</code></pre>
</div>
</div>
<p>Since <em>everything</em> is <em>always</em> a function, our numbers can be used not only as representations of calculations, but also as executors. Here’s our <code>ADD</code> as a lambda:</p>
<div id="0e16c1c3" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b: b(INCREMENT)(a)</span>
<span id="cb29-2"></span>
<span id="cb29-3">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(TWO)(THREE)</span>
<span id="cb29-4">emit(FIVE)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>'*****'</code></pre>
</div>
</div>
<p>The last missing operator of our computational system multiplication. Multiplication should feel a lot like nested functions you see often in programming.</p>
<div id="10ea3f1e" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> MULT(a):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our first number, which is always a function</span></span>
<span id="cb31-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> outer(b):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Our second number, which is always a function</span></span>
<span id="cb31-3">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> inner(f):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The function we want to do a*b times</span></span>
<span id="cb31-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> b(a(f))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># do f, a times, and do that b times</span></span>
<span id="cb31-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> inner</span>
<span id="cb31-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> outer</span>
<span id="cb31-7"></span>
<span id="cb31-8">SIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MULT(TWO)(THREE)</span>
<span id="cb31-9">emit(SIX)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>'******'</code></pre>
</div>
</div>
<p>Again, we can represent <code>MULT</code> as a lambda:</p>
<div id="92cfd49f" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">MULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : b(a(f))</span>
<span id="cb33-2"></span>
<span id="cb33-3">SIX <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MULT(TWO)(THREE)</span>
<span id="cb33-4">emit(SIX)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>'******'</code></pre>
</div>
</div>
</section>
<section id="using-our-computer" class="level3">
<h3 class="anchored" data-anchor-id="using-our-computer">Using Our Computer</h3>
<p>We’ve now defined everything necessary to implement our <code>square_sum</code> function in the Lambda Calculus. Let’s build it here from these basic principles. We want to calculate <code>square_sum(5, 2)</code>.</p>
<div id="cb5ae57e" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">ZERO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : x</span>
<span id="cb35-2">INCREMENT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x : f(n(f)(x))</span>
<span id="cb35-3">ADD <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b: b(INCREMENT)(a)</span>
<span id="cb35-4">MULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> f : b(a(f))</span>
<span id="cb35-5"></span>
<span id="cb35-6">square_sum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> a : <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> b : ADD(MULT(a)(a))(MULT(b)(b))</span>
<span id="cb35-7"></span>
<span id="cb35-8">TWO <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ADD(INCREMENT(ZERO))(INCREMENT(ZERO))</span>
<span id="cb35-9">FIVE <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> INCREMENT(ADD(TWO)(TWO))</span>
<span id="cb35-10"></span>
<span id="cb35-11">RESULT <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> square_sum(FIVE)(TWO)</span></code></pre></div>
</div>
<p>And that’s it! Using nothing but single-argument lambda functions, we’ve successfully defined non-negative integers, the addition and multiplication operators, and the square-sum function. It’s a little hard to visualize, but the actual answer <em>is</em> calcuated in our <code>RESULT</code> variable. We can output it to our metaphorical printer:</p>
<div id="61b6b829" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">emit(RESULT)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>'*****************************'</code></pre>
</div>
</div>
<p>Our printer has output 29 asterisks! Pretty cool!</p>
</section>
<section id="whats-next" class="level3">
<h3 class="anchored" data-anchor-id="whats-next">What’s Next?</h3>
<p>Our system barely scratches the surface, but you can continue to implement more operators, comparators, control flow, and everything else you might need for a full computer. I highly recommend consulting the references at the top of the post for further reading!</p>
</section>
<section id="license" class="level3">
<h3 class="anchored" data-anchor-id="license">License</h3>
<pre><code>Copyright (c) 2022, Matt Hodges
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Exploring the Lambda Calculus with Python nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</code></pre>


</section>

 ]]></description>
  <guid>https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/</guid>
  <pubDate>Sun, 17 Jul 2022 05:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2022-07-17-exploring-lambda-calculus-python/lambda-calculus-python.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thank you.</title>
  <dc:creator>Matt Hodges</dc:creator>
  <link>https://matthodges.com/posts/2020-11-10-thank-you/</link>
  <description><![CDATA[ 





<p>It can’t be a cliche because it actually can’t be over-said: working on the Biden Campaign has been both the hardest and most rewarding experience of my career. It’s a rare opportunity to work on something you care deeply about, with amazing people, and to succeed. I said it in 2016, and in 2018, and I’ll say it again in 2020: the tech was never the point. I’m immensely proud of the work we did. The world will never fully understand the mountains that this scrappy team was able to move.</p>
<p>To those who invited me in: thank you. To those who pushed me: thank you. To those who pushed with me: thank you.</p>
<p>What’s next? I’m going to sleep for a while. I don’t know what’s after that, but I won’t be stepping away from the fight for democracy, justice, and a better world.</p>



 ]]></description>
  <guid>https://matthodges.com/posts/2020-11-10-thank-you/</guid>
  <pubDate>Tue, 10 Nov 2020 06:00:00 GMT</pubDate>
  <media:content url="https://matthodges.com/posts/2020-11-10-thank-you/thank-you-social.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
